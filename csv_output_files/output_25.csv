,author,title,url,description,date,content
0,,Anyone else lurk and feel like they understand nothing?,https://news.ycombinator.com/item?id=40620764,Comments,2024-06-08T23:00:28Z,"Anyone else? Makes ya feel like a dumb-dumb. Also, people have niches. I'm guessing you're knowledgeable in your particular niche, and so is everyone else in theirs. HN is a broad church and you can find biologists and people who write optimising compilers, and either are going to look at the other's field with some bafflement.Also, remember how it goes with learning things:* Beginner: I have so much to learn ...* Intermediate: I know everything!* Expert: I have so much to learn ...You might know more than you think you know. Also, remember how it goes with learning things:* Beginner: I have so much to learn ...* Intermediate: I know everything!* Expert: I have so much to learn ...You might know more than you think you know. * Beginner: I have so much to learn ...* Intermediate: I know everything!* Expert: I have so much to learn ...You might know more than you think you know. * Intermediate: I know everything!* Expert: I have so much to learn ...You might know more than you think you know. * Expert: I have so much to learn ...You might know more than you think you know. You might know more than you think you know. 
reply

 If you want to take this stuff seriously, absolutely study computer science, and a little computer engineering as well. When you really understand the fundamentals, you can pick up the rest. 
reply

 If you want to get hired as programmer in AAA game development, then your job role starts to become more specialized as you move up, but that's true in a lot of environments. And jobs for AAA game development are admittedly competitive, so the more value your bring, the more likely you are to be hired. Sometimes that means being an uber elite coding ninja, but it also might mean that you are able to wear a lot of different hats, including skills that aren't programming.Anyway, I just want to say that jumping ""in with minimal programming experience and try to muddle their way through by watching tutorial videos and stuff"" is awesome, actually, especially if your end goal is making games itself. Just do it! Anyway, I just want to say that jumping ""in with minimal programming experience and try to muddle their way through by watching tutorial videos and stuff"" is awesome, actually, especially if your end goal is making games itself. Just do it! 
reply

 Balatro, a recently-released solo-dev indie game, is a great example of this. I saw two tweets the other day that, together, support your point: ""Balatro has a 5000 line if-else chain""[0] and ""in the 3 months since Balatro has launched, it has been collectively played for a total of 6200 years""[1].[0]: https://www.reddit.com/r/gamedev/comments/1cbcmr0/how_is_it_... (couldn't find the twitter link directly but summarized it from this reddit post)[1]: https://x.com/LocalThunk/status/1794876280997036443 [0]: https://www.reddit.com/r/gamedev/comments/1cbcmr0/how_is_it_... (couldn't find the twitter link directly but summarized it from this reddit post)[1]: https://x.com/LocalThunk/status/1794876280997036443 [1]: https://x.com/LocalThunk/status/1794876280997036443 
reply

 
reply

 
reply

 
reply

 
reply

 I was in this phase about a decade ago, which was just a few years into my professional life. I knew nothing back then and I know very little now. 
reply

 Had posts I submitted as a second, even third or fourth thought, from reading the night before that interested me, and was sure no one would care about get picked up to be on the front page.Don't overthink it. If you have something interesting to show or say then go for it as long as it's within the guidelines. Otherwise if it doesn't attract attention maybe it wasn't that interesting after all, or it was good but not great. There are only 30 spots on the front page and maybe your submission was 31/30 material at the end of the day. Best to not worry or fret about it, if you think it's interesting, try submitting it!Have some faith in the editorial staff and HN as an institution that has endured for over a decade maintaining interesting content and discussion. If it's truly good it will get selected for pool/invited or bubble up in the comments.Best of luck on your games and be kind!https://news.ycombinator.com/newsguidelines.htmlhttps://github.com/minimaxir/hacker-news-undocumented Don't overthink it. If you have something interesting to show or say then go for it as long as it's within the guidelines. Otherwise if it doesn't attract attention maybe it wasn't that interesting after all, or it was good but not great. There are only 30 spots on the front page and maybe your submission was 31/30 material at the end of the day. Best to not worry or fret about it, if you think it's interesting, try submitting it!Have some faith in the editorial staff and HN as an institution that has endured for over a decade maintaining interesting content and discussion. If it's truly good it will get selected for pool/invited or bubble up in the comments.Best of luck on your games and be kind!https://news.ycombinator.com/newsguidelines.htmlhttps://github.com/minimaxir/hacker-news-undocumented Have some faith in the editorial staff and HN as an institution that has endured for over a decade maintaining interesting content and discussion. If it's truly good it will get selected for pool/invited or bubble up in the comments.Best of luck on your games and be kind!https://news.ycombinator.com/newsguidelines.htmlhttps://github.com/minimaxir/hacker-news-undocumented Best of luck on your games and be kind!https://news.ycombinator.com/newsguidelines.htmlhttps://github.com/minimaxir/hacker-news-undocumented https://news.ycombinator.com/newsguidelines.htmlhttps://github.com/minimaxir/hacker-news-undocumented https://github.com/minimaxir/hacker-news-undocumented 
reply

 A lot of stuff simply gets lost on 'new'. I mean how many people even go there? I rarely do so myself. The cases in which I upvote a submission with very few points are usually when I want to submit something I found elsewhere and enter the link in the search before posting. 
reply

 
reply

 https://news.ycombinator.com/item?id=40616660 and https://news.ycombinator.com/item?id=40620056 
reply

 So just relax. 
reply

 A lot of the stuff written here deploys in-jokes, memes, jargon/shibboleths of various tech subcultures:1. (Coastal) startups. Joining a YC startup and being surrounded by startup folks probably was the biggest factor in helping me to understand stuff here. At my first job, I picked up a broad mix of SV tribal knowledge, technical skills, stuff about finance & investing, Agile and scrum and kanban and standups, stats knowledge, + the cool-kid tech products used by this subculture (""what? you got paid with paychex? uhm. never heard of it. here we use gusto"") -- it was essentially an immersion course in 70% of the stuff you see on the front page of this site2. Free-software types. When I taught myself to code, I just stuck with Linux since I couldn't afford a macbook back then. I participated in various open source projects and learned emacs, which made a lot more stuff on here understandable (like I started understanding acronyms like rms and esr, trivia about weird Linux/Unix shit I've had to debug like pulseaudio and systemd and CUPS, secret longstanding wars among various factions within this subculture)3. Academics. I went back to school and started doing research, and spent time learning about the weird CS-theory stuff that I find beautiful like abstract interpretation and programming language theory and functional programming. My research area is far away from that stuff, but having some awareness of it helps me recognize the topics when they pop up hereAlso, keep in mind that the content on this site also tends to reflect specific technologies and practices that are common within these cultures. There's a definite skew towards web and data oriented tech, so it makes sense that as a game dev, much of it wouldn't be comprehensible since you don't have context for it.It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it 1. (Coastal) startups. Joining a YC startup and being surrounded by startup folks probably was the biggest factor in helping me to understand stuff here. At my first job, I picked up a broad mix of SV tribal knowledge, technical skills, stuff about finance & investing, Agile and scrum and kanban and standups, stats knowledge, + the cool-kid tech products used by this subculture (""what? you got paid with paychex? uhm. never heard of it. here we use gusto"") -- it was essentially an immersion course in 70% of the stuff you see on the front page of this site2. Free-software types. When I taught myself to code, I just stuck with Linux since I couldn't afford a macbook back then. I participated in various open source projects and learned emacs, which made a lot more stuff on here understandable (like I started understanding acronyms like rms and esr, trivia about weird Linux/Unix shit I've had to debug like pulseaudio and systemd and CUPS, secret longstanding wars among various factions within this subculture)3. Academics. I went back to school and started doing research, and spent time learning about the weird CS-theory stuff that I find beautiful like abstract interpretation and programming language theory and functional programming. My research area is far away from that stuff, but having some awareness of it helps me recognize the topics when they pop up hereAlso, keep in mind that the content on this site also tends to reflect specific technologies and practices that are common within these cultures. There's a definite skew towards web and data oriented tech, so it makes sense that as a game dev, much of it wouldn't be comprehensible since you don't have context for it.It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it 2. Free-software types. When I taught myself to code, I just stuck with Linux since I couldn't afford a macbook back then. I participated in various open source projects and learned emacs, which made a lot more stuff on here understandable (like I started understanding acronyms like rms and esr, trivia about weird Linux/Unix shit I've had to debug like pulseaudio and systemd and CUPS, secret longstanding wars among various factions within this subculture)3. Academics. I went back to school and started doing research, and spent time learning about the weird CS-theory stuff that I find beautiful like abstract interpretation and programming language theory and functional programming. My research area is far away from that stuff, but having some awareness of it helps me recognize the topics when they pop up hereAlso, keep in mind that the content on this site also tends to reflect specific technologies and practices that are common within these cultures. There's a definite skew towards web and data oriented tech, so it makes sense that as a game dev, much of it wouldn't be comprehensible since you don't have context for it.It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it 3. Academics. I went back to school and started doing research, and spent time learning about the weird CS-theory stuff that I find beautiful like abstract interpretation and programming language theory and functional programming. My research area is far away from that stuff, but having some awareness of it helps me recognize the topics when they pop up hereAlso, keep in mind that the content on this site also tends to reflect specific technologies and practices that are common within these cultures. There's a definite skew towards web and data oriented tech, so it makes sense that as a game dev, much of it wouldn't be comprehensible since you don't have context for it.It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it Also, keep in mind that the content on this site also tends to reflect specific technologies and practices that are common within these cultures. There's a definite skew towards web and data oriented tech, so it makes sense that as a game dev, much of it wouldn't be comprehensible since you don't have context for it.It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it It's also easy to forget if you mostly just get your tech news from this site, but most developers tend to work on Windows targeting Windows-oriented stacks (i.e. Azure, on-prem Windows servers, ASP.NET Core, Power BI, SQL Server, etc) rather than macbooks -- so I suspect much of what you see on the front page of this site that is tech related is foreign to most developers. In any case, I wouldn't feel too bad, and certainly not dumb for it 
reply

 
reply

 Or at least, they're not worth the hype they're given. The wheel is constantly turning, and the hot new framework of today is just a re-hash of something already done years ago with a pretty facade.You probably learned the actual fundamentals of the web, which is exactly what a good developer should do. Nowadays ""frontend devs"" don't know how to make the most basic functionality without React, Bootstrap, and 99 other pieces of bloat.Frankly the stuff I look at just disgusts me on a fundamental level. Like as soon as you decide to use React, you've just mandated up to several megabytes of JavaScript simply to render your HTML. That's abhorrent. You probably learned the actual fundamentals of the web, which is exactly what a good developer should do. Nowadays ""frontend devs"" don't know how to make the most basic functionality without React, Bootstrap, and 99 other pieces of bloat.Frankly the stuff I look at just disgusts me on a fundamental level. Like as soon as you decide to use React, you've just mandated up to several megabytes of JavaScript simply to render your HTML. That's abhorrent. Frankly the stuff I look at just disgusts me on a fundamental level. Like as soon as you decide to use React, you've just mandated up to several megabytes of JavaScript simply to render your HTML. That's abhorrent. 
reply

 
reply

 You definitely don't need a framework and you might actually be able to avoid using JavaScript altogether. I use jQuery only because I like the elegant/terse syntax and I struggle to think of any type of ""ordinary"" website where you'd need anything else.If you approach frontend like ""I need to use React/Angular"" then yeah, you're gonna bash your head against a wall, because it's an entire new ecosystem and paradigm to learn. If you approach frontend like ""I need to use React/Angular"" then yeah, you're gonna bash your head against a wall, because it's an entire new ecosystem and paradigm to learn. 
reply

 
reply

 
reply

 I dont see how a single line of js can remove the need for front end design, complexities of scaling, theme choices, and user friendly design patterns with interactivity. 
reply

 
reply

 
reply

 
reply

 However HN is definitely skewed towards the obscure and the nostalgic with a dash of genetics and cosmology. Most of the programming happens in traditional languages - C/C++/C#/Java/Javascript/PHP/Python, and HN would make you believe everyone is writing functional stuff with monads and functors in LISP or Erlang.The community is great though, very knowledgeable. The community is great though, very knowledgeable. 
reply

 I admire people who unlike myself are sufficiently self contained not to need to post. 
reply

 I lurk both in this world and in the world of Broadway.One of the biggest shockers I had (many years ago already) was how little anyone involved in making theater cares about the audience. One of the biggest shockers I had (many years ago already) was how little anyone involved in making theater cares about the audience. 
reply

 My big takeaway has been when that happens, I remind myself I'm not fit to judge if a comment is good/right or not. I try to get a feel for the context of conversations and just kind of mentally file it away.I've learned a lot here over the years and the discussions sometimes remind of the good old days on slashdot. I've learned a lot here over the years and the discussions sometimes remind of the good old days on slashdot. 
reply

 If you're wondering about content like Rust or Haskell programming, the jargon and implied knowledge can be a little intimidating.  A lot of early Rust users were coming from advanced modern C++ and/or functional programming (FP) and use those concepts freely without assuming people might yet need to learn them.  A lot of Haskell people have learned ways of thinking from other Haskell people or other FP people and they don't feel the need to explain what they're doing all the time.  But it is intimidating.  However, it can also be fun.I'm the worst kind of hobbyist.  I almost never create anything anymore.  When I do, I usually don't use the cool stuff, just some Python, shell, or Awk.  But my hobby is learning about this stuff, what people are doing, and trying to figure out how people are thinking in different ways.  So I have done a bit of functional programming and read a lot of code.  I find it fascinating.  But nothing I have made in that area is worth looking at. I'm the worst kind of hobbyist.  I almost never create anything anymore.  When I do, I usually don't use the cool stuff, just some Python, shell, or Awk.  But my hobby is learning about this stuff, what people are doing, and trying to figure out how people are thinking in different ways.  So I have done a bit of functional programming and read a lot of code.  I find it fascinating.  But nothing I have made in that area is worth looking at. 
reply

 With the demise of the dead tree medium, I and my fellow geek brethren found HN as an alternative, to find crowd sourced and curated  articles of interest.Give it some time. It will all start making sense. Give it some time. It will all start making sense. 
reply

 
reply

 
reply

 Sometimes topics you will be very familiar will be posted and you’ll notice that just because people comment doesn’t mean they know what they are talking about. 
reply

 
reply

 
reply

 I have studied Math/Comp.Sci. I've been writing software professionally for a long time. There are specialized topics I'm not an expert in that might go over my head, if I'm interested enough I'll spend time and dig deeper.My theory is that you want to have a big picture and be able to go into details when/where you need to. My theory is that you want to have a big picture and be able to go into details when/where you need to. 
reply

 It'll happen to you too if you stay around and continue engaging in discussions. Don't be shy. 
reply

 only 10% or so are real nerds or cracks in their field. 
reply

 Also, even the things I do have some understanding of rarely come up in my software job. So it's not like you need to know everything. Seems like it's better to know less as long as you know just the right things. 
reply

 
reply

 
reply

 But reading Hacker News is always interesting, so here I am. 
reply

 
reply

 
reply

 
reply

 The key is to be growimg what you know in your area. 
reply

 I don't have formal programming, and it shows. Gen AI has made it easier to build that stuff. 
reply

 
reply

 
reply

 For borderline stuff reading the comments often helps highlight the significance 
reply

 
reply

 2. ChatGPT is your friend.3. Ask. There are no dumb questions, despite the legions of idiots who say otherwise on forums like this one 3. Ask. There are no dumb questions, despite the legions of idiots who say otherwise on forums like this one 
reply

 
reply

 
reply

 
reply

 Game development even as a hobbyist is quite impressive. The question is do you enjoy it enough to make a career from it?Either way keep treking along, you’re not the only one feeling that way. Been there, done that, closed the gap and on to the next problem :) Either way keep treking along, you’re not the only one feeling that way. Been there, done that, closed the gap and on to the next problem :) 
reply

 Most people use Unity these days. I'm pretty sure it's in C#, and there was something about the licence recently that they probably backed down from. You can still write in c with OpenGL, but you will probably have to create your own game engine(?). You will need a game loop where you track the milliseconds elapsed each frame. Try not to stutter in your game loop. 16 ms. Oh, and double-buffering the output is probably a good idea.See? Don't sound so smart now, do I? See? Don't sound so smart now, do I? 
reply

 
reply

 
reply

 
reply

 Often feeling dumb/not understanding is just a product of not having the prerequisites for something. Basically all ideas and fields are accessible to people of modest intelligence with sufficient effort (and ability to pick one thing and stick with it). The ones that are not fill with charlatans. It can be boring to pay attention to technical details. There is no moral superiority in doing so.When I've taught people who thought themselves to be dumb, I found that the negative self talk about being dumb was often rooted in either a feeling of guilt/badness or obligation, and the label of dumb solved the unhealthy feeling: ""I'm just dumb, nothing I can do"". This is even more pronounced in cases where there is some resource the person needs that they don't have, where trying harder causes worse performance, or where they feel obligated to because they think like their preferred activity is less valuable/lower status.Realistically, it is necessary to pick how to spend your time, and math and programming without compensation are frankly a waste of time (if you are not enjoying it, finding fulfillment). As Satre said, we are condemned to be free - to chose what we specialize in, and what we skip, with no one to give us the correct choice.If there are N things you could do, every time you do something, there are N-1 things you are not doing in that moment, which are way more than you will ever do.I relate to the feeling. For me 'ex falso quod libet' - the idea mixing up truth and falsity once with collapse the foundation of everything I know is worse than any scary movie. The fear I'll forget faster than I learn, or that I'll never really understand. The yearning to understand the world, to know and not doubt.If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. When I've taught people who thought themselves to be dumb, I found that the negative self talk about being dumb was often rooted in either a feeling of guilt/badness or obligation, and the label of dumb solved the unhealthy feeling: ""I'm just dumb, nothing I can do"". This is even more pronounced in cases where there is some resource the person needs that they don't have, where trying harder causes worse performance, or where they feel obligated to because they think like their preferred activity is less valuable/lower status.Realistically, it is necessary to pick how to spend your time, and math and programming without compensation are frankly a waste of time (if you are not enjoying it, finding fulfillment). As Satre said, we are condemned to be free - to chose what we specialize in, and what we skip, with no one to give us the correct choice.If there are N things you could do, every time you do something, there are N-1 things you are not doing in that moment, which are way more than you will ever do.I relate to the feeling. For me 'ex falso quod libet' - the idea mixing up truth and falsity once with collapse the foundation of everything I know is worse than any scary movie. The fear I'll forget faster than I learn, or that I'll never really understand. The yearning to understand the world, to know and not doubt.If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. Realistically, it is necessary to pick how to spend your time, and math and programming without compensation are frankly a waste of time (if you are not enjoying it, finding fulfillment). As Satre said, we are condemned to be free - to chose what we specialize in, and what we skip, with no one to give us the correct choice.If there are N things you could do, every time you do something, there are N-1 things you are not doing in that moment, which are way more than you will ever do.I relate to the feeling. For me 'ex falso quod libet' - the idea mixing up truth and falsity once with collapse the foundation of everything I know is worse than any scary movie. The fear I'll forget faster than I learn, or that I'll never really understand. The yearning to understand the world, to know and not doubt.If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. If there are N things you could do, every time you do something, there are N-1 things you are not doing in that moment, which are way more than you will ever do.I relate to the feeling. For me 'ex falso quod libet' - the idea mixing up truth and falsity once with collapse the foundation of everything I know is worse than any scary movie. The fear I'll forget faster than I learn, or that I'll never really understand. The yearning to understand the world, to know and not doubt.If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. I relate to the feeling. For me 'ex falso quod libet' - the idea mixing up truth and falsity once with collapse the foundation of everything I know is worse than any scary movie. The fear I'll forget faster than I learn, or that I'll never really understand. The yearning to understand the world, to know and not doubt.If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. If you are able to see some highly technical post you don't understand and then sleep soundly, you far wiser than I. 
reply

 
reply

 

 There, it felt like I learned a lot by experimenting hands-on. That's probably what I need to do more in this situation too. In a structured fashion.The line between being a ""generalist"" and ""knowing a little about a lot, but not enough about anything to do anything"" is fine. The line between being a ""generalist"" and ""knowing a little about a lot, but not enough about anything to do anything"" is fine. 
reply

 To the OP, if you find something interesting but it's above your head dig in and you'll learn.  Otherwise just smile and nod.  I'm by no means a software engineer though I can (and do) write code to get various jobs done.  Lots of stuff here is interesting to me but lots also is of no interest and/or way above my pay grade.  I'm happy to be surrounded by stuff that has the potential to challenge me to grow. 
reply

 
reply

 Those are dumb dumbs pretending to be smart. That is much worse on many levels.Funny that many of the scientific concepts I encountered over the years that seemed to not make sense turned out to be actual nonsense and pseudoscience.It's like they had a smell but I didn't know what was causing the smell until much later.Virology is a good example of this. Total nonsense. They don't even have one sample of even one virus -- anywhere. In the world. It's a boogeyman. Funny that many of the scientific concepts I encountered over the years that seemed to not make sense turned out to be actual nonsense and pseudoscience.It's like they had a smell but I didn't know what was causing the smell until much later.Virology is a good example of this. Total nonsense. They don't even have one sample of even one virus -- anywhere. In the world. It's a boogeyman. It's like they had a smell but I didn't know what was causing the smell until much later.Virology is a good example of this. Total nonsense. They don't even have one sample of even one virus -- anywhere. In the world. It's a boogeyman. Virology is a good example of this. Total nonsense. They don't even have one sample of even one virus -- anywhere. In the world. It's a boogeyman. 
reply

"
1,,Ask HN: Was Sun Microsystems the last respectable tech company?,https://news.ycombinator.com/item?id=40633108,Comments,2024-06-10T12:57:38Z,"But I guess it depends on what you mean by ""respectable"" or ""decent"". It may be helpful to remember that a lot of people hated Sun in the 1980s and 1990s too. DEC (Digital) was a particular rival in those times. Spurred by the successes of NFS and the Sun/AT&T Unix deal, DEC created the OSF to counter Sun. Later on, there was something similar with IBM and Sun over Java. IBM eventually did license Java, but there was a lot of conflict.I think in both cases the issues were mostly about licensing and business terms. Maybe this was nothing more than corporate rivalry and competition, but it kind of felt more personal than that.At a Sun reunion a few years ago, Scott McNealy said of Sun, ""We kicked butt, had fun, and we didn't cheat."" The ""kick butt and have fun"" had been McNealy's slogan for a long time, but the ""didn't cheat"" was relatively new. I believe it to be true. I don't think Sun ever defrauded anybody. (It made mistakes, and plenty of them, but didn't defraud anybody.) In a world that has Enron and Theranos and FTX, maybe this is an outlier. But there are probably also many other companies that don't make that news that are making an honest buck and aren't cheating. I think in both cases the issues were mostly about licensing and business terms. Maybe this was nothing more than corporate rivalry and competition, but it kind of felt more personal than that.At a Sun reunion a few years ago, Scott McNealy said of Sun, ""We kicked butt, had fun, and we didn't cheat."" The ""kick butt and have fun"" had been McNealy's slogan for a long time, but the ""didn't cheat"" was relatively new. I believe it to be true. I don't think Sun ever defrauded anybody. (It made mistakes, and plenty of them, but didn't defraud anybody.) In a world that has Enron and Theranos and FTX, maybe this is an outlier. But there are probably also many other companies that don't make that news that are making an honest buck and aren't cheating. At a Sun reunion a few years ago, Scott McNealy said of Sun, ""We kicked butt, had fun, and we didn't cheat."" The ""kick butt and have fun"" had been McNealy's slogan for a long time, but the ""didn't cheat"" was relatively new. I believe it to be true. I don't think Sun ever defrauded anybody. (It made mistakes, and plenty of them, but didn't defraud anybody.) In a world that has Enron and Theranos and FTX, maybe this is an outlier. But there are probably also many other companies that don't make that news that are making an honest buck and aren't cheating. 
reply

 
reply

 
reply

 I experienced something similar to this maybe two times interacting with Redhat but I had to skip their support chain to do it and kernel developers would be curious and fix some odd bug usually NetApp related but it was not like Sun where this was a regular part of the support process.  In fairness we paid for the highest level of support Sun offered whereas we only had a handful of customers individually with Redhat support.  Still, I had never seen anything like Sun Microsystems since.  Not even close. 
reply

 
reply

 
reply

 
reply

 For another decade after that, they (through acquihire or in house development) revolutionized office suites, online mapping, aerial imagery, email, photo search, Android, web browsers... seemingly all at once.It wasn't until the last 8-10 years that they seeming stopped innovating and entered ""hang on to our profits at any cost"" mode and really increased the advertising spam everywhere. It wasn't until the last 8-10 years that they seeming stopped innovating and entered ""hang on to our profits at any cost"" mode and really increased the advertising spam everywhere. 
reply

 
reply

 
reply

 imagine a company that purchases space shuttles and lights them on fire in a field because it's more profitable than launching them.  as much as it makes sense using math it's heartbreaking to watch as an engineer 
reply

 You mean like SLS throwing all of the remaining Shuttle engines into the ocean, and then making more of them for $100 million each, and then throwing THOSE into the ocean too? 
reply

 Those monster backplane slots were full of delicate little pins that were easy to bend, but the pins themselves were actually made tough and hard to break so a fine touch could have a hope of straightening them.They made all their docs available, and kept them up for a very long time. The PDFs of the service manuals were immensely valuable. They made all their docs available, and kept them up for a very long time. The PDFs of the service manuals were immensely valuable. 
reply

 It made it clear that someone had really cared about the user it when it was designed. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Oh and did you forget about lootboxes? and their effects on children?(Note I'm taking a somewhat exaggerated position here -- I don't think Valve is a terrible company as far as companies nowadays go. But the bar in this question seems intended to be absolute, not relative.) (Note I'm taking a somewhat exaggerated position here -- I don't think Valve is a terrible company as far as companies nowadays go. But the bar in this question seems intended to be absolute, not relative.) 
reply

 GOG has been selling DRM free for a decade or so now, but I still choose Steam because their software is so much better (Galaxy is atrocious and has gotten worse recently).And I don't really care about cosmetic lootboxes, I guess? I've bought some (too many) for Path of Exile. I'm glad they are a funding model that enables free to play. I find it less obnoxious than the paid DLC model, in-game advertising, etc. As for kids, well, shouldn't parents control their spending anyway? And I don't really care about cosmetic lootboxes, I guess? I've bought some (too many) for Path of Exile. I'm glad they are a funding model that enables free to play. I find it less obnoxious than the paid DLC model, in-game advertising, etc. As for kids, well, shouldn't parents control their spending anyway? 
reply

 Unplayable because you don't have the machines to execute them (or because you didn't take care to copy your media that got damaged), not unplayable because the companies subsequently revoked your access to them. Those are... pretty darn different things. It's like saying ""my groceries spoiled"" is the same as ""the supermarket came back and seized my groceries"" just because they have the same end result.> I still choose Steam because their software is so much betterYou're of course welcome to, but your question wasn't about product quality. Great product != great company.> And I don't really care about cosmetic lootboxes, I guess?Lots of countries did. If your bar for respectable is ""I don't care about it""... that's not really a question to pose to the rest of the world.> As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. > I still choose Steam because their software is so much betterYou're of course welcome to, but your question wasn't about product quality. Great product != great company.> And I don't really care about cosmetic lootboxes, I guess?Lots of countries did. If your bar for respectable is ""I don't care about it""... that's not really a question to pose to the rest of the world.> As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. You're of course welcome to, but your question wasn't about product quality. Great product != great company.> And I don't really care about cosmetic lootboxes, I guess?Lots of countries did. If your bar for respectable is ""I don't care about it""... that's not really a question to pose to the rest of the world.> As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. > And I don't really care about cosmetic lootboxes, I guess?Lots of countries did. If your bar for respectable is ""I don't care about it""... that's not really a question to pose to the rest of the world.> As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. Lots of countries did. If your bar for respectable is ""I don't care about it""... that's not really a question to pose to the rest of the world.> As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. > As for kids, well, shouldn't parents control their spending anyway?This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. This is a much bigger conversation than we can have in this box, but suffice it to say lots of people don't buy this kind of excuse. 
reply

 What I think they are doing is pushing toward what would be good, but doing that very slowly.I wish gog worked well with the steam deck, and had all the cool steam stuff for controllers and linux support, but they aren't doing any of that. I wish gog worked well with the steam deck, and had all the cool steam stuff for controllers and linux support, but they aren't doing any of that. 
reply

 I know HN skews wanting to ""own"" games, but that's just not a big deal to most gamers. Physical media and DRM-free have always competed with Steam and GamePass and uPlay etc, but the latter are increasingly popular.Countries are free to have their values, of course, but regardless, I don't think the presence of lootboxes in a couple games overrides all the other good Valve has done for the PC gaming community.Other companies can (and do) implement loot boxes too. Fortnite's are much worse, being pay to win (in its original Save the World coop mode, not the more popular Battle Royale mode), but Epic's game store and exclusivity policies are much worse for the community. Activision, EA, Ubi, etc have similar lootboxes, often with similar DRM, but without any of the good of Steam and the customer focus of Valve.Those are industry wide problems that probably should be resolved with regulation. But that doesn't make Valve a good or bad company, IMO. Of course others can disagree.As for parents and kids, yeah, it's another discussion, but sounds like the same old thing about video games ruining kids. Whether it's Wolfenstein and violence or lootboxes or TikTok addiction or whatever, it still comes down to parental guidance. Its not an excuse, it's just a reality that kids grow up with way more technology and marketing than in the past, and that's a cultural issue way bigger than any one company (or government, for that matter). That's not on Valve. Countries are free to have their values, of course, but regardless, I don't think the presence of lootboxes in a couple games overrides all the other good Valve has done for the PC gaming community.Other companies can (and do) implement loot boxes too. Fortnite's are much worse, being pay to win (in its original Save the World coop mode, not the more popular Battle Royale mode), but Epic's game store and exclusivity policies are much worse for the community. Activision, EA, Ubi, etc have similar lootboxes, often with similar DRM, but without any of the good of Steam and the customer focus of Valve.Those are industry wide problems that probably should be resolved with regulation. But that doesn't make Valve a good or bad company, IMO. Of course others can disagree.As for parents and kids, yeah, it's another discussion, but sounds like the same old thing about video games ruining kids. Whether it's Wolfenstein and violence or lootboxes or TikTok addiction or whatever, it still comes down to parental guidance. Its not an excuse, it's just a reality that kids grow up with way more technology and marketing than in the past, and that's a cultural issue way bigger than any one company (or government, for that matter). That's not on Valve. Other companies can (and do) implement loot boxes too. Fortnite's are much worse, being pay to win (in its original Save the World coop mode, not the more popular Battle Royale mode), but Epic's game store and exclusivity policies are much worse for the community. Activision, EA, Ubi, etc have similar lootboxes, often with similar DRM, but without any of the good of Steam and the customer focus of Valve.Those are industry wide problems that probably should be resolved with regulation. But that doesn't make Valve a good or bad company, IMO. Of course others can disagree.As for parents and kids, yeah, it's another discussion, but sounds like the same old thing about video games ruining kids. Whether it's Wolfenstein and violence or lootboxes or TikTok addiction or whatever, it still comes down to parental guidance. Its not an excuse, it's just a reality that kids grow up with way more technology and marketing than in the past, and that's a cultural issue way bigger than any one company (or government, for that matter). That's not on Valve. Those are industry wide problems that probably should be resolved with regulation. But that doesn't make Valve a good or bad company, IMO. Of course others can disagree.As for parents and kids, yeah, it's another discussion, but sounds like the same old thing about video games ruining kids. Whether it's Wolfenstein and violence or lootboxes or TikTok addiction or whatever, it still comes down to parental guidance. Its not an excuse, it's just a reality that kids grow up with way more technology and marketing than in the past, and that's a cultural issue way bigger than any one company (or government, for that matter). That's not on Valve. As for parents and kids, yeah, it's another discussion, but sounds like the same old thing about video games ruining kids. Whether it's Wolfenstein and violence or lootboxes or TikTok addiction or whatever, it still comes down to parental guidance. Its not an excuse, it's just a reality that kids grow up with way more technology and marketing than in the past, and that's a cultural issue way bigger than any one company (or government, for that matter). That's not on Valve. 
reply

 > I don't think using DRM makes a company evilI don't either, but this is neither pure DRM, nor was ""evil"" the bar to begin with. There's a lot of room in the middle for both. DRM technologies have existed that didn't prevent you from owning or transferring your own copy.> I know HN skews wanting to ""own"" games, but that's just not a big deal to most gamers.HN also ""skews"" toward caring about privacy, but billions of people use (say) Google and Microsoft etc. without minding what they do. If your bar is ""it's not a big deal to most users"" then wouldn't tons of companies easily pass it easily, especially the giants? They didn't become giants by being boycotted... I don't either, but this is neither pure DRM, nor was ""evil"" the bar to begin with. There's a lot of room in the middle for both. DRM technologies have existed that didn't prevent you from owning or transferring your own copy.> I know HN skews wanting to ""own"" games, but that's just not a big deal to most gamers.HN also ""skews"" toward caring about privacy, but billions of people use (say) Google and Microsoft etc. without minding what they do. If your bar is ""it's not a big deal to most users"" then wouldn't tons of companies easily pass it easily, especially the giants? They didn't become giants by being boycotted... > I know HN skews wanting to ""own"" games, but that's just not a big deal to most gamers.HN also ""skews"" toward caring about privacy, but billions of people use (say) Google and Microsoft etc. without minding what they do. If your bar is ""it's not a big deal to most users"" then wouldn't tons of companies easily pass it easily, especially the giants? They didn't become giants by being boycotted... HN also ""skews"" toward caring about privacy, but billions of people use (say) Google and Microsoft etc. without minding what they do. If your bar is ""it's not a big deal to most users"" then wouldn't tons of companies easily pass it easily, especially the giants? They didn't become giants by being boycotted... 
reply

 But I think that's kinda the overall discussion, isn't it? There are different facets to every company and people have different values. What bothers one person might not bother another.I remember Sun, in its heyday, as being disliked as well because its workstations were so expensive and Java was terrible in its browser applet days (in the same way Microsoft would come to be disliked for ActiveX).I tremendously respect Valve and am grateful that they've stayed privately owned and able to maintain their culture. At the same time, others may find fault in the way they do business. I don't expect all of us to agree on who the respectable companies are. I remember Sun, in its heyday, as being disliked as well because its workstations were so expensive and Java was terrible in its browser applet days (in the same way Microsoft would come to be disliked for ActiveX).I tremendously respect Valve and am grateful that they've stayed privately owned and able to maintain their culture. At the same time, others may find fault in the way they do business. I don't expect all of us to agree on who the respectable companies are. I tremendously respect Valve and am grateful that they've stayed privately owned and able to maintain their culture. At the same time, others may find fault in the way they do business. I don't expect all of us to agree on who the respectable companies are. 
reply

 
reply

 Example: Team Fortress 2, the official servers for the game have been overrun by bots that aimbot, votekick, say slurs, spam illegal content, what are they doing about it? Nothing. https://save.tfExample 2: CSGO/CS2, also full of cheaters and illegal gambling sites Example 2: CSGO/CS2, also full of cheaters and illegal gambling sites 
reply

 
reply

 
reply

 
reply

 
reply

 What difference does that make when the magnitude for one game was on the order of a billion cases? 
reply

 Counterstrike doesn't define Valve. They do so much more than that, especially for those of us who don't even play CS. The lootboxes were something they added much later. It was originally just a Half-Life mod. 
reply

 https://insider-gaming.com/valve-cs-cases-earnings/And you have a skin that has sold for over $1 million now.https://www.ign.com/articles/counter-strike-skin-sells-for-o... And you have a skin that has sold for over $1 million now.https://www.ign.com/articles/counter-strike-skin-sells-for-o... https://www.ign.com/articles/counter-strike-skin-sells-for-o... 
reply

 
reply

 
reply

 but the one mark against them is that by pushing Steam, they normalized DRM in the video game space and killed physical media on PCs. 
reply

 
reply

 
reply

 
reply

 I'd say that 1990s, 2000s google was pretty cool, but it turned evil quite quickly. 
reply

 And a lot of Java stuff was sold to us for a very nominal sum (probably just the cost of production). 
reply

 With the caveat that you had to buy Solaris. 
reply

 
reply

 Since Schmidt was the CTO of Sun Google inherited some of its culture. But that faded away. 
reply

 ? The big one I know about was OpenSolaris under CDDL; what non-OSS licenses did they use? 
reply

 
reply

 
reply

 
reply

 Sun's stuff was more beige-boxy (with a few lilac accents), but the hardware was damned solid.Linux probably had more to do with them dying off than anything else. Once you could run a nix on commodity Intel boxes, the race was over. Linux probably had more to do with them dying off than anything else. Once you could run a nix on commodity Intel boxes, the race was over. 
reply

 Stripe for a good while was (at least at some point) very highly perceived, I think?And just 9 days ago I saw people praising Logitech. [1] No idea what the broader sentiment is currently (no news is good news, maybe?), but it seemed to me people loved it for a long time at least in the past?Mozilla for a long time seemed pretty respectable, regardless of how people feel about them now.There are lots of small tech companies out there that simply have respectable businesses but that you don't know or immediately think of because you just don't use them.[1] https://news.ycombinator.com/item?id=40539689 And just 9 days ago I saw people praising Logitech. [1] No idea what the broader sentiment is currently (no news is good news, maybe?), but it seemed to me people loved it for a long time at least in the past?Mozilla for a long time seemed pretty respectable, regardless of how people feel about them now.There are lots of small tech companies out there that simply have respectable businesses but that you don't know or immediately think of because you just don't use them.[1] https://news.ycombinator.com/item?id=40539689 Mozilla for a long time seemed pretty respectable, regardless of how people feel about them now.There are lots of small tech companies out there that simply have respectable businesses but that you don't know or immediately think of because you just don't use them.[1] https://news.ycombinator.com/item?id=40539689 There are lots of small tech companies out there that simply have respectable businesses but that you don't know or immediately think of because you just don't use them.[1] https://news.ycombinator.com/item?id=40539689 [1] https://news.ycombinator.com/item?id=40539689 
reply

 Good tech companies are those that focus on their products or services, but almost inevitably they get taken over by 'business' people; private equity, MBAs, CFOs, etc, and then milked to death. 
reply

 People are butthurt prices are creeping up in the post-Moores law price era, but that’s just kind of the economics of the product. Gpus are the most sensitive to silicon pricing, being the biggest piece of silicon consumers use on a daily basis and all. They’ve always been intimately tied to Moores law (which is in fact jensen’s original insight about the niche that led to the company in the first place).A 4070 at $500 is actually less than an inflation-adjusted GTX 670 after all, $600 is barely an increase. If that’s your reason for hating probably the most innovative silicon company on the planet, well…It’s also a situation like valve where they probably aren’t the most innovative they could possibly be under a more competitive market… but their competition is so bad they can’t help constantly shooting themselves in the head constantly. Like apple/metal is probably the only real serious alternative at this point. A 4070 at $500 is actually less than an inflation-adjusted GTX 670 after all, $600 is barely an increase. If that’s your reason for hating probably the most innovative silicon company on the planet, well…It’s also a situation like valve where they probably aren’t the most innovative they could possibly be under a more competitive market… but their competition is so bad they can’t help constantly shooting themselves in the head constantly. Like apple/metal is probably the only real serious alternative at this point. It’s also a situation like valve where they probably aren’t the most innovative they could possibly be under a more competitive market… but their competition is so bad they can’t help constantly shooting themselves in the head constantly. Like apple/metal is probably the only real serious alternative at this point. 
reply

 
reply

 
reply

 Instead of building just the tools, these companies now have the means to pry into our data too, so that is what they do. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
2,,Ask HN: How to revoke AI consent from Meta/IG?,https://news.ycombinator.com/item?id=40609838,Comments,2024-06-07T15:54:32Z,"If you managed to do it, can you please tell me how. I want to spread the message. https://www.facebook.com/help/contact/6359191084165019https://help.instagram.com/contact/233964459562201As for what to put inside the objection form, you can say something like:> I do not consent to the use of my data for AI training, improvement, or personalized services.and in the additional information box, you can put something like:> If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. https://help.instagram.com/contact/233964459562201As for what to put inside the objection form, you can say something like:> I do not consent to the use of my data for AI training, improvement, or personalized services.and in the additional information box, you can put something like:> If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. As for what to put inside the objection form, you can say something like:> I do not consent to the use of my data for AI training, improvement, or personalized services.and in the additional information box, you can put something like:> If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. > I do not consent to the use of my data for AI training, improvement, or personalized services.and in the additional information box, you can put something like:> If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. and in the additional information box, you can put something like:> If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. > If my objection is not honored, I will cease using all Meta products indefinitely.There should be absolutely no reason for Meta not to honor your request. There should be absolutely no reason for Meta not to honor your request. 
reply

 There should be absolutely no reason for Meta to not have ""Accept"" and ""Reject"" buttons right there instead of a mere ""Close"" button in this UI and then jumping through hoops to post forms: https://postimg.cc/R3m6bSMk 
reply

 
reply

 Also note that ""Privacy Policy"" has caps making it stand out a bit more, but not ""right to object"".This is also a modal so the moment you open the app is probably a moment where one wants to do something else so is very prompt to dismiss without reading, and then it vanishes forever. This is also a modal so the moment you open the app is probably a moment where one wants to do something else so is very prompt to dismiss without reading, and then it vanishes forever. 
reply

 
reply

 I don't think any of this matters in the end FWIW, starting to sound eerily similar to the chain posts my uncle shares on FB telling them they don't have permission to use his photos.... 
reply

 The situation is very different in Europe, for example, where they very much do need consent or one of a few other legal grounds that probably don’t apply to most of their AI training purposes. 
reply

 I don’t think that’s an efficient threat. Too easy to make and they know almost no one will follow through. Either don’t say anything or check your local laws. In the EU you can mention the GDPR, the Data Protection Authority in your country, and “remind them” the law has a thirty-day grace period to comply. Show your research and a willingness to follow through with something which has a change of affecting them. 
reply

 - give consent for 3rd party tracking- pay €10Regarding their language, yeah, this is just a scare tactic. Remember how 95% of Facebook users on iOS opted out from tracking after the iOS 14.5 update? - pay €10Regarding their language, yeah, this is just a scare tactic. Remember how 95% of Facebook users on iOS opted out from tracking after the iOS 14.5 update? Regarding their language, yeah, this is just a scare tactic. Remember how 95% of Facebook users on iOS opted out from tracking after the iOS 14.5 update? 
reply

 https://noyb.eu/en/noyb-urges-11-dpas-immediately-stop-metas... 
reply

 The only way to be sure is to not use their products. 
reply

 https://www.edpb.europa.eu/news/news/2023/12-billion-euro-fi...All the big tech companies break some law, but Meta is indeed unique in that it happily breaks privacy and data laws and then pays the fine, despite being ordered not to do it again. All the big tech companies break some law, but Meta is indeed unique in that it happily breaks privacy and data laws and then pays the fine, despite being ordered not to do it again. 
reply

 
reply

 In other words: I just need a month+ to finish setting up my pixelfed instance after my day job, clear my IG accounts and put a version of this image there instead: https://x.com/rafalpast/status/1778797698302234905. 
reply

 
reply

 
reply

 

 Edit: I don't use IG to browse (it’s cringe), just to upload my drawings (always a bit later than on open web).Some of the people who follow me don’t know how to use rss or ActivityPub. Moving people away from these services takes time. Most of my friends are patient enough to, say, have installed signal instead of WhatsApp because I refuse to use it, but again - it’s hard to do this overnight. Some of the people who follow me don’t know how to use rss or ActivityPub. Moving people away from these services takes time. Most of my friends are patient enough to, say, have installed signal instead of WhatsApp because I refuse to use it, but again - it’s hard to do this overnight. 
reply

 
reply

 I don't use IG to browse (it’s cringe), just to upload my drawings (always a bit later than on open web). 
reply

 
reply

 
reply

"
3,,Ask HN: Are you still using your Vision Pro?,https://news.ycombinator.com/item?id=40660270,Comments,2024-06-12T16:54:21Z,"* The sizing options are really confusing, and my measured fit (as determined by the app over a dozen runs) felt somewhat loose. Apple Store staff could not tell me what the numbers meant and could only size me through the app.* There's not a lot of VR content available right now — just a few short (admittedly impressive) clips.* I feel isolated when watching media, and it's also much harder to snack and get cozy.* Gesture controls are (intrinsically) imprecise and frequently fire incorrectly — a serious regression from physical buttons or even touch input. Also, selection via gaze does not feel natural to me. I am itching for a physical Quest-like controller for selection and input.* A Quest-like controller is also essential for gaming. You really can't do much with gesture controls, and a gamepad does not allow you to interact directly with the virtual world. In fact, most apps that I'd be interested in (painting, sculpting, etc.) would really benefit from physical controls. Drawing with gesture controls feels pretty bad.* On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * There's not a lot of VR content available right now — just a few short (admittedly impressive) clips.* I feel isolated when watching media, and it's also much harder to snack and get cozy.* Gesture controls are (intrinsically) imprecise and frequently fire incorrectly — a serious regression from physical buttons or even touch input. Also, selection via gaze does not feel natural to me. I am itching for a physical Quest-like controller for selection and input.* A Quest-like controller is also essential for gaming. You really can't do much with gesture controls, and a gamepad does not allow you to interact directly with the virtual world. In fact, most apps that I'd be interested in (painting, sculpting, etc.) would really benefit from physical controls. Drawing with gesture controls feels pretty bad.* On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * I feel isolated when watching media, and it's also much harder to snack and get cozy.* Gesture controls are (intrinsically) imprecise and frequently fire incorrectly — a serious regression from physical buttons or even touch input. Also, selection via gaze does not feel natural to me. I am itching for a physical Quest-like controller for selection and input.* A Quest-like controller is also essential for gaming. You really can't do much with gesture controls, and a gamepad does not allow you to interact directly with the virtual world. In fact, most apps that I'd be interested in (painting, sculpting, etc.) would really benefit from physical controls. Drawing with gesture controls feels pretty bad.* On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * Gesture controls are (intrinsically) imprecise and frequently fire incorrectly — a serious regression from physical buttons or even touch input. Also, selection via gaze does not feel natural to me. I am itching for a physical Quest-like controller for selection and input.* A Quest-like controller is also essential for gaming. You really can't do much with gesture controls, and a gamepad does not allow you to interact directly with the virtual world. In fact, most apps that I'd be interested in (painting, sculpting, etc.) would really benefit from physical controls. Drawing with gesture controls feels pretty bad.* On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * A Quest-like controller is also essential for gaming. You really can't do much with gesture controls, and a gamepad does not allow you to interact directly with the virtual world. In fact, most apps that I'd be interested in (painting, sculpting, etc.) would really benefit from physical controls. Drawing with gesture controls feels pretty bad.* On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * On that note, no Beat Saber, which is my killer app. And even if it did exist, I'm not sure I'd feel comfortable getting sweaty in a $4000 device.* Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * Mac display mirroring has latency, looks a bit grainy, and does not support 120Hz. Categorically worse than my existing physical displays.* I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * I want to use my third party mechanical keyboard, mouse, and headphones, but only Bluetooth accessories are really supported.* It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * It's not very portable. I'm not sure how I'd be able to take this anywhere in my carryon. (I don't usually check luggage.)* I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * I get a headache after a fairly short time of using the device. It's also stuffy.* I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. * I can't build or run anything without approval by the Apple police. This does not feel like a general purpose computer and is unlikely to be the ""future"" of anything until the platform opens up, or is made to open up.Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. Oh well. Maybe I'll try again in a few years. In the meantime, I'll keep gaming on my Quest. 
reply

 it’s wild that they advertise and promote it as something totally open where you can build and run anything you want 
reply

 
reply

 It’s hard to believe the guy I was replying to even bought a Vision Pro in the first place if he’s the kind of guy to say “Apple Police.” 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Consuming content is great of course but the AVP has changed my content creation: I take way more panoramas and now spatial photos (Spatialify on iOS works well). I also bought an Insta X4 360 camera which, while a far cry from Apple's immersive content in resolution, can still be a really nice way to relive memories.More content: Last year I started 3d scanning (using Scaniverse) sculptures and other art / items that catch my eye during my travels. The AVP makes it really easy to import and place them in my environment. When I'm working I'll often place a favorite sculpture next to me for company & as a reminder of a trip I took.Finally, even after 4 months of use, it's still really fun and, from a tech perspective, astounding in terms of image quality, stability, 3D placement, integration in environment, etc. I love it and I can't wait for this tech to get better and better. More content: Last year I started 3d scanning (using Scaniverse) sculptures and other art / items that catch my eye during my travels. The AVP makes it really easy to import and place them in my environment. When I'm working I'll often place a favorite sculpture next to me for company & as a reminder of a trip I took.Finally, even after 4 months of use, it's still really fun and, from a tech perspective, astounding in terms of image quality, stability, 3D placement, integration in environment, etc. I love it and I can't wait for this tech to get better and better. Finally, even after 4 months of use, it's still really fun and, from a tech perspective, astounding in terms of image quality, stability, 3D placement, integration in environment, etc. I love it and I can't wait for this tech to get better and better. 
reply

 Much of the rest is about creating nostalgia and reliving a past trip through these.Is there a paradox, or contradiction, in these themes? Is there a paradox, or contradiction, in these themes? 
reply

 I expected good productivity, and I expected to enjoy consuming content in the AVP.The changes in how I capture memories I didn't expect but make sense to me retrospectively. For example, the first time you experience one of your panoramas in the AVP is the time your jaw drops and you tell yourself you really need to take more of these! :-) The changes in how I capture memories I didn't expect but make sense to me retrospectively. For example, the first time you experience one of your panoramas in the AVP is the time your jaw drops and you tell yourself you really need to take more of these! :-) 
reply

 
reply

 I'll often have charts, etc. on a massive Safari ""window"" next to the virtual Mac screen, which is useful too.Plus, side benefit for me who doesn't always have great posture, it helps me avoid being hunched over my laptop, I can place the screen nice and high in front of me. Plus, side benefit for me who doesn't always have great posture, it helps me avoid being hunched over my laptop, I can place the screen nice and high in front of me. 
reply

 
reply

 
reply

 
reply

 Do you get any sense of the Glasshole Factor, in public, with this device? (that is : a general feeling of distrust from people who observe you operating in public with a high tech recording device). 
reply

 In fact, few people know about or do this and when I show them they're often quite excited and ask how they can do it too. Always fun to share.In general, I'm only using the AVP seated and not interacting with strangers (other than the odd flight attendant asking me what I want to drink :-)I've had people ask me about the AVP, wonder what I'm doing in there, or (rarely) take pics of me. Doesn't bother me. I'd be curious too. In general, I'm only using the AVP seated and not interacting with strangers (other than the odd flight attendant asking me what I want to drink :-)I've had people ask me about the AVP, wonder what I'm doing in there, or (rarely) take pics of me. Doesn't bother me. I'd be curious too. I've had people ask me about the AVP, wonder what I'm doing in there, or (rarely) take pics of me. Doesn't bother me. I'd be curious too. 
reply

 
reply

 (I do programming, trading, consulting).EDIT: Thought of one more thing... Immersive environments also help. Blocking out what's around me and escaping to, say, the top of a volcano or Mount Hood or Yosemite, increases my focus, esp. for deep work EDIT: Thought of one more thing... Immersive environments also help. Blocking out what's around me and escaping to, say, the top of a volcano or Mount Hood or Yosemite, increases my focus, esp. for deep work 
reply

 
reply

 I have one for work purposes but also as a time capsule for the small humans in my care. 
reply

 With the selfie stick, you can get nice angles, e.g. extending over castle battlements, which are fun to view in VR (as long as you don't have vertigo :-)I'm also shoot 360 videos. A few precious ones I keep as 360 vids on the AVP, the rest get uploaded as unlisted vids on YT in 360 mode.Some of my favorite vids are short clips filmed around a dinner table with the X4 in the middle. Really nice way to relive those moments and see the people you love all around you. Extra fun when everyone clinks their glasses together in a toast around the camera! I'm also shoot 360 videos. A few precious ones I keep as 360 vids on the AVP, the rest get uploaded as unlisted vids on YT in 360 mode.Some of my favorite vids are short clips filmed around a dinner table with the X4 in the middle. Really nice way to relive those moments and see the people you love all around you. Extra fun when everyone clinks their glasses together in a toast around the camera! Some of my favorite vids are short clips filmed around a dinner table with the X4 in the middle. Really nice way to relive those moments and see the people you love all around you. Extra fun when everyone clinks their glasses together in a toast around the camera! 
reply

 
reply

 BTW, it's not just sculptures. I've scanned rooms (mixed results), relief paintings, loved ones (mixed results but if my children weren't already grown I'd be scanning them at least once a year), and even food.Food can be quite fun. I showed a restaurateur a scan of one of his appetizers (served on a round stone so it made for good scanning). I used the AR view to project it onto our table and joked ""Now I can enjoy one whenever I feel like!"" He was so excited that he downloaded Scaniverse on the spot and I showed him how to use it. After that, he took us under his wing and recommended all the dishes he was proudest of. (We still had to pay for them though ;-)In general, regardless of what AR/VR device you have or plan to get, if you see one in your future, it's good to build a collection of 3D / immersive content. Food can be quite fun. I showed a restaurateur a scan of one of his appetizers (served on a round stone so it made for good scanning). I used the AR view to project it onto our table and joked ""Now I can enjoy one whenever I feel like!"" He was so excited that he downloaded Scaniverse on the spot and I showed him how to use it. After that, he took us under his wing and recommended all the dishes he was proudest of. (We still had to pay for them though ;-)In general, regardless of what AR/VR device you have or plan to get, if you see one in your future, it's good to build a collection of 3D / immersive content. In general, regardless of what AR/VR device you have or plan to get, if you see one in your future, it's good to build a collection of 3D / immersive content. 
reply

 Edit: there was something really cool actually, that I think doesn’t get talked about enough. Pooping on Yosemite. Peak futurism. 
reply

 
reply

 Is the frame rate really the limiting factor here, or something algorithmic in the tracking (like smoothing out noise)? 
reply

 As a general statement, no, vision isn’t as time-sensitive as hearing, so the timing requirements aren’t as precise. But when it comes to head and hand tracking, the brain’s also doing predictive sensor fusion, and even “unnoticeably” small delays can be disorienting or nauseating. (Ocular fixation is the most sensitive, but hand-eye coordination is also pretty important to the brain!)The important number in VR is “motion-to-photon” latency. 
Over 20ms starts to be noticeable to most people; 50ms starts to make most people uncomfortable. That’s the total budget for sensor fusion, simulation, rendering, and display, and that’s just for the bare-minimum experience that doesn’t make people immediately ill.You can do a lot with prediction and late updates in screen space, which is what makes VR possible at all on current hardware— but it’s hard to make up for having sensor data delayed by possibly 150% of the total time budget :) The important number in VR is “motion-to-photon” latency. 
Over 20ms starts to be noticeable to most people; 50ms starts to make most people uncomfortable. That’s the total budget for sensor fusion, simulation, rendering, and display, and that’s just for the bare-minimum experience that doesn’t make people immediately ill.You can do a lot with prediction and late updates in screen space, which is what makes VR possible at all on current hardware— but it’s hard to make up for having sensor data delayed by possibly 150% of the total time budget :) You can do a lot with prediction and late updates in screen space, which is what makes VR possible at all on current hardware— but it’s hard to make up for having sensor data delayed by possibly 150% of the total time budget :) 
reply

 
reply

 Honestly that seems like the primary use case whenever the topic is mentioned. I'm sure there are cool innovative uses for them, but porn is always going to be at the forefront. 
reply

 
reply

 Thanks, ""crankin' my hog"" was not in the Apple supplied Oxford Dictionary of English, but this confirms my guess... 
reply

 
reply

 
reply

 
reply

 Passing app review doesnt matter, there are a number of subscription websites (sexlikereal, wankz, czechvr etc) which offer UHD uncompressed 8K MP4 videos for download. It is entirely possible (and quite easy) to download these UHD videos to a Mac, mount the folder containing the goon material on the Mac as a drive on the Vision Pro (local network drive), and stream the video to the AVP using a 3rd party 3d video player; Moonplayer is the pick of the bunch at the moment.I must say the experience is pretty damn good. I can see people getting addicted to it an unhealthy way. The sites mentioned above are only producing 8K at the moment, I think the AVP can handle more pixels, and there are new cameras coming on to the market (https://x.com/Blackmagic_News/status/1800273164867658228) which will really crank things up a notch.There is a tremedous market oppurtunity available here, its niche at the moment, but once you experience good quality VR porn its hard to go back to the flat stuff.I should probably get a GF.... sigh. I must say the experience is pretty damn good. I can see people getting addicted to it an unhealthy way. The sites mentioned above are only producing 8K at the moment, I think the AVP can handle more pixels, and there are new cameras coming on to the market (https://x.com/Blackmagic_News/status/1800273164867658228) which will really crank things up a notch.There is a tremedous market oppurtunity available here, its niche at the moment, but once you experience good quality VR porn its hard to go back to the flat stuff.I should probably get a GF.... sigh. There is a tremedous market oppurtunity available here, its niche at the moment, but once you experience good quality VR porn its hard to go back to the flat stuff.I should probably get a GF.... sigh. I should probably get a GF.... sigh. 
reply

 
reply

 FYI there's nothing inherently wrong about porn or sex work! It's great! A lot of people like it, you should try it sometime! 
reply

 
reply

 No, I am not offended that anyone has preferences or opinions. What I am responding to is this language:> Neither a Vision Pro owner nor much of a hog cranker> native applications designed to aid manipulating oneself> dead-eyed men and women rutting on camera...which is intended to indicate disdain towards people who produce or consume pornographic material. I think that this person is going out of their way to be an unkind contrarian regarding porn, and in my opinion that deserves a little light ridicule! > Neither a Vision Pro owner nor much of a hog cranker> native applications designed to aid manipulating oneself> dead-eyed men and women rutting on camera...which is intended to indicate disdain towards people who produce or consume pornographic material. I think that this person is going out of their way to be an unkind contrarian regarding porn, and in my opinion that deserves a little light ridicule! > native applications designed to aid manipulating oneself> dead-eyed men and women rutting on camera...which is intended to indicate disdain towards people who produce or consume pornographic material. I think that this person is going out of their way to be an unkind contrarian regarding porn, and in my opinion that deserves a little light ridicule! > dead-eyed men and women rutting on camera...which is intended to indicate disdain towards people who produce or consume pornographic material. I think that this person is going out of their way to be an unkind contrarian regarding porn, and in my opinion that deserves a little light ridicule! ...which is intended to indicate disdain towards people who produce or consume pornographic material. I think that this person is going out of their way to be an unkind contrarian regarding porn, and in my opinion that deserves a little light ridicule! 
reply

 The only intention was to rejoin OP's ""hog cranking"" euphemism with some fun ones from the English lexicon. (That it appears to have caused you to make a spectacle of yourself for no reason whatsoever is a bit of a bonus, though.) 
reply

 

 
reply

 I don't disagree, but I think interactive sex apps (with virtual partner or teledildonics) would be a much better experience that video playback (vr or not). Higher image  quality, interactivity, and Im sure some sex-toy manufacturer(s) has a bluetooth/wifi API already for additional ""immersion"". There's a market for a much hornier Replika, if Apple would allow it. As for ethical & security implications of such an app, I'll leave as an exercise to the reader. 
reply

 
reply

 https://apps.apple.com/app/id1134925341It’s available for iPhone in Japan only. I don’t think they have added Vision Pro support though.The app is also on the much cheaper Meta Quest, also limited to Japan. It’s available for iPhone in Japan only. I don’t think they have added Vision Pro support though.The app is also on the much cheaper Meta Quest, also limited to Japan. The app is also on the much cheaper Meta Quest, also limited to Japan. 
reply

 
reply

 
reply

 
reply

 Its also my preferred place to consume cinema. I have a short throw projector and sound system. I prefer the AVP. The image is so crisp and the 3D is so good, that its better than a decent home movie theater.Its my preferred place to watch F1.Environments genuinely soothe me.Breathe works on this platform, it annoys me on the watch.I would watch every sport and documentary in spatial if the was a thing. The tastes have me excited for the future. Its my preferred place to watch F1.Environments genuinely soothe me.Breathe works on this platform, it annoys me on the watch.I would watch every sport and documentary in spatial if the was a thing. The tastes have me excited for the future. Environments genuinely soothe me.Breathe works on this platform, it annoys me on the watch.I would watch every sport and documentary in spatial if the was a thing. The tastes have me excited for the future. Breathe works on this platform, it annoys me on the watch.I would watch every sport and documentary in spatial if the was a thing. The tastes have me excited for the future. I would watch every sport and documentary in spatial if the was a thing. The tastes have me excited for the future. 
reply

 
reply

 Also very interested 
reply

 Hell if you had a feed for car positions one could make a virtual model of the track and watch it top down. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 How do you interact with it, ooi? Hand-tracking, voice, ... ? (Can't really touch the headset or controller with wet and/or busy hands).>  I really wish there was an easy way to put the older 3d blu-ray movies on the device to watch movies,Oh there is, it just involves the high seas route. Also most movie-players on these devices suck a bit, i.e. they are either ""too immersive"" and make it difficult to use pass-through, or too useless like the builtin one. >  I really wish there was an easy way to put the older 3d blu-ray movies on the device to watch movies,Oh there is, it just involves the high seas route. Also most movie-players on these devices suck a bit, i.e. they are either ""too immersive"" and make it difficult to use pass-through, or too useless like the builtin one. Oh there is, it just involves the high seas route. Also most movie-players on these devices suck a bit, i.e. they are either ""too immersive"" and make it difficult to use pass-through, or too useless like the builtin one. 
reply

 
reply

 There are actually some tools that exist to convert blu-rays to SBS 3D if you’re looking to go legit. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I also use it as my hotel setup when I travel for work. It’s great having a full size monitor wherever I need. I’m excited for the coming improvements with vision os 2.0.I’m still not comfortable using it in public, though. It feels ostentatious, but I will try it the next time I fly with the family. Having people I trust around me will make me more willing to go immersive while traveling. I’m still not comfortable using it in public, though. It feels ostentatious, but I will try it the next time I fly with the family. Having people I trust around me will make me more willing to go immersive while traveling. 
reply

 Movies you're watching for the plot, no doubt. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I spend approximately 60-70% of my time working with the headset on, connected to my MacBook. It’s actually better for me than my physical display because of the Zeiss inserts - I usually don’t wear glasses, so due to inserts, the desktop is subjectively crisper than the monitor :) I really can’t wait for visionOS 2 improvements in the virtual display feature.Most of the media content I consume alone, and Vision Pro is perfect for that, especially watching something before sleep - the headset does not light up the entire room (unlike a phone/tablet screen) and thus does not mess up my wife’s sleep.One thing I surprisingly don’t use it for are “immersive” videos and other experiences like VR or MR games. I’m not quite sure why - I always plan to try something out, but never do it actually. Most of the media content I consume alone, and Vision Pro is perfect for that, especially watching something before sleep - the headset does not light up the entire room (unlike a phone/tablet screen) and thus does not mess up my wife’s sleep.One thing I surprisingly don’t use it for are “immersive” videos and other experiences like VR or MR games. I’m not quite sure why - I always plan to try something out, but never do it actually. One thing I surprisingly don’t use it for are “immersive” videos and other experiences like VR or MR games. I’m not quite sure why - I always plan to try something out, but never do it actually. 
reply

 Isn't there this front display for the pass-through eyes? That switches off automatically if there is no interaction, or it's just not very bright? 
reply

 
reply

 
reply

 
reply

 It also still hasn't found the ""killer apps"" just yet, but it's clear Apple is still heavily invested into this considering there's nearly 30 sessions on VisionOS at WWDC this week. 
reply

 
reply

 
reply

 
reply

 
reply

 I also have this one, https://infinityone3d.com/en/collections/apple which I didnt like as much, but people on /r/visionpro rate it equally with the one above, so its largely a personal thing do with the fit accounting for the dimensions of your head.Either way, both are a massive step up from the stock experience IMO. Either way, both are a massive step up from the stock experience IMO. 
reply

 Some of the games were really fun, most notably Walkabout Minigolf and Super Hot VR.Some of the exercise programs were pretty neat, most notably The Thrill of the Fight and Les Mills Body combat.It did not work well as a replacement for either a TV or a computer monitor. The device was just too bulky and inconvenient and the software too clunky. So much easier to just use a laptop, if I want to work / watch on the go.In the end, none of the experiences were compelling enough to keep using it regularly. Some of the exercise programs were pretty neat, most notably The Thrill of the Fight and Les Mills Body combat.It did not work well as a replacement for either a TV or a computer monitor. The device was just too bulky and inconvenient and the software too clunky. So much easier to just use a laptop, if I want to work / watch on the go.In the end, none of the experiences were compelling enough to keep using it regularly. It did not work well as a replacement for either a TV or a computer monitor. The device was just too bulky and inconvenient and the software too clunky. So much easier to just use a laptop, if I want to work / watch on the go.In the end, none of the experiences were compelling enough to keep using it regularly. In the end, none of the experiences were compelling enough to keep using it regularly. 
reply

 I can't imagine using an AVP though, without controllers it really isn't suited to fitness. 
reply

 It was really such a good game that I'm surprised we haven't seen more stuff like it. Of all the futuristic VR experiences I've tried (even HL: Alyx) Beat Saber was the only one that really felt effortlessly futuristic. 
reply

 It was neat to play an FPS where ducking for cover worked, reloading involved actually having to pull a magazine from your belt and jam it in, you could duck behind something and blind fire over it.It mostly worked very well.  The annoyances were around how physically exhausting constantly ducking and weaving was (and sweating into the foam), and getting lost in the moment and nearly sprinting out of the ""safety box"" into a coffee table. It mostly worked very well.  The annoyances were around how physically exhausting constantly ducking and weaving was (and sweating into the foam), and getting lost in the moment and nearly sprinting out of the ""safety box"" into a coffee table. 
reply

 BeatSaber is pretty stationary, so is FitXR. I've never tried a moving around the room/box VR experience (like Thrill of the fight). 
reply

 Funny, I'm the opposite.I was excited to try it because it seems so much more hygienic -- you can wipe it down and the foam won't degrade. But I quickly discovered that it got all clammy and sticky on my skin, and then humidity would build up and fog up the lenses. What! Kind of the same way swim goggles fog up.Whereas the regular foam padding is... perfectly fine. No sweating, no fog, no humidity, nothing, because enough air seems to pass through and nothing is suffocating your skin.And I'm not even a sweaty person or anything, not at all. And I'm just reclining watching movies, it's not even for movement. But the silicone layer over the foam just creates this airtight (enough) seal which is just bad all around. I was excited to try it because it seems so much more hygienic -- you can wipe it down and the foam won't degrade. But I quickly discovered that it got all clammy and sticky on my skin, and then humidity would build up and fog up the lenses. What! Kind of the same way swim goggles fog up.Whereas the regular foam padding is... perfectly fine. No sweating, no fog, no humidity, nothing, because enough air seems to pass through and nothing is suffocating your skin.And I'm not even a sweaty person or anything, not at all. And I'm just reclining watching movies, it's not even for movement. But the silicone layer over the foam just creates this airtight (enough) seal which is just bad all around. Whereas the regular foam padding is... perfectly fine. No sweating, no fog, no humidity, nothing, because enough air seems to pass through and nothing is suffocating your skin.And I'm not even a sweaty person or anything, not at all. And I'm just reclining watching movies, it's not even for movement. But the silicone layer over the foam just creates this airtight (enough) seal which is just bad all around. And I'm not even a sweaty person or anything, not at all. And I'm just reclining watching movies, it's not even for movement. But the silicone layer over the foam just creates this airtight (enough) seal which is just bad all around. 
reply

 
reply

 I have no idea if those are safe to use on those lenses, but it might be worth a look. 
reply

 It is too bad Facebook doesn't lean more into BeatSaber and rhythm game/fitness experiences, they are simple, easy to sell, and are pretty satisfying. But I guess it really isn't good enough for their product, they really need metaverse to take off. 
reply

 
reply

 > [150 words about a totally different product and platform]Vision Pro isn't something I would use regularly, but you're bringing opinions about a 14"" CRT monitor to a thread soliciting opinions on a specific 30"" 1080P TV. I think we are beyond the stage where useful generalizations about ""the state of AR/VR"" can be drawn from exposure to a single device.The disparity in screen quality and OS sophistication between Oculus 3 and Vision Pro is enormous (and both platforms are self-evidently in their infancy).Whether you think they have succeeded or not, and whether you think the price point is reasonable or not, Vision Pro is as different to Quest 3 as a BlackBerry Bold 9700 was to a Nokia 7650. Vision Pro isn't something I would use regularly, but you're bringing opinions about a 14"" CRT monitor to a thread soliciting opinions on a specific 30"" 1080P TV. I think we are beyond the stage where useful generalizations about ""the state of AR/VR"" can be drawn from exposure to a single device.The disparity in screen quality and OS sophistication between Oculus 3 and Vision Pro is enormous (and both platforms are self-evidently in their infancy).Whether you think they have succeeded or not, and whether you think the price point is reasonable or not, Vision Pro is as different to Quest 3 as a BlackBerry Bold 9700 was to a Nokia 7650. The disparity in screen quality and OS sophistication between Oculus 3 and Vision Pro is enormous (and both platforms are self-evidently in their infancy).Whether you think they have succeeded or not, and whether you think the price point is reasonable or not, Vision Pro is as different to Quest 3 as a BlackBerry Bold 9700 was to a Nokia 7650. Whether you think they have succeeded or not, and whether you think the price point is reasonable or not, Vision Pro is as different to Quest 3 as a BlackBerry Bold 9700 was to a Nokia 7650. 
reply

 Each have their pros, each have their cons (well the mvp has mostly cons being the worst of the 3 but hey its having a crack). 
reply

 For that same reason, I dont dare to compare Vision to any other VR (and I tried a few, not Vision Pro tho). 
reply

 Post-M series I hear this from time to time and always ask people to show me something in the same weight class with equivalent battery life, performance, and screen quality.Has the market finally caught up to the point where your statement is true? (Not asking you to research, just curious if any spring to mind from any pre-purchase research you did.)> Putting aside the enormous hardware difference between the twoI think this is far too charitable.1. We are a largely technical audience.2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. Has the market finally caught up to the point where your statement is true? (Not asking you to research, just curious if any spring to mind from any pre-purchase research you did.)> Putting aside the enormous hardware difference between the twoI think this is far too charitable.1. We are a largely technical audience.2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. > Putting aside the enormous hardware difference between the twoI think this is far too charitable.1. We are a largely technical audience.2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. I think this is far too charitable.1. We are a largely technical audience.2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. 1. We are a largely technical audience.2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. 2. We are discussing a product category where, per the last ten years of discussion about early hardware drawbacks (and the critical consensus on Vision Pro), the screen inescapably defines the experience.Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. Anyone on HN describing Vision Pro's screen as ""the same shiz"" as Quest 3 must either be a troll or operating with a knowledge gap so vast as to make meaningful discussion very, very difficult.Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. Like, if you don't understand the math, read the reviews and trust that this is not a global cabal of Apple apologists making shit up. Occam's Razor: this is a $3500 device where 35% of the BOM is the screens ($550-ish), compared to a $500 device where ~19% of the BOM is screens ($80). Of course they aren't in the same league. 
reply

 Law of diminishing returns. If I 
only need 8 hours of battery life, the fact that the M6 MacPro has a 48-day battery won't move me - a Framework/Dell with a 12-hour battery life would be on par as ""good enough for me"" on the battery life metric. 
reply

 But it will. Suddenly you don't need to worry about putting it on charger on the evening, it will still be there second day with enough charge to leave you worry free. It's a fundamental change that competition just doesn't get. 
reply

 
reply

 Oculus Quest 3 screens: LCD displays with a per-eye resolution of 2064×2208p (4.56 million pixels per eye)Apple Vision Pro screens: micro-OLED displays with a per-eye resolution of 3,680x3,140 (11.5 million pixels per eye)Disproof by counterexample. Perhaps you could refine your theory? Apple Vision Pro screens: micro-OLED displays with a per-eye resolution of 3,680x3,140 (11.5 million pixels per eye)Disproof by counterexample. Perhaps you could refine your theory? Disproof by counterexample. Perhaps you could refine your theory? 
reply

 
reply

 
reply

 It's all just phonecall. Goal is provide phonecalling. It no matter whether it iPhone or landline phone. Goal is talky talk. Phone go talky talk. 
reply

 [0] https://amzn.to/4ehZpnL 
reply

 
reply

 
reply

 > it would be entirely non-immersive because moving your upper bodyNot sure what you mean by this?Even so, it’s not about perfect immersion. It’s about having the best view of the game sitting from home. Not sure what you mean by this?Even so, it’s not about perfect immersion. It’s about having the best view of the game sitting from home. Even so, it’s not about perfect immersion. It’s about having the best view of the game sitting from home. 
reply

 >Not sure what you mean by this?Imagine full 3d scan of the players in real time. You could move around the court and watch them play. Imagine full 3d scan of the players in real time. You could move around the court and watch them play. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Excited about the updates to the OS, my goal was always to use it for work, as an alternative posture mode, but couldn't get used to it at first.Are there any other killer apps other than movies these days? Are there any other killer apps other than movies these days? 
reply

 Weird. I really enjoyed our toddlers 
reply

 
reply

 
reply

 One gripe I had was that I couldn't see the keyboard in an immersive environment, so I had to keep reorienting myself if I took my hands off of it. Now with visionOS 2 you can have the keyboard appear in an environment, so I'm excited to try that. The ability to have an ultra wide screen is a nice addition as well. 
reply

 
reply

 Mostly it's the best cinema screen I've ever viewed in my life. ""Avatar 2"", in 3D and at 48fps, is an absolutely stunning viewing experience. I wish high-framerate movies were more common. They look incredible. 
reply

 
reply

 Maybe Apple scheduled this feature for a later release? This is something that can probably be done efficiently 100% in software. 
reply

 Doubtful. The data transfer needed between the two devices is not trivial. 
reply

 Video would work well, audio might be a little harder to sync exactly correctly.Apps are going to be really really hard. Apps are going to be really really hard. 
reply

 
reply

 https://www.theverge.com/2024/4/2/24118863/apple-vision-pro-... 
reply

 
reply

 https://www.theverge.com/2024/4/2/24118863/apple-vision-pro-... 
reply

 
reply

 So one of the big advantages is that it saves you from turning on the overhead light? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Even in MVD I felt incredibly limited and just wanted to go back to using my actual displays. Within a week I had to force myself to put it on, I wasn’t drawn to it. Honestly I think I enjoyed writing blog posts about it more than I enjoyed actually using the device.If/when MVD and passthrough get better I’ll probably buy it (new model) again but for now it’s just not good enough, especially for the price. If it was $1K or less I might have kept it.[0] https://joshstrange.com If/when MVD and passthrough get better I’ll probably buy it (new model) again but for now it’s just not good enough, especially for the price. If it was $1K or less I might have kept it.[0] https://joshstrange.com [0] https://joshstrange.com 
reply

 
reply

 
reply

 But, that is to be expected, the form factor isn't convenient yet. When mobile phones weighed 2KG few people used them on a daily. When it's miniaturized into the form factor of glasses, we'll all be daily users. That seems to me more like a question of when, not if. 
reply

 
reply

 
reply

 At $3500, in this economy, it's a no-go for all but the most die-hard of Apple fans. 
reply

 I don't recommend it for non developers until there is more content, but it's a really neat dev kit device that shows where the future is headed. 
reply

 
reply

 ---Here's my take on it.The Apple Vision Pro was built for being a computer that encompasses space. Not meant to be a “headset”, and not approaching the problem as a “headset”, but more-so an immersive head-mounted computer. So all the preconceptions people’ve had about “headset” in the past are kinda thrown out the window. Sure, the Quest 3 is similar in that it’s got a focus on AR instead of VR, but it’s still built for gaming first - we can see by the app library and what the Quest store pushes for its apps - it’s gaming.Similar story with other headsets - primary focus is gaming. Be it immersive experiences in gaming (KayakVR, etc.), competitive gaming (Breachers, Pavlov, etc.), or social (VRChat, Resonite, Rec Room, Bigscreen, etc.), it’s still gaming.The Apple Vision Pro is built on a completely different foundation and philosophy from other headsets. That’s why, and how, I use mine. Otherwise, it would just kinda be in the corner as a “really high resolution, really good eye and hand tracked, but otherwise very uncomfortable and heavy headset with too many compromises” sorta deal.My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. Here's my take on it.The Apple Vision Pro was built for being a computer that encompasses space. Not meant to be a “headset”, and not approaching the problem as a “headset”, but more-so an immersive head-mounted computer. So all the preconceptions people’ve had about “headset” in the past are kinda thrown out the window. Sure, the Quest 3 is similar in that it’s got a focus on AR instead of VR, but it’s still built for gaming first - we can see by the app library and what the Quest store pushes for its apps - it’s gaming.Similar story with other headsets - primary focus is gaming. Be it immersive experiences in gaming (KayakVR, etc.), competitive gaming (Breachers, Pavlov, etc.), or social (VRChat, Resonite, Rec Room, Bigscreen, etc.), it’s still gaming.The Apple Vision Pro is built on a completely different foundation and philosophy from other headsets. That’s why, and how, I use mine. Otherwise, it would just kinda be in the corner as a “really high resolution, really good eye and hand tracked, but otherwise very uncomfortable and heavy headset with too many compromises” sorta deal.My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. The Apple Vision Pro was built for being a computer that encompasses space. Not meant to be a “headset”, and not approaching the problem as a “headset”, but more-so an immersive head-mounted computer. So all the preconceptions people’ve had about “headset” in the past are kinda thrown out the window. Sure, the Quest 3 is similar in that it’s got a focus on AR instead of VR, but it’s still built for gaming first - we can see by the app library and what the Quest store pushes for its apps - it’s gaming.Similar story with other headsets - primary focus is gaming. Be it immersive experiences in gaming (KayakVR, etc.), competitive gaming (Breachers, Pavlov, etc.), or social (VRChat, Resonite, Rec Room, Bigscreen, etc.), it’s still gaming.The Apple Vision Pro is built on a completely different foundation and philosophy from other headsets. That’s why, and how, I use mine. Otherwise, it would just kinda be in the corner as a “really high resolution, really good eye and hand tracked, but otherwise very uncomfortable and heavy headset with too many compromises” sorta deal.My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. Similar story with other headsets - primary focus is gaming. Be it immersive experiences in gaming (KayakVR, etc.), competitive gaming (Breachers, Pavlov, etc.), or social (VRChat, Resonite, Rec Room, Bigscreen, etc.), it’s still gaming.The Apple Vision Pro is built on a completely different foundation and philosophy from other headsets. That’s why, and how, I use mine. Otherwise, it would just kinda be in the corner as a “really high resolution, really good eye and hand tracked, but otherwise very uncomfortable and heavy headset with too many compromises” sorta deal.My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. The Apple Vision Pro is built on a completely different foundation and philosophy from other headsets. That’s why, and how, I use mine. Otherwise, it would just kinda be in the corner as a “really high resolution, really good eye and hand tracked, but otherwise very uncomfortable and heavy headset with too many compromises” sorta deal.My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. My Quest 2 for example, I bought that simply to tear it apart and have fun with it. I did just that, and now it’s non-functional (I have to fix it up at some point). My Pico 4 Enterprise, I bought with the express intent of getting eye and face tracking working without needing to get a Quest Pro (with worse compromises in my mind, for my use-case at least).My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. My Bigscreen Beyond is my main headset for all VR experiences as it compromises on things I’m okay with compromising on, and shines in places I really want it to. Ultimately, it’s a great all-around social and immersive headset while also being great with being competitive due to its small form factor. However, it’s still all gaming. The compromise that stops me from using the Beyond over the Vision Pro in certain use-cases is:
- not wireless
- not running its own OS
- doesn’t have passthrough
- doesn’t have eye and hand tracking
- relies on SteamVR (which is great for gaming, but really janky for anything other than gaming)My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. My Apple Vision Pro is my main headset for being an extension of myself and becoming more connected with the tools I regularly use — my computers. I pretty regularly use it when connecting to my macbook and my desktop PC (via Moonlight) so I can bring the screens with me wherever I go in the house, or even have a significantly more convenient viewing experience for content being consumed. I.e.
- when doing things around the house like
  - cooking food
  - folding laundry
  - cleaning around the house
  - etc.
- when lying down in bed, it’s much easier to stare at the ceiling than crane my neck over to look at a laptop screenPlus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. Plus, the Vision Pro has significantly better (in my experience) hand-based interactions simply due to it having the selection laser based on eye tracking. While there are false negatives and false positives with eye tracking, or even hand tracking for finger taps, I’ve found it to be significantly less frustrating than the Quest 2 and Quest Pro hand tracking along with the Pico 4 Enterprise hand tracking too. This is mostly because, to select, you’d need to pinch your forefinger and thumb together (on quest) or move your thumb from a thumbs-up to a fist (on pico) to select. This inherently changes where the cursor is pointing, so I’d end up selecting the same button at least three times before it actually hits. Sometimes the cursor would show that I’m selecting it, but it doesn’t actuate the “click” because I — apparently — didn’t tap my finger hard enough.So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. So I basically find that the Vision Pro — while having so many faults in general — is the best that I’ve experienced in terms of system interaction by hand tracking, and also best in class for passthrough in terms of latency and camera distortion. It doesn’t make me regularly annoyed to use, and actually removes some distractions based on me needing to learn a whole different set of things because of inherent weaknesses in the hardware and software (in the case of Quest and Pico). VisionOS just makes a lot more sense to me, despite my understanding the technicalities behind the android-based operating systems a lot better than VisionOS (every day, I’m learning something new about VisionOS)I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. I think a lot of people rag on the Vision Pro just because
a) It’s Apple. It’s easy to rag on them for anything
b) It’s $3500
c) It’s not even got good software (they’re looking for something that Apple didn’t want to consider under their paradigms, but blaming Apple for being intentional and not pursuing those experiences)
d) It’s heavy (entirely fair)I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. I think, while I’ve been praising the Vision Pro, I’ve also been critical about a lot of aspects on it. I don’t see many people actually being critical about the Vision Pro, but more-so just whiny and complain-y. There are actual discussions that can go on and take place with this hardware, software, and experience, but people (and this is a pet peeve of mine) ignore all that and just complain because it’s fun to complain and not fun to actually discuss, understand, and bring forth ideas based on said discussion, on how this could benefit everyone — both in the VR / AR / HMD industry as well as outside of it.anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. anyway, </rant>---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. ---For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. For context, I am a heavy user of VR, with nearly 400 hours in the Beyond since December 2023. 
reply

 
reply

 
reply

 
reply

 https://news.ycombinator.com/item?id=40660397 
reply

"
4,,Plivo was hacked or sold user info,https://news.ycombinator.com/item?id=40659661,Comments,2024-06-12T16:05:58Z,"So they were hacked and didn’t say anything or don’t knowORThey are selling user data.Anyone else experience this ? ORThey are selling user data.Anyone else experience this ? They are selling user data.Anyone else experience this ? Anyone else experience this ? [1] https://www.plivo.com/legal/privacy/#how-does-plivo-share-yo... 
reply

 I'm signed up with Plivo but so far it doesn't seem like I've got any spam to that email (yet?) 
reply

 Or the matching address was generated algorithmically because if you're spamming you don't really care if most addresses bounce. Thinking about the days when I used to use bespoke addresses, they would have been pretty easy to generate algorithmically. And thinking about spam I've received, what appears to be algorithmic generation is not uncommon.Or the Terms of Service you agreed to include sharing information with partners.Good luck. Or the Terms of Service you agreed to include sharing information with partners.Good luck. Good luck. 
reply

"
5,,"Ask HN: If you are starting in 2024, what is the most productive solo dev stack?",https://news.ycombinator.com/item?id=40615271,Comments,2024-06-08T04:22:39Z,"However, for people who are starting out, without the goal or aim becoming a software engineer and aside of the golden trio (html, css, javascript). What would you learn today to build web apps (both static content and interactive experiences)? Using libraries that have been around for a few years and have accumulated a lot of training data is a huge productivity boost here, because LLM tools can both write code that uses them and usefully explain and debug them when they go wrong.It's weird and a little uncomfortable to have this as part of my selection criteria, but if I want to maximize the rate at which I can build things it's honestly a useful rule of thumb. It's weird and a little uncomfortable to have this as part of my selection criteria, but if I want to maximize the rate at which I can build things it's honestly a useful rule of thumb. 
reply

 ChatGPT learns from blog posts, forums, etc. If there's a vibrant and helpful community around a stack, ChatGPT has a lot to work with. If it's obscure, not so much. 
reply

 The difference is that I didn't use to rate that as one of my highest selection criteria, because if a new library was well designed and well documented enough I wouldn't feel the need for large amounts of community support.Today if a new library is well designed and well documented I still might pick a more mature competitor purely for the LLM advantage. Today if a new library is well designed and well documented I still might pick a more mature competitor purely for the LLM advantage. 
reply

 It might seem non-important to many, but I was writing a big amount of boilerplate code, tests, etc. and I have a feeling I would've been much more productive just sticking with C. 
reply

 
reply

 Seriously. The only way that works for me is to spend a bunch of time messing around with a model trying out different things.I really want to have a more repeatable process for this. I've been tinkering with a way of setting up my own automated evals to run against different models but I'm a fair way off having something usable there.For programming libraries I find that my assumptions usually hold: if a live set is widely used and has been around for a few years it's likely to get good results.I picked the WTForm Python library recently for this reason. I really want to have a more repeatable process for this. I've been tinkering with a way of setting up my own automated evals to run against different models but I'm a fair way off having something usable there.For programming libraries I find that my assumptions usually hold: if a live set is widely used and has been around for a few years it's likely to get good results.I picked the WTForm Python library recently for this reason. For programming libraries I find that my assumptions usually hold: if a live set is widely used and has been around for a few years it's likely to get good results.I picked the WTForm Python library recently for this reason. I picked the WTForm Python library recently for this reason. 
reply

 In the time it takes a big team to schedule a pre-meeting for discussing changing a schema, solo-devs can whip through many huge cross-cutting refactors across their entire architecture without anyone complaining about broken merges.Building a real, successful thing generally involves more time and more learning about the customer space than you expect at the outset. As a single dev, you have a massive advantage over big teams in your ability to make huge fast change in the architecture of your product.Here's the controversial part of this: if you want to maximize your ability to make big changes, you want a strongly-typed codebase (for me that's TypeScript on the front-end and C# on the backend because of the quality of the refactoring tooling for it). There's no formal guarantee that strong typing will keep your code working across big refactorings, but in practice it just works. You focus on getting the inner loops right and the compiler and IDE takes care of the rest.Yes, you can probably write the first iteration faster in a dynamically typed language, but when you start making those big changes that are your unfair competitive advantage against larger teams, the strong typing combined with modern IDE tooling capabilities means a working system remains a working system even as you treat it like completely malleable clay.I'm also a fan of modular monoliths, again for ease of major refactoring (if you're not familiar with it, check out for example TurboRepo in the node.js space). You can organize an enormous amount of code well using this technique, including having things partitioned to hand off to other devs or multiple teams if you happen to eventually want to scale up from single dev to multi-dev. Building a real, successful thing generally involves more time and more learning about the customer space than you expect at the outset. As a single dev, you have a massive advantage over big teams in your ability to make huge fast change in the architecture of your product.Here's the controversial part of this: if you want to maximize your ability to make big changes, you want a strongly-typed codebase (for me that's TypeScript on the front-end and C# on the backend because of the quality of the refactoring tooling for it). There's no formal guarantee that strong typing will keep your code working across big refactorings, but in practice it just works. You focus on getting the inner loops right and the compiler and IDE takes care of the rest.Yes, you can probably write the first iteration faster in a dynamically typed language, but when you start making those big changes that are your unfair competitive advantage against larger teams, the strong typing combined with modern IDE tooling capabilities means a working system remains a working system even as you treat it like completely malleable clay.I'm also a fan of modular monoliths, again for ease of major refactoring (if you're not familiar with it, check out for example TurboRepo in the node.js space). You can organize an enormous amount of code well using this technique, including having things partitioned to hand off to other devs or multiple teams if you happen to eventually want to scale up from single dev to multi-dev. Here's the controversial part of this: if you want to maximize your ability to make big changes, you want a strongly-typed codebase (for me that's TypeScript on the front-end and C# on the backend because of the quality of the refactoring tooling for it). There's no formal guarantee that strong typing will keep your code working across big refactorings, but in practice it just works. You focus on getting the inner loops right and the compiler and IDE takes care of the rest.Yes, you can probably write the first iteration faster in a dynamically typed language, but when you start making those big changes that are your unfair competitive advantage against larger teams, the strong typing combined with modern IDE tooling capabilities means a working system remains a working system even as you treat it like completely malleable clay.I'm also a fan of modular monoliths, again for ease of major refactoring (if you're not familiar with it, check out for example TurboRepo in the node.js space). You can organize an enormous amount of code well using this technique, including having things partitioned to hand off to other devs or multiple teams if you happen to eventually want to scale up from single dev to multi-dev. Yes, you can probably write the first iteration faster in a dynamically typed language, but when you start making those big changes that are your unfair competitive advantage against larger teams, the strong typing combined with modern IDE tooling capabilities means a working system remains a working system even as you treat it like completely malleable clay.I'm also a fan of modular monoliths, again for ease of major refactoring (if you're not familiar with it, check out for example TurboRepo in the node.js space). You can organize an enormous amount of code well using this technique, including having things partitioned to hand off to other devs or multiple teams if you happen to eventually want to scale up from single dev to multi-dev. I'm also a fan of modular monoliths, again for ease of major refactoring (if you're not familiar with it, check out for example TurboRepo in the node.js space). You can organize an enormous amount of code well using this technique, including having things partitioned to hand off to other devs or multiple teams if you happen to eventually want to scale up from single dev to multi-dev. 
reply

 
reply

 Not if we are talking about productivity, as asked here. HTML is rather simple to learn, but can be annoying enough to write. And let's not start talking about CSS is for a beginner...Using some flavor of markdown and convert it to html would be far more productive. There is enough software around for enabling people a fast start, and you have the option to still enhance it with html&css (probably javascript too?). Using some flavor of markdown and convert it to html would be far more productive. There is enough software around for enabling people a fast start, and you have the option to still enhance it with html&css (probably javascript too?). 
reply

 There's also file includes, template syntax like loops/if-statements, inherited templates, inline Javascript syntax, ""filters"" for including Markdown and other languages, and much more 
reply

 These days you can probably just write whatever format you like and Claude or ChatGPT will convert it to HTML. 
reply

 
reply

 https://naereen.github.io/StrapDown.js/ 
reply

 My point was that if you count the time spent looking for the perfect renderer, HTML is faster and easier to write than Markdown unless you're writing a book. You just added another option someone has to spend time evaluating to the pile. 
reply

 
reply

 But I've generally seen sites using this strategy to be a lot more bloated and slow, so please be considerate of that if you can. 
reply

 
reply

 I personally prefer Symfony over Laravel because of it's modularity and extensibility, but Laravel has the edge on getting started quickly and available SaaS features (such as billing modules and stuff).If you need SPA-ish features, you could use htmx and if you need some on-site interactivity, I like Alpine.js. If you need SPA-ish features, you could use htmx and if you need some on-site interactivity, I like Alpine.js. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 If you know Python choose a Python stack, if you know Java choose a Java stack.within the language you know choose the most used one or the most boring one who existed for more than 10 years. within the language you know choose the most used one or the most boring one who existed for more than 10 years. 
reply

 What is the advice here exactly: ""never learn anything new""? 
reply

 However, I'm interested in Erlang/Elixir, so I'd like to hear what the upsides of Phoenix are. 
reply

 The real take away is, there's always new web tech you've never heard of that makes you infinitely more productive.Blazor is peak web development for me right now. The ability to design components and not have to leave C# for UI logic is amazing. Blazor is peak web development for me right now. The ability to design components and not have to leave C# for UI logic is amazing. 
reply

 
reply

 
reply

 
reply

 If you're starting in 2024 and want/need to be productive right away, use what you already know.Nobody said anything about ""never learn anything new"". If you have a job and other people are paying you, the expectation is to deliver, not to ""learn this cool thing"" and be in awe about you ""journey of self discovery"" while on the payroll. If you really believe you can learn a language, it's libs and frameworks ""in a weekend"" and forget that's just another humble brag nerds tend to tell others, then we don't even can proceed with this conversation.Learning is good and needed, learning is hard and takes time. Respect it. Nobody said anything about ""never learn anything new"". If you have a job and other people are paying you, the expectation is to deliver, not to ""learn this cool thing"" and be in awe about you ""journey of self discovery"" while on the payroll. If you really believe you can learn a language, it's libs and frameworks ""in a weekend"" and forget that's just another humble brag nerds tend to tell others, then we don't even can proceed with this conversation.Learning is good and needed, learning is hard and takes time. Respect it. Learning is good and needed, learning is hard and takes time. Respect it. 
reply

 There are too many un-opinionated answers like this. What if I don't respectfully don't know any stack? (my case).Thats what the initial question was about. Thats what the initial question was about. 
reply

 
reply

 Note: I am mostly a back-end /  SWE and mostly avoid JS, but I also have to admit that IMO that’s the best match with the authors goals. 
reply

 
reply

 Some of the answers are exactly what I've been trying to avoid. My only goal is being able to build my own stuff, I don't really care about kubernetes or scaling. I don't anticipate to have 1m active users with concurrency.At the same time, I got a bit scared by React quite frankly and hence was only looking at Sveltekit. However you rightly pointed out, its still being shaped despite being similar to Next.js and seems like ideal for React devs who want to jump into more simplicity and ""vibes"" with DSL.My only other consideration was Rails but for that one - the learning curve is even steeper. At the same time, I got a bit scared by React quite frankly and hence was only looking at Sveltekit. However you rightly pointed out, its still being shaped despite being similar to Next.js and seems like ideal for React devs who want to jump into more simplicity and ""vibes"" with DSL.My only other consideration was Rails but for that one - the learning curve is even steeper. My only other consideration was Rails but for that one - the learning curve is even steeper. 
reply

 
reply

 
reply

 MERN (MongoDB, Express.js, React, Node.js) stack. Here's why:The MERN stack is a highly popular and versatile full-stack JavaScript solution that allows you to build modern web applications efficiently as a solo developer. It provides several advantages:1. Full JavaScript Stack: By using JavaScript across the entire stack (frontend with React, backend with Node.js/Express), you can leverage your JavaScript skills without having to learn multiple languages. This reduces the learning curve and increases productivity.2. React for Frontend: React is a powerful and widely-adopted library for building user interfaces. Its component-based architecture and virtual DOM make it efficient for developing complex and interactive UIs.3. Node.js/Express for Backend: Node.js, with Express.js as the web framework, allows you to build scalable and high-performance backend services using JavaScript. This eliminates the need for a separate backend language.4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. The MERN stack is a highly popular and versatile full-stack JavaScript solution that allows you to build modern web applications efficiently as a solo developer. It provides several advantages:1. Full JavaScript Stack: By using JavaScript across the entire stack (frontend with React, backend with Node.js/Express), you can leverage your JavaScript skills without having to learn multiple languages. This reduces the learning curve and increases productivity.2. React for Frontend: React is a powerful and widely-adopted library for building user interfaces. Its component-based architecture and virtual DOM make it efficient for developing complex and interactive UIs.3. Node.js/Express for Backend: Node.js, with Express.js as the web framework, allows you to build scalable and high-performance backend services using JavaScript. This eliminates the need for a separate backend language.4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 1. Full JavaScript Stack: By using JavaScript across the entire stack (frontend with React, backend with Node.js/Express), you can leverage your JavaScript skills without having to learn multiple languages. This reduces the learning curve and increases productivity.2. React for Frontend: React is a powerful and widely-adopted library for building user interfaces. Its component-based architecture and virtual DOM make it efficient for developing complex and interactive UIs.3. Node.js/Express for Backend: Node.js, with Express.js as the web framework, allows you to build scalable and high-performance backend services using JavaScript. This eliminates the need for a separate backend language.4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 2. React for Frontend: React is a powerful and widely-adopted library for building user interfaces. Its component-based architecture and virtual DOM make it efficient for developing complex and interactive UIs.3. Node.js/Express for Backend: Node.js, with Express.js as the web framework, allows you to build scalable and high-performance backend services using JavaScript. This eliminates the need for a separate backend language.4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 3. Node.js/Express for Backend: Node.js, with Express.js as the web framework, allows you to build scalable and high-performance backend services using JavaScript. This eliminates the need for a separate backend language.4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 4. MongoDB for Database: MongoDB is a popular NoSQL database that integrates seamlessly with the MERN stack. Its flexible schema and scalability make it suitable for various types of applications.5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 5. Large Community and Ecosystem: The MERN stack has a vast and active community, ensuring abundant resources, libraries, and tools for efficient development. This can significantly boost productivity for a solo developer.6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 6. Isomorphic/Universal Rendering: With the MERN stack, you can implement isomorphic/universal rendering, which allows you to render the same code on the server and client-side, improving performance and SEO. 
reply

 Maybe Wordpress or Squarespace if you want to do something dynamic.Anything beyond that and you will need to become a software engineer, or at least learn some programming and server ops. Anything beyond that and you will need to become a software engineer, or at least learn some programming and server ops. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 And follow the promptsSite:
https://vitejs.dev/guide/ Site:
https://vitejs.dev/guide/ 
reply

 
reply

 You can keep 6-8 months to learn and build couple of projects using the tech stack 
reply

 Picking a framework advice: https://youtu.be/RTLSSGPoASU?si=UeVO_rHtYK_YS48vUnderstanding the different types of frontend frameworks: https://youtu.be/CQuTF-bkOgc?si=EMKfE_sNZNqf6c-xshadcn-svelte: https://www.shadcn-svelte.com/ Understanding the different types of frontend frameworks: https://youtu.be/CQuTF-bkOgc?si=EMKfE_sNZNqf6c-xshadcn-svelte: https://www.shadcn-svelte.com/ shadcn-svelte: https://www.shadcn-svelte.com/ 
reply

 
reply

 I usually use Laravel, Vue, and InertiaJS for the fullstack. Even though I considered trying a new stack for [1], I decided to stick with what I am familiar with. One reason is because Laravel already integrates well with queues. However, I am not a fan of MySQL and am thinking about switching to a different database.[1] https://replyhub.co [1] https://replyhub.co 
reply

 Dealing with the DB is extremely easy too - it handles relations within databases, queries, and the UI of Parse Dashboard is simple like your regular online spreadsheets. It's very easy to normalize DBs and all that.Old article I wrote on how to set it up in half an hour: https://smuzani.medium.com/setting-up-a-mobile-backend-serve...For front end, JS + jQuery + Bootstrap works fine for basic interactive experiences.You probably don't need React level stuff unless you're building a social media site or similar. One of the advantages of React is that it's easy to communicate what's happening to team members without documentation, but this is unneeded if you're solo.There's disadvantages though - you have to optimize things like all your JS files, and handle reloading from cache when you've updated a JS file. There's no ""clean"" or ""modular"" code; if you made a bar like the "" new | threads | past ..."" the top of this page, you use find and replace. But I have sites that run perfectly fine for years on this, without much issue in maintenance.Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. Old article I wrote on how to set it up in half an hour: https://smuzani.medium.com/setting-up-a-mobile-backend-serve...For front end, JS + jQuery + Bootstrap works fine for basic interactive experiences.You probably don't need React level stuff unless you're building a social media site or similar. One of the advantages of React is that it's easy to communicate what's happening to team members without documentation, but this is unneeded if you're solo.There's disadvantages though - you have to optimize things like all your JS files, and handle reloading from cache when you've updated a JS file. There's no ""clean"" or ""modular"" code; if you made a bar like the "" new | threads | past ..."" the top of this page, you use find and replace. But I have sites that run perfectly fine for years on this, without much issue in maintenance.Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. For front end, JS + jQuery + Bootstrap works fine for basic interactive experiences.You probably don't need React level stuff unless you're building a social media site or similar. One of the advantages of React is that it's easy to communicate what's happening to team members without documentation, but this is unneeded if you're solo.There's disadvantages though - you have to optimize things like all your JS files, and handle reloading from cache when you've updated a JS file. There's no ""clean"" or ""modular"" code; if you made a bar like the "" new | threads | past ..."" the top of this page, you use find and replace. But I have sites that run perfectly fine for years on this, without much issue in maintenance.Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. You probably don't need React level stuff unless you're building a social media site or similar. One of the advantages of React is that it's easy to communicate what's happening to team members without documentation, but this is unneeded if you're solo.There's disadvantages though - you have to optimize things like all your JS files, and handle reloading from cache when you've updated a JS file. There's no ""clean"" or ""modular"" code; if you made a bar like the "" new | threads | past ..."" the top of this page, you use find and replace. But I have sites that run perfectly fine for years on this, without much issue in maintenance.Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. There's disadvantages though - you have to optimize things like all your JS files, and handle reloading from cache when you've updated a JS file. There's no ""clean"" or ""modular"" code; if you made a bar like the "" new | threads | past ..."" the top of this page, you use find and replace. But I have sites that run perfectly fine for years on this, without much issue in maintenance.Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. Another bonus with simple HTML+CSS+jQuery+Bootstrap is that you can also host it on some really cheap servers. Netlify is free at first, but it does not scale well to say, 10k visits/day. 
reply

 
reply

 I do like it as a middle ""low code option"" as opposed to the complex no code options like Wordpress or doing the whole stack to build something that might not even sell. Honestly, Firebase has caught up to it in development speed and documentation, but Firebase feels ironically less scalable. 
reply

 
reply

 
reply

 On a glance, it looks like Pocket Base is easier and faster to set up but Parse Server might scale better, just because it's tied in with MongoDB by default. SQLite is an interesting choice, but 10k persistent real time connections is pretty much near the point where you should be hiring someone to scale it up.Supporting Google login out of the box is a major plus, and the dashboard works great on mobile. Supporting Google login out of the box is a major plus, and the dashboard works great on mobile. 
reply

 
reply

 Even Python will take someone starting from zero anywhere between 10-100 hours to fully grok. A phenomenal time investment if you have any professional interest at all in computers, but if you truly don't, a ridiculous one. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 [1]: https://ivylee.github.io/[2]: https://astro.build/ [2]: https://astro.build/ 
reply

 What do you use for more interactive / app like experiences?Specifically I need to call external APIs to retrieve data, store it, and then call another API to send some of the adjust results in the body. Specifically I need to call external APIs to retrieve data, store it, and then call another API to send some of the adjust results in the body. 
reply

 Tip: ChatGPT and other LLMs are quite proficient as well in these tech ;) 
reply

 BE: .NET or Spring BootDatabase: SQLite (eventually PostgreSQL in Docker container)Hosting: Hetzner Database: SQLite (eventually PostgreSQL in Docker container)Hosting: Hetzner Hosting: Hetzner 
reply

 
reply

 
reply

 
reply

 
reply

 If you are experienced, Rails/Laravel but I'd loop Clojure in too. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 So for someone just starting out, I agree - just pick one. You'll learn it, it is will make sense, you will be productive, and because you only know one thing everything else will seem weird. If you keep doing things, you'll learn more and then things will seem less weird. 
reply

 
reply

 In a Dunning-Kruger kind of way? As in, without having the familiarity with other options, you can't recognize how slow and difficult it is? 
reply

 
reply

 And because I'm so tired of NPM/JavaScript (UI) frameworks reinventing themselves with new name every 6 months. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
6,,Ask HN: How to OCR a PDF and preserve whitespace?,https://news.ycombinator.com/item?id=40612190,Comments,2024-06-07T19:43:25Z,"Either they don't support PDFs this large (hundreds of pages), are just really bad at English OCR, or, most commonly, don't preserve whitespace correctly.The number one problem is whitespace when it comes to multiple columns (similar to newspapers). Either not putting any spaces between words, or when there are multiple columns of text, putting rows in the wrong order. If it was just a single page, this would still be useful, since I could fix it myself. But I have over 1000 pages.I tried so many free services and trials that I just got charged for forgetting to cancel one (thanks to smallpdf.com for refunding my $12). Is OCR technology just not there yet when it comes to multiple-column pages? Yet, this does not seem to be an issue with newspapers.com, based on my experience using their text search feature. I would like to know what OCR software they are using. The number one problem is whitespace when it comes to multiple columns (similar to newspapers). Either not putting any spaces between words, or when there are multiple columns of text, putting rows in the wrong order. If it was just a single page, this would still be useful, since I could fix it myself. But I have over 1000 pages.I tried so many free services and trials that I just got charged for forgetting to cancel one (thanks to smallpdf.com for refunding my $12). Is OCR technology just not there yet when it comes to multiple-column pages? Yet, this does not seem to be an issue with newspapers.com, based on my experience using their text search feature. I would like to know what OCR software they are using. I tried so many free services and trials that I just got charged for forgetting to cancel one (thanks to smallpdf.com for refunding my $12). Is OCR technology just not there yet when it comes to multiple-column pages? Yet, this does not seem to be an issue with newspapers.com, based on my experience using their text search feature. I would like to know what OCR software they are using. https://apps.apple.com/us/app/super-pdf-ocr/id6479674248 
reply

 
reply

 
reply

 
reply

 https://stackoverflow.com/questions/3203790/parsing-pdf-file...https://excalibur-py.readthedocs.io/en/master/https://ledgerbox.io/blog/extract-tables-with-tesseract-ocrhttps://www.johnsnowlabs.com/extract-tabular-data-from-pdf-i...bit more in-depth review : https://dev.to/upsilon_it/how-to-extract-tabular-data-from-p... https://excalibur-py.readthedocs.io/en/master/https://ledgerbox.io/blog/extract-tables-with-tesseract-ocrhttps://www.johnsnowlabs.com/extract-tabular-data-from-pdf-i...bit more in-depth review : https://dev.to/upsilon_it/how-to-extract-tabular-data-from-p... https://ledgerbox.io/blog/extract-tables-with-tesseract-ocrhttps://www.johnsnowlabs.com/extract-tabular-data-from-pdf-i...bit more in-depth review : https://dev.to/upsilon_it/how-to-extract-tabular-data-from-p... https://www.johnsnowlabs.com/extract-tabular-data-from-pdf-i...bit more in-depth review : https://dev.to/upsilon_it/how-to-extract-tabular-data-from-p... bit more in-depth review : https://dev.to/upsilon_it/how-to-extract-tabular-data-from-p... 
reply

 In my experience it works amazingly well with columns / tabulated content. 
reply

 https://github.com/tesseract-ocr/tesseract/Those services usually do not expose all of the options. If you’re handy with shell scripts or Python, you can probably get better performance by hand-tuning options for your particular images. For example, if I recall there are page segmentation options to tell Tesseract to expect multi-column text. That alone might get you better performance than the automatic mode. Those services usually do not expose all of the options. If you’re handy with shell scripts or Python, you can probably get better performance by hand-tuning options for your particular images. For example, if I recall there are page segmentation options to tell Tesseract to expect multi-column text. That alone might get you better performance than the automatic mode. 
reply

 Try LLMwhisperer Playground[2] with your documents; there is no need for any setup.Extracting multi-column layout example - https://imgur.com/roYmv0I[1] https://llmwhisperer.unstract.com/
[2] https://pg.llmwhisperer.unstract.com/ Extracting multi-column layout example - https://imgur.com/roYmv0I[1] https://llmwhisperer.unstract.com/
[2] https://pg.llmwhisperer.unstract.com/ [1] https://llmwhisperer.unstract.com/
[2] https://pg.llmwhisperer.unstract.com/ 
reply

 
reply

 
reply

 But if you think about space and font widtgs, youll realize nontrivial. Fonts are often variable sizes and table alignments are often left, right or center aligned.A more general tool ive used is PaddleOCR A more general tool ive used is PaddleOCR 
reply

 There also is an older version PDF XChange viewer, that has the ability to do the same thing, although it is presented as ""viewer"".1: https://github.com/ocrmypdf/OCRmyPDF/ 1: https://github.com/ocrmypdf/OCRmyPDF/ 
reply

 LLMWhisperer has some nice tooling where they can fall back to OCR as well forcing text extraction from scanned documents as well as documents that have the text preserved as text. 
reply

 
reply

 https://pypi.org/project/pdfminer.six/ 
reply

 
reply

 
reply

"
7,,Meticulous (YC S21) is hiring to eliminate UI E2E tests,https://news.ycombinator.com/item?id=40632641,Comments,2024-06-10T12:00:20Z,"I'm Gabriel, CEO and co-founder of Meticulous, https://meticulous.ai/?utm_source=hn.Backed by YC, Coatue, the CTO of GitHub, CEO of Vercel, CPO of Adobe etc., https://meticulous.ai?utm_source=hn monitors how developers interact with your app and automatically generates and maintains test coverage nearing 100%. Even for the most complex applications. All without needing to write or maintain a single test.Our customers find it increases their end-to-end frontend development velocity by over 20%. If you’ve ever had the rare chance of working on a project where you can have near 100% confidence in your changes before you hit merge you’ll understand this immediately: programming feels completely different in that environment. Every dev can refactor with complete confidence and speed. And so they do, keeping the code fresh & nimble. Our customers’s developers have been able to move faster than they’ve often ever experienced before.We’re growing rapidly, and want to provide this experience to every software company in the world — while freeing them of the burden of writing or maintaining tests. We’ve built a team of exclusively world-class software engineers (“One of the strongest teams that I have seen” - Jared Friedman, Partner at Y Combinator).If you join us we’ll promise you’ll learn faster than you ever have in your career, and will be able to fundamentally change how the world develops software.## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. Backed by YC, Coatue, the CTO of GitHub, CEO of Vercel, CPO of Adobe etc., https://meticulous.ai?utm_source=hn monitors how developers interact with your app and automatically generates and maintains test coverage nearing 100%. Even for the most complex applications. All without needing to write or maintain a single test.Our customers find it increases their end-to-end frontend development velocity by over 20%. If you’ve ever had the rare chance of working on a project where you can have near 100% confidence in your changes before you hit merge you’ll understand this immediately: programming feels completely different in that environment. Every dev can refactor with complete confidence and speed. And so they do, keeping the code fresh & nimble. Our customers’s developers have been able to move faster than they’ve often ever experienced before.We’re growing rapidly, and want to provide this experience to every software company in the world — while freeing them of the burden of writing or maintaining tests. We’ve built a team of exclusively world-class software engineers (“One of the strongest teams that I have seen” - Jared Friedman, Partner at Y Combinator).If you join us we’ll promise you’ll learn faster than you ever have in your career, and will be able to fundamentally change how the world develops software.## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. Our customers find it increases their end-to-end frontend development velocity by over 20%. If you’ve ever had the rare chance of working on a project where you can have near 100% confidence in your changes before you hit merge you’ll understand this immediately: programming feels completely different in that environment. Every dev can refactor with complete confidence and speed. And so they do, keeping the code fresh & nimble. Our customers’s developers have been able to move faster than they’ve often ever experienced before.We’re growing rapidly, and want to provide this experience to every software company in the world — while freeing them of the burden of writing or maintaining tests. We’ve built a team of exclusively world-class software engineers (“One of the strongest teams that I have seen” - Jared Friedman, Partner at Y Combinator).If you join us we’ll promise you’ll learn faster than you ever have in your career, and will be able to fundamentally change how the world develops software.## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. We’re growing rapidly, and want to provide this experience to every software company in the world — while freeing them of the burden of writing or maintaining tests. We’ve built a team of exclusively world-class software engineers (“One of the strongest teams that I have seen” - Jared Friedman, Partner at Y Combinator).If you join us we’ll promise you’ll learn faster than you ever have in your career, and will be able to fundamentally change how the world develops software.## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. If you join us we’ll promise you’ll learn faster than you ever have in your career, and will be able to fundamentally change how the world develops software.## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. ## How does Meticulous work?You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You add a script tag on localhost and internal stacks, and Meticulous records all the development teams daily interactions with the app as they develop features. Meticulous understands every line of code, component and route executed by each flow and uses this to maintain a visual snapshot test suite that covers close to 100% of your code. This suite tests your apps UI, user flows and logic at all layers, across all edge cases, all branches, all feature flags. As your app evolves, your test suite evolves.The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. The tests are executed in an environment that ensures full determinism from the lowest level, right down to how the browsers’ macro & micro-tasks are scheduled — so no flakes. This bedrock of determinism is what makes the full system possible.You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You can watch a 60 second demo at https://meticulous.ai?utm_source=hn.## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. ## What’s our team like?We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. We are a London-based YC company. Our engineering team previously worked at Dropbox, Opendoor, Palantir, GitHub and Google, and have previously led 100+ engineer organizations at these companies. We are backed by some of the best founders and technical leaders in Silicon Valley, including Guillermo Rauch (founder Vercel, author next.js), Jason Warner (CTO GitHub), Scott Belsky (CPO Adobe), Calvin French-Owen (founder Segment), Jared Friedman (YC partner and former CTO of Scribd) and a bunch of other incredible folks.Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. Catching visual regressions is just the start. There is an entire category of products to build on top of replay. This ranges from catching exceptions to revealing the performance impact of frontend code.We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. We want to change the way the world develops software, and influence software approaches for decades to come.We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. We are seeding a London office and hiring an onsite founding engineer to join our team of six. We sponsor visas.You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You will have autonomy in building out this technology, but here are a few problems you might work on:- Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. - Build a distributed system to concurrently replay thousands of sessions, such that a developer gets a result in seconds. - Speed up the replay of sessions in a way that retains determinism. - Derive algorithms to detect sessions that cover differing code paths and edge cases, and ignore sessions that are too similar. - Help build out a team of world-class, highly collaborative, software engineers.As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. As founding engineer, you get to shape the company, and build the culture and technology from the ground up.What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. What we look for:In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. In a sentence: Technically brilliant, delightful to work with, combined with a self-awareness and strong desire to improve. We also want to make sure everyone is highly supportive of each other; we win as a team.We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. We're currently only looking to bring on folks with senior level skill sets and 5+ years of industry experience. You should have strong web fundamentals and a deep love for software engineering. Maybe you enjoy programming books like Clean Code, Designing Data Intensive Applications, Pragmatic Programmer etc. or enjoy hacking on interesting side projects. You value transparency and candid feedback, and are motivated by a strong desire to become the best engineer you can be.You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You can read about our values here https://ruby-wish-a8f.notion.site/Mission-Values-979c32ec58e...You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You will be given the space and time to up-level yourself as an engineer in terms of conferences, reading, or whatever you think will be most valuable. We will also set you up with mentorship, if you desire it, from top engineering leaders (folks running 100-engineer organizations at the world's leading tech companies).You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. You’ll get to work alongside some of the best engineers there are, break new ground solving truly novel CS problems and deliver something that transforms how software is built.If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub. If this sounds interesting, please reach out to me at gabe [at] meticulous [dot] ai with “HN” in the subject line and 2-3 sentences about what you find interesting about Meticulous and your resume/LinkedIn/GitHub."
8,,Ask HN: What alternatives to Adobe products are you switching to?,https://news.ycombinator.com/item?id=40671842,Comments,2024-06-13T16:44:05Z,"
reply

 If/when I ditch Adobe, it will be for an open source stack. 
reply

 I used Premiere for about two years but never liked it as much as Final Cut Pro X, so I'm back on FCPX for video now that I've got a better Mac to run it on.FCPX and Affinity are both one-time purchases, which I appreciate. FCPX and Affinity are both one-time purchases, which I appreciate. 
reply

 
reply

 
reply

 
reply

 It is also reasonably priced and no subscription. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 1) Photopea (quite brilliant for most of the things photoshop can do)2) paint.net for not too advanced edits3) KritaFor After Effects:1) Natron2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 2) paint.net for not too advanced edits3) KritaFor After Effects:1) Natron2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 3) KritaFor After Effects:1) Natron2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. For After Effects:1) Natron2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 1) Natron2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 2) BlackMagic FusionFor Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. For Premiere Pro:1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 1) DaVinci Resolve2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 2) KdenLiveFor Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. For Illustrator:1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 1) Inkscape2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 2) GraphitePlease note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. Please note that most of these are not feature for feature replacements, but for the most part and most common tasks, they are very good offerings. 
reply

 https://www.paintshoppro.com/en/What about Corel products?https://www.coreldraw.com/en/all-products/ What about Corel products?https://www.coreldraw.com/en/all-products/ https://www.coreldraw.com/en/all-products/ 
reply

 
reply

 I had enough with Adobe mostly due to cost. It's robbery to pay those prices for a tool she uses 3 times a year. I tried installing Krita for her and she struggled with everything. Couldn't find anything and just complained all the time. It occurred to me to try something else and Photopea is absolutely amazing. Wish I knew about it sooner. 
reply

 Illustrator (used since 1990s) -> Inkscape, KritaPhotoshop (used since v3.0) -> Gimp, imagemagick, rembgIf I were doing loads of design work I would still prefer Adobe. However, I can use the above with a Wacom tablet on Linux and feel very productive. Linux largely allows scripting so I open Gimp a lot less then I used to use Photoshop, eg. due to imagemagick convert/mogrify, rembg, etc. Haven't used PS in a decade maybe. Haven't used Illustrator in a year or more. Hope that helps. Photoshop (used since v3.0) -> Gimp, imagemagick, rembgIf I were doing loads of design work I would still prefer Adobe. However, I can use the above with a Wacom tablet on Linux and feel very productive. Linux largely allows scripting so I open Gimp a lot less then I used to use Photoshop, eg. due to imagemagick convert/mogrify, rembg, etc. Haven't used PS in a decade maybe. Haven't used Illustrator in a year or more. Hope that helps. If I were doing loads of design work I would still prefer Adobe. However, I can use the above with a Wacom tablet on Linux and feel very productive. Linux largely allows scripting so I open Gimp a lot less then I used to use Photoshop, eg. due to imagemagick convert/mogrify, rembg, etc. Haven't used PS in a decade maybe. Haven't used Illustrator in a year or more. Hope that helps. 
reply

 
reply

 
reply

 The poster child for this is easily the layers palette. It looks like a scrolling list widget like you’d find on any major desktop OS released in the past 30 years but doesn’t behave like one, with oddities like inability to multi-select. Instead, the user is expected to learn GIMP-specific behaviors that aren’t useful in any other program. There’s not really a good reason for this, aside for familiarity for existing users and while that’s an important thing to consider I’m not sure it’s worth impeding retention of new users. 
reply

 This is not to shit on Gimp! It's a completely adequate package of various image processing algorithms.However, this does not make it a replacement for Photoshop for a large segment of users.I've been using Photoshop for 30 years and tried to use gimp for 25 years :D However, this does not make it a replacement for Photoshop for a large segment of users.I've been using Photoshop for 30 years and tried to use gimp for 25 years :D I've been using Photoshop for 30 years and tried to use gimp for 25 years :D 
reply

 I'd love to ditch Adobe for an open stack. I've day-dreamed about creating an open alternative to Photoshop many times. It's a daunting task, it would take many years of dedication for reaching even a mediocre competitor to the 90s Photoshop. 
reply

 
reply

 I feel that people switching to another proprietary thing will just run into problems again in the future. It makes more sense to come up with a permanent solution. 
reply

 
reply

 
reply

 I say that with deep regret not only because of the update to the terms of service, but because they are terrible OS citizens, downright user hostile in many situations and a monopoly. 
reply

 I used to feel this way.  And then I discovered their Spectrum design and React libraries.  I use them in production.  And I am a huge fan.  I don't think anything like this exists.  Opensource or commercial.Don't get me wrong, there are plenty of UI libraries.  But nothing has the breadth of coverage that Spectrum does, including design guidelines.https://spectrum.adobe.com/
https://github.com/adobe/react-spectrumAnd Spectrum 2 is expected later this year. Don't get me wrong, there are plenty of UI libraries.  But nothing has the breadth of coverage that Spectrum does, including design guidelines.https://spectrum.adobe.com/
https://github.com/adobe/react-spectrumAnd Spectrum 2 is expected later this year. https://spectrum.adobe.com/
https://github.com/adobe/react-spectrumAnd Spectrum 2 is expected later this year. And Spectrum 2 is expected later this year. 
reply

 Their apps are such foreigners in their ecosystem that they make Electron apps look good by comparison. Also, Creative Cloud spreads itself over every folder it can touch, keeps nagging me to use cloud-whatever, fights me for auto launching and updating, etc.That's what I meant as a bad platform citizen. That's what I meant as a bad platform citizen. 
reply

 Affinity Photo for bitmap editing (which is vanishingly rare these days).Affinity Designer for a few vector operations and tools not supported by Figma.Affinity Publisher for print design (aka when I need to update my resume...).Instead of Adobe Stock, I use Pexels, or just generate a sufficiently generic image on ChatGPT.Instead of Adobe Fonts, I just stopped being a web developer, ha ha. Google Fonts, of course, is one alternative.I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. Affinity Designer for a few vector operations and tools not supported by Figma.Affinity Publisher for print design (aka when I need to update my resume...).Instead of Adobe Stock, I use Pexels, or just generate a sufficiently generic image on ChatGPT.Instead of Adobe Fonts, I just stopped being a web developer, ha ha. Google Fonts, of course, is one alternative.I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. Affinity Publisher for print design (aka when I need to update my resume...).Instead of Adobe Stock, I use Pexels, or just generate a sufficiently generic image on ChatGPT.Instead of Adobe Fonts, I just stopped being a web developer, ha ha. Google Fonts, of course, is one alternative.I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. Instead of Adobe Stock, I use Pexels, or just generate a sufficiently generic image on ChatGPT.Instead of Adobe Fonts, I just stopped being a web developer, ha ha. Google Fonts, of course, is one alternative.I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. Instead of Adobe Fonts, I just stopped being a web developer, ha ha. Google Fonts, of course, is one alternative.I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. I got rid of all Adobe products in 2019. Or so I thought. Last year, my laptop fan started going crazy, and the whole machine was heating up. When I looked at my processes, I saw that some little remnant of Creative Cloud had refused to be uninstalled through the regular process, had survived on my computer for years, and just at that moment decided to attack. Maybe it was trying to remind me why I hate Adobe. 
reply

 Can you elaborate? I like Figma for its interface design capabilities, but feel like Illustrator has more complex vector design. Would you consider Affinity Designer as more similar to Illustrator feature-wise? 
reply

 A practical example would be the ""Divide"" operation. This is the boolean operation that creates new shapes out of overlapping sections, for example if you had two partially overlapping circles and you used Divide on them, the result would be two pac-man shapes and a leaf shape.Though it has Boolean operations like Union, Subtract, Intersect, and Exclude, Figma doesn't have Divide at all. Both Affinity and Illustrator do.Divide is a really, really powerful step in building complex shapes out of simple ones, so when I need to use it, sometimes it's easier to just open up Affinity Designer, even if the rest of the design is in Figma.Beyond this, Illustrator has a host of neat ways of working with vectors that neither AD nor Figma do. All kinds of warp actions, meshes, and a really nice system for recoloring shapes quickly. It's been 5 years since I opened it up, so I am probably forgetting a lot of important differences. Though it has Boolean operations like Union, Subtract, Intersect, and Exclude, Figma doesn't have Divide at all. Both Affinity and Illustrator do.Divide is a really, really powerful step in building complex shapes out of simple ones, so when I need to use it, sometimes it's easier to just open up Affinity Designer, even if the rest of the design is in Figma.Beyond this, Illustrator has a host of neat ways of working with vectors that neither AD nor Figma do. All kinds of warp actions, meshes, and a really nice system for recoloring shapes quickly. It's been 5 years since I opened it up, so I am probably forgetting a lot of important differences. Divide is a really, really powerful step in building complex shapes out of simple ones, so when I need to use it, sometimes it's easier to just open up Affinity Designer, even if the rest of the design is in Figma.Beyond this, Illustrator has a host of neat ways of working with vectors that neither AD nor Figma do. All kinds of warp actions, meshes, and a really nice system for recoloring shapes quickly. It's been 5 years since I opened it up, so I am probably forgetting a lot of important differences. Beyond this, Illustrator has a host of neat ways of working with vectors that neither AD nor Figma do. All kinds of warp actions, meshes, and a really nice system for recoloring shapes quickly. It's been 5 years since I opened it up, so I am probably forgetting a lot of important differences. 
reply

 Would you say that AD is enough for your needs regarding vector design? (I'm looking at ending my Adobe sub this year, would like AD to be a suitable replacement). 
reply

 
reply

 https://flyingmeat.com/acorn/ 
reply

 After the first $49 purchase, I spent another $15 and then $19 on upgrades over the years.It's very effective. The interface is extremely familiar if you're used to Photoshop, and it's wonderfully Mac-native.I highly recommend it! It's very effective. The interface is extremely familiar if you're used to Photoshop, and it's wonderfully Mac-native.I highly recommend it! I highly recommend it! 
reply

 1) https://www.gimp.org/2) https://www.digikam.org/3) https://www.darktable.org/Vector based editing tool1) https://inkscape.org/UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. 2) https://www.digikam.org/3) https://www.darktable.org/Vector based editing tool1) https://inkscape.org/UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. 3) https://www.darktable.org/Vector based editing tool1) https://inkscape.org/UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. Vector based editing tool1) https://inkscape.org/UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. 1) https://inkscape.org/UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. UI/UX1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. 1). https://www.sketch.com/Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. Desktop publishinghttps://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. https://www.scribus.net/But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. But I haven't found a tool that is as good as Adobe Indesign for desktop publishing. 
reply

 Fair thing to say is that I don't do that much image/video editing these days.When I was a 3D artist I found very hard to migrate from 3Ds Max, Vray and Photoshop, especially in ArchViz. When I was a 3D artist I found very hard to migrate from 3Ds Max, Vray and Photoshop, especially in ArchViz. 
reply

 I really wish I could get behind inkscape but the UI has never improved enough for me to tolerate it. Graphic just feels much better.Use Pixelmator Pro for photoshop stuff. I don't do a lot of work in it anymore but it's great for making youtube thumbs and other basic stuff. The photo retouching stuff is nice, stills from my gopro are kinda dark and it does a great job making them look better for web use. Use Pixelmator Pro for photoshop stuff. I don't do a lot of work in it anymore but it's great for making youtube thumbs and other basic stuff. The photo retouching stuff is nice, stills from my gopro are kinda dark and it does a great job making them look better for web use. 
reply

 
reply

 Have tried Figma and it’s ok I guess, but leans too far into prototyping and collab for my own personal use, plus I don’t like how they keep your full fidelity original documents locked away in an proprietary document format (Sketch’s file format is open and publicly documented).I have a Photoshop license but it’s used only for following art instruction videos (drawing, painting, etc) just to reduce friction, since that’s what the bulk of instructors are using and I don’t want to fuss with remapping keys and hunting down equivalent functionality mid-lesson. All “serious” work is done with other software. I have a Photoshop license but it’s used only for following art instruction videos (drawing, painting, etc) just to reduce friction, since that’s what the bulk of instructors are using and I don’t want to fuss with remapping keys and hunting down equivalent functionality mid-lesson. All “serious” work is done with other software. 
reply

 
reply

 
reply

 However, I kept a $10/month subscription to Lightroom & Photoshop, because I have an enormous Lightroom catalog. They have me over a barrel on Lightroom.There is also no replacement for Adobe After Effects if it's part of your workflow. There's Fusion in the DaVinci Resolve suite, but it's much different. There is also no replacement for Adobe After Effects if it's part of your workflow. There's Fusion in the DaVinci Resolve suite, but it's much different. 
reply

 
reply

 I am never going to pay for Adobe while this practices continue. 
reply

 https://en.wikipedia.org/wiki/Adobe_Creative_Cloud#Desktop,_...I think the big ones are:AcrobatAuditionIllustratorInDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. I think the big ones are:AcrobatAuditionIllustratorInDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. AcrobatAuditionIllustratorInDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. AuditionIllustratorInDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. IllustratorInDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. InDesignLightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. LightroomPhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. PhotoshopPremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. PremiereI think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. I think a lot of people also use Fonts and Stock just because it’s convenient but they aren’t the same type of desktop product as the other ones. 
reply

 It's not even a matter of settling for an alternative because of Adobe, from the advice I've seen Resolve is what you'd go with today anyway. 
reply

 Premiere Pro  -> Davinci ResolveInDesign -> Affinity PublisherIllustrator -> InkscapePhotoshop -> Gimp InDesign -> Affinity PublisherIllustrator -> InkscapePhotoshop -> Gimp Illustrator -> InkscapePhotoshop -> Gimp Photoshop -> Gimp 
reply

 Illustrator -> Affinity DesignerInDesign -> Affinity PublisherPremiere/AfterEffects -> DaVinci ResolveAll one-time payment licenses. I cancelled my Adobe subscription a couple years ago. It was such a mess of dark patterns to get out of it. Good riddance. InDesign -> Affinity PublisherPremiere/AfterEffects -> DaVinci ResolveAll one-time payment licenses. I cancelled my Adobe subscription a couple years ago. It was such a mess of dark patterns to get out of it. Good riddance. Premiere/AfterEffects -> DaVinci ResolveAll one-time payment licenses. I cancelled my Adobe subscription a couple years ago. It was such a mess of dark patterns to get out of it. Good riddance. All one-time payment licenses. I cancelled my Adobe subscription a couple years ago. It was such a mess of dark patterns to get out of it. Good riddance. 
reply

 
reply

 
reply

 I just hate GIMP myself, never liked it and it feels extra clunky.  For quick edits, I can usually get away with Pinta (Paint.Net fork), but would like something more.  I've thought about digging out an old copy of JASC PSP, which IIRC ran fine under WINE. 
reply

 Photoimpact was my fave for a long time, now mainly using affinity designer / photo, photopea and for quick fixes there are dozens of online ai-like things to do most of what needs getting done.recently found a powertoys addon that lets me resize image using windows context menu / right click -> resize pictures.. no program to load / open.Corel videostudio and davinci resolve, own it - no subscription needed. recently found a powertoys addon that lets me resize image using windows context menu / right click -> resize pictures.. no program to load / open.Corel videostudio and davinci resolve, own it - no subscription needed. Corel videostudio and davinci resolve, own it - no subscription needed. 
reply

 
reply

 
reply

 
reply

 https://www.apple.com/final-cut-pro/motion/ 
reply

 for simple pixel-based image animation/distortion Anime Effects: https://animeeffectsdevs.github.io 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I myself have switched from Illustrator to Affinity Designer several years ago, but Photoshop is somehow irreplaceable for me ¯\_(ツ)_/¯ 
reply

 I've found myself missing out on the generative AI fill train but recently discovered Krita AI diffusion, not too difficult to set up and use from a PS diehard, and pretty magical.https://github.com/Acly/krita-ai-diffusion https://github.com/Acly/krita-ai-diffusion 
reply

 
reply

 
reply

"
9,,Ask HN: How to handle a senior hire turning out to be junior?,https://news.ycombinator.com/item?id=40617786,Comments,2024-06-08T14:34:22Z,"Essentially we had deficiencies in our technical interview that allowed for custom-fit preparation, the candidate excelled at selling themselves and negotiating, and there was a breakdown in internal communication where HR was under the impression we wanted to hire at any cost despite us giving the candidate a mediocre rating.Now we've found they're struggling to do even basic stuff without help and are far from helping others or even taking ownership of minor areas.They suffer from imposter syndrome (appropriately for once), which further hampers their productivity, communication, and growth as they're reluctant to ask for help with tasks they know should be easy, and equally reluctant to join the efforts of others who might notice their deficiencies.The result is net-negative productivity. It would probably take another 6-12 months of intense training to get them somewhat productive, and several years to get them closer to the level we hired them at, assuming we can accelerate their learning.This would require addressing the elephant in the room that they're not at the level we assumed, so that they will understand why we're changing the work mode, accept that learning should be a high priority, and feel permitted to seek more help when they need it. We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? Now we've found they're struggling to do even basic stuff without help and are far from helping others or even taking ownership of minor areas.They suffer from imposter syndrome (appropriately for once), which further hampers their productivity, communication, and growth as they're reluctant to ask for help with tasks they know should be easy, and equally reluctant to join the efforts of others who might notice their deficiencies.The result is net-negative productivity. It would probably take another 6-12 months of intense training to get them somewhat productive, and several years to get them closer to the level we hired them at, assuming we can accelerate their learning.This would require addressing the elephant in the room that they're not at the level we assumed, so that they will understand why we're changing the work mode, accept that learning should be a high priority, and feel permitted to seek more help when they need it. We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? They suffer from imposter syndrome (appropriately for once), which further hampers their productivity, communication, and growth as they're reluctant to ask for help with tasks they know should be easy, and equally reluctant to join the efforts of others who might notice their deficiencies.The result is net-negative productivity. It would probably take another 6-12 months of intense training to get them somewhat productive, and several years to get them closer to the level we hired them at, assuming we can accelerate their learning.This would require addressing the elephant in the room that they're not at the level we assumed, so that they will understand why we're changing the work mode, accept that learning should be a high priority, and feel permitted to seek more help when they need it. We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? The result is net-negative productivity. It would probably take another 6-12 months of intense training to get them somewhat productive, and several years to get them closer to the level we hired them at, assuming we can accelerate their learning.This would require addressing the elephant in the room that they're not at the level we assumed, so that they will understand why we're changing the work mode, accept that learning should be a high priority, and feel permitted to seek more help when they need it. We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? This would require addressing the elephant in the room that they're not at the level we assumed, so that they will understand why we're changing the work mode, accept that learning should be a high priority, and feel permitted to seek more help when they need it. We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? Even if we were to successfully address this elephant in the room, they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? I guess in most companies this would be a no-brainer, but we're a small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover.Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? Do you think there is any way to rescue this situation? Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons? Fire away and move on.Time you dedicate asking around is wasted money for your company.Learn from your mistakes and try to avoid a bad hire in the future. Time you dedicate asking around is wasted money for your company.Learn from your mistakes and try to avoid a bad hire in the future. Learn from your mistakes and try to avoid a bad hire in the future. 
reply

 
reply

 But the way you handle it will also be observed. Others need to know you won’t just fire someone on the spot if performance doesn’t match expectations. Life happens, people have personal life issues that may occasionally require attention, and you don’t want everyone else assuming they are one bad sprint away from unemployment.In most of the US at least, start with a performance improvement plan. Ideally one crafted with HR’s help. It should lay out specific expectations for a Senior Engineer, and call for immediate and sustained improvement. Use that to initiate a conversation and clearly lay out that they are not meeting expectations for the level at which they were hired. Present meeting those goals as a requirement for continued employment. You may also present a severance option here if you want them to have an out.This makes it clear to everyone that you treat all employees with respect, offer a clear warning, and then so long as you expectations in the PIP are clear, it’s a lot cleaner if you end up needing to part ways a week or four weeks later. In most of the US at least, start with a performance improvement plan. Ideally one crafted with HR’s help. It should lay out specific expectations for a Senior Engineer, and call for immediate and sustained improvement. Use that to initiate a conversation and clearly lay out that they are not meeting expectations for the level at which they were hired. Present meeting those goals as a requirement for continued employment. You may also present a severance option here if you want them to have an out.This makes it clear to everyone that you treat all employees with respect, offer a clear warning, and then so long as you expectations in the PIP are clear, it’s a lot cleaner if you end up needing to part ways a week or four weeks later. This makes it clear to everyone that you treat all employees with respect, offer a clear warning, and then so long as you expectations in the PIP are clear, it’s a lot cleaner if you end up needing to part ways a week or four weeks later. 
reply

 On top of that I’ve never seen anyone get through a PIP successfully (n=6).Furthermore, it can also create a culture of just dismissing any candidates who don’t come from the right pedigree because the risk of a mishire is way too high.Its worth asking if it’s worth your time to do this for the sake of following process. Larger companies that need to standardize management for hundreds of managers have a greater need than startups do. Furthermore, it can also create a culture of just dismissing any candidates who don’t come from the right pedigree because the risk of a mishire is way too high.Its worth asking if it’s worth your time to do this for the sake of following process. Larger companies that need to standardize management for hundreds of managers have a greater need than startups do. Its worth asking if it’s worth your time to do this for the sake of following process. Larger companies that need to standardize management for hundreds of managers have a greater need than startups do. 
reply

 I don’t think they’re meant to succeed. If you want to keep an employee, you give them feedback and coach them. A PIP is used to document evidence that an employee is incompetent and is incapable of improving despite your best efforts, as a precursor to firing them. 
reply

 It’s a warning shot, and sometimes it only lasts a week.BigCo HR can definitely make it take months, but the practice in general doesn’t have to be that way. We did this at startup size as small as 20 people, and I never regretted it. BigCo HR can definitely make it take months, but the practice in general doesn’t have to be that way. We did this at startup size as small as 20 people, and I never regretted it. 
reply

 If the individual doesn't have the skills (or seemingly temperament) for a senior role, I'm not sure PIP is setting them up for success.Versus demotion with possibility of promotion allows them to perform at their level of competence, leaving open the possibility for them to chose (or not) to aim for promotion. Versus demotion with possibility of promotion allows them to perform at their level of competence, leaving open the possibility for them to chose (or not) to aim for promotion. 
reply

 I think it’s easiest to cut the relationship and let them start clean somewhere else. 
reply

 I kept someone for too long once and people on an adjacent team didn’t want to get stuck with that person during a re-org and were vocal about it. And that person bungled some important projects that set us back years on our ambitions.Fire them and use this as an opportunity to address your interview process. The longer you keep them the worse it will be. Fire them and use this as an opportunity to address your interview process. The longer you keep them the worse it will be. 
reply

 
reply

 
reply

 You should be looking for the employee to be making good general efforts, just without taking everything into account yet. And the employee should see evidence that you are serious about helping them master specifics of their new environment. 
reply

 - a sheet of paper i found in a desk 20 years ago 
reply

 It's probably fine to fire them, but also everyone involved should be open about the fact that the hiring and so also the firing is the direct result of their own failure. The morale implications of this could be lot more nuanced than you're implying. 
reply

 Could they have also lied on the interview?I would consider personality as a strong factor in keeping them, and if the company has room for a junior.Lowering the salary is a hard requirement though. I would consider personality as a strong factor in keeping them, and if the company has room for a junior.Lowering the salary is a hard requirement though. Lowering the salary is a hard requirement though. 
reply

 Everyone lies on interviews. Especially interviewers. 
reply

 I hate this rat race of being a performant engineer. The moment your performance declines, your managers will let you know and you’re under the radar now. 
reply

 I don't think so. A company is under no obligation to handhold their employees. It should be a 2 way street, beneficial in both directions.  If it's not beneficial for one party, they should be able to be honest about it and move in another direction. We're all adults here. 
reply

 
reply

 
reply

 > Excellent interviewto turn into> couldn't even handle explorer.exe.I had to deal with a similar situation. The size and scale of my employer at the time meant the employee stuck around for multiple years. They never got worse but sure never got better.In our case, the problem was that our interview questions were based on algorithmic knowledge with some OS fundamentals. This person happened to be really good at those types of problems. But ask them to change a few lines of Python or Javascript and they just could not figure it out.So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. to turn into> couldn't even handle explorer.exe.I had to deal with a similar situation. The size and scale of my employer at the time meant the employee stuck around for multiple years. They never got worse but sure never got better.In our case, the problem was that our interview questions were based on algorithmic knowledge with some OS fundamentals. This person happened to be really good at those types of problems. But ask them to change a few lines of Python or Javascript and they just could not figure it out.So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. > couldn't even handle explorer.exe.I had to deal with a similar situation. The size and scale of my employer at the time meant the employee stuck around for multiple years. They never got worse but sure never got better.In our case, the problem was that our interview questions were based on algorithmic knowledge with some OS fundamentals. This person happened to be really good at those types of problems. But ask them to change a few lines of Python or Javascript and they just could not figure it out.So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. I had to deal with a similar situation. The size and scale of my employer at the time meant the employee stuck around for multiple years. They never got worse but sure never got better.In our case, the problem was that our interview questions were based on algorithmic knowledge with some OS fundamentals. This person happened to be really good at those types of problems. But ask them to change a few lines of Python or Javascript and they just could not figure it out.So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. In our case, the problem was that our interview questions were based on algorithmic knowledge with some OS fundamentals. This person happened to be really good at those types of problems. But ask them to change a few lines of Python or Javascript and they just could not figure it out.So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. So the underlying flaw was assuming that anyone who could figure out algorithmic optimization in C++ (psuedo-code, we weren't looking for perfect syntax) under interview pressure would also figure out higher level languages, test frameworks, CI systems, etc, in an efficient fashion.My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. My simple solution was to push for a more diverse set of interview questions and interviewers. Actually, a ""take home"" style problem might have fleshed out these weaknesses but that was too radical, relative to the company culture, to even propose. 
reply

 I currently do a job interview where we start from a super easy app, and then I ask ""how would you add feature X"", then I go to the next (predefined) step.The challenge of the test is that we run into certain problems. Some senior devs can foresee them, but most don't. Then the question comes ""Why isn't this working and how to fix it"".I've done a crazy amount of interviews already, and this kind of job interview gives me the most confidence. I didn't have any false positives anymore.You could see the test as ""There is this junior that is stuck on something, can you help him out"". I want my candidates to be able to deal with the weird shit, and in the end that requires a proper understanding of the underlying technology.I don't like ""take home"" assignments, because you never know that someone's software dev spouse is sitting besides them.We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. The challenge of the test is that we run into certain problems. Some senior devs can foresee them, but most don't. Then the question comes ""Why isn't this working and how to fix it"".I've done a crazy amount of interviews already, and this kind of job interview gives me the most confidence. I didn't have any false positives anymore.You could see the test as ""There is this junior that is stuck on something, can you help him out"". I want my candidates to be able to deal with the weird shit, and in the end that requires a proper understanding of the underlying technology.I don't like ""take home"" assignments, because you never know that someone's software dev spouse is sitting besides them.We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. I've done a crazy amount of interviews already, and this kind of job interview gives me the most confidence. I didn't have any false positives anymore.You could see the test as ""There is this junior that is stuck on something, can you help him out"". I want my candidates to be able to deal with the weird shit, and in the end that requires a proper understanding of the underlying technology.I don't like ""take home"" assignments, because you never know that someone's software dev spouse is sitting besides them.We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. You could see the test as ""There is this junior that is stuck on something, can you help him out"". I want my candidates to be able to deal with the weird shit, and in the end that requires a proper understanding of the underlying technology.I don't like ""take home"" assignments, because you never know that someone's software dev spouse is sitting besides them.We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. I don't like ""take home"" assignments, because you never know that someone's software dev spouse is sitting besides them.We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. We have a HackerRank test to first filter out the worst, and next stage is this interview I described. We use the same for both juniors and seniors. 
reply

 We were asking high level questions. At no point did we ask things like ""have you ever used Microsoft Windows"" or ""have you ever used a desktop computer"". It would seem we cannot take these questions for granted anymore.The best strategy I've come up with is to build an intern program and source talent from that lower cost/risk pool. Pulling high level employees off the street was almost always a circus for us. The best strategy I've come up with is to build an intern program and source talent from that lower cost/risk pool. Pulling high level employees off the street was almost always a circus for us. 
reply

 imo, a very worthwhile investment of time and money. 
reply

 
reply

 I agree this is the best way to hire. Additional benefits are the chance to work on greenfield problems for low cost and creating leadership opportunities for folks with a couple years of experience.The only downside I have seen with the intern-to-FTE path is a tendency to leave after a few years as an FTE. I never ran numbers, and didn't have the god-power to get the data anyways, but would guess that half the interns who came on as FTE's were gone within 5 years. It would have been particularly interesting to compare intern->FTE tenure versus college grad->FTE tenure.Thinking about it more, moving on after a few years of productive work is not that much of a downside. Much better than not moving on after years of non-productive ""work"". The only downside I have seen with the intern-to-FTE path is a tendency to leave after a few years as an FTE. I never ran numbers, and didn't have the god-power to get the data anyways, but would guess that half the interns who came on as FTE's were gone within 5 years. It would have been particularly interesting to compare intern->FTE tenure versus college grad->FTE tenure.Thinking about it more, moving on after a few years of productive work is not that much of a downside. Much better than not moving on after years of non-productive ""work"". Thinking about it more, moving on after a few years of productive work is not that much of a downside. Much better than not moving on after years of non-productive ""work"". 
reply

 Ironically speaking, the person in question could handle all the interviews with new candidates if he's so good at interviewing. 
reply

 in the past few years it worked quite nicely but that still is not bullet proof. and we had to refine our methodology further.for example one candidate solved the task perfectly, but on the end of the ""trial day"" the candidate was unable to answer some of our questions regarding his code. so we think that he had access to the task details upfront, or someone else helped;another example was with candidate that solved the task, answered our questions, but in the office was lacking everything that he presented to us in the ""trial day"". we suspect that the relative of the candidate helped here, as we found later that the relative has job in similar position in another company.so the ""trail day"" is good way to test candidate, unless he has early access to the details of the task, or relative is helping with the task. it sorted a lot of candidates that were unable to follow the task details, or worse lacked team working skills for example one candidate solved the task perfectly, but on the end of the ""trial day"" the candidate was unable to answer some of our questions regarding his code. so we think that he had access to the task details upfront, or someone else helped;another example was with candidate that solved the task, answered our questions, but in the office was lacking everything that he presented to us in the ""trial day"". we suspect that the relative of the candidate helped here, as we found later that the relative has job in similar position in another company.so the ""trail day"" is good way to test candidate, unless he has early access to the details of the task, or relative is helping with the task. it sorted a lot of candidates that were unable to follow the task details, or worse lacked team working skills another example was with candidate that solved the task, answered our questions, but in the office was lacking everything that he presented to us in the ""trial day"". we suspect that the relative of the candidate helped here, as we found later that the relative has job in similar position in another company.so the ""trail day"" is good way to test candidate, unless he has early access to the details of the task, or relative is helping with the task. it sorted a lot of candidates that were unable to follow the task details, or worse lacked team working skills so the ""trail day"" is good way to test candidate, unless he has early access to the details of the task, or relative is helping with the task. it sorted a lot of candidates that were unable to follow the task details, or worse lacked team working skills 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 You have to fire. No hiring process is 100%. It is worse to have them stay. If your organization is unable to fire people because you have 'not firing people' as an objective, you're optimizing for things that aren't advancing the business, and essentially shooting yourselves in the foot. 
reply

 
reply

 
reply

 It's always hard to let someone go, especially in a small company with a focus on personal development and a positive work environment. However, if you don't address this situation:  1) The morale of the company will likely decrease.
  2) The productivity of the team will suffer.
  3) Employees may start questioning the leadership's decisions.
  4) Some may consider leaving as a result.

Generally speaking, the well-being and efficiency of the entire team should be a top priority for the company. From this, it also follows that having a solid interview process is crucial.   1) The morale of the company will likely decrease.
  2) The productivity of the team will suffer.
  3) Employees may start questioning the leadership's decisions.
  4) Some may consider leaving as a result.

Generally speaking, the well-being and efficiency of the entire team should be a top priority for the company. From this, it also follows that having a solid interview process is crucial. 
reply

 
reply

 I certainly appreciate seeing the occasional ""we agreed it would be best for them to take a different path"" emails from my company. Bit weird for them to send a global email for that tbh, but it really does send the message that they are actually responding to complaints and taking performance seriously, which is good.In most companies in Europe it's incredibly hard to fire people even if they are bad at their job, and people know it. It's refreshing when managers actually do get rid of poorly performing employees. In most companies in Europe it's incredibly hard to fire people even if they are bad at their job, and people know it. It's refreshing when managers actually do get rid of poorly performing employees. 
reply

 I would add, a big point of the announcement should be ""And we'll be expediting backfilling them"". The worst sort of firings/quits is when management sits on their hands for weeks in replacing them. 
reply

 One of the most cost effective and humane things you can do is extend their health benefits out further than their monetary severance. For example, a month's pay with 2-3 months health benefits.At least in cases where I've had to let people go, I've found they appreciate an approach like this. It's a relatively easy way to thread the needle between human dignity and corporate finance demands. A rarity. At least in cases where I've had to let people go, I've found they appreciate an approach like this. It's a relatively easy way to thread the needle between human dignity and corporate finance demands. A rarity. 
reply

 
reply

 
reply

 
reply

 Evaluate the hiring process, how did you mess up so bad?  Fix it. 
reply

 I'd sit down with employee, and present options.Start with: You're not performing at the level, technically or with leadership, that we were expecting. Some of this is our fault, for not figuring that out in the interview. So this is going to be an uncomfortable conversation...Option A: We decide you aren't a good fit for this position, part ways, and we wish you good luck in your next opportunity.Option B: We adjust your salary and title to fit with what we've seen of your productivity. We realize this is a hard ask. We also come up with a plan in which you have a training and responsibility plan over the next year to get you to what we'd expect for someone in your original role, at which time we'll consider you for promotion.A lot of responses here start and end with firing, which seems kind of callous to the individual for an HR fuckup. Better to at least present the demotion option. Start with: You're not performing at the level, technically or with leadership, that we were expecting. Some of this is our fault, for not figuring that out in the interview. So this is going to be an uncomfortable conversation...Option A: We decide you aren't a good fit for this position, part ways, and we wish you good luck in your next opportunity.Option B: We adjust your salary and title to fit with what we've seen of your productivity. We realize this is a hard ask. We also come up with a plan in which you have a training and responsibility plan over the next year to get you to what we'd expect for someone in your original role, at which time we'll consider you for promotion.A lot of responses here start and end with firing, which seems kind of callous to the individual for an HR fuckup. Better to at least present the demotion option. Option A: We decide you aren't a good fit for this position, part ways, and we wish you good luck in your next opportunity.Option B: We adjust your salary and title to fit with what we've seen of your productivity. We realize this is a hard ask. We also come up with a plan in which you have a training and responsibility plan over the next year to get you to what we'd expect for someone in your original role, at which time we'll consider you for promotion.A lot of responses here start and end with firing, which seems kind of callous to the individual for an HR fuckup. Better to at least present the demotion option. Option B: We adjust your salary and title to fit with what we've seen of your productivity. We realize this is a hard ask. We also come up with a plan in which you have a training and responsibility plan over the next year to get you to what we'd expect for someone in your original role, at which time we'll consider you for promotion.A lot of responses here start and end with firing, which seems kind of callous to the individual for an HR fuckup. Better to at least present the demotion option. A lot of responses here start and end with firing, which seems kind of callous to the individual for an HR fuckup. Better to at least present the demotion option. 
reply

 This can backfire, is this same training resource made available to the other devs in the team ? , are they being passed away for this promotion by guaranteeing it to the new entrant.The original poster specifically said its a small tight knit personal community of devs, if they could self promote inside, they would have provided training to existing dev itself.After demoting this person, they’ll need to hire a new senior dev, what’s the guarantee they will need 2 senior devs anytime soon ?Guaranteeing a future promotion if training goals are met would be a disingenuous commitment and dangerous for team building if other existing devs are not given equal opportunity to compete for that promotion.It would be even more complex. The original poster specifically said its a small tight knit personal community of devs, if they could self promote inside, they would have provided training to existing dev itself.After demoting this person, they’ll need to hire a new senior dev, what’s the guarantee they will need 2 senior devs anytime soon ?Guaranteeing a future promotion if training goals are met would be a disingenuous commitment and dangerous for team building if other existing devs are not given equal opportunity to compete for that promotion.It would be even more complex. After demoting this person, they’ll need to hire a new senior dev, what’s the guarantee they will need 2 senior devs anytime soon ?Guaranteeing a future promotion if training goals are met would be a disingenuous commitment and dangerous for team building if other existing devs are not given equal opportunity to compete for that promotion.It would be even more complex. Guaranteeing a future promotion if training goals are met would be a disingenuous commitment and dangerous for team building if other existing devs are not given equal opportunity to compete for that promotion.It would be even more complex. It would be even more complex. 
reply

 If they're outright fired, that says something to the existing team too, and especially in smaller shops where each head holds valuable knowledge, I'm not sure that's the company-benefiting message to send either.Plus if the individual chooses to leave, ""I think we all noticed that so-and-so wasn't a good fit for the senior role. We extended them the opportunity to realign to a different level, which they declined"" is a message I'd feel more comfortable presenting to the team.""We're not going to immediately shitcan you..."" is a powerful truth for retention in small teams/companies.Especially coupled ""... but we expect you to perform to your level, and we will address things if we see someone underperforming.""I do agree with other comments that do-nothing and ignoring the problem will be cancer to building a high-performing team. Plus if the individual chooses to leave, ""I think we all noticed that so-and-so wasn't a good fit for the senior role. We extended them the opportunity to realign to a different level, which they declined"" is a message I'd feel more comfortable presenting to the team.""We're not going to immediately shitcan you..."" is a powerful truth for retention in small teams/companies.Especially coupled ""... but we expect you to perform to your level, and we will address things if we see someone underperforming.""I do agree with other comments that do-nothing and ignoring the problem will be cancer to building a high-performing team. ""We're not going to immediately shitcan you..."" is a powerful truth for retention in small teams/companies.Especially coupled ""... but we expect you to perform to your level, and we will address things if we see someone underperforming.""I do agree with other comments that do-nothing and ignoring the problem will be cancer to building a high-performing team. Especially coupled ""... but we expect you to perform to your level, and we will address things if we see someone underperforming.""I do agree with other comments that do-nothing and ignoring the problem will be cancer to building a high-performing team. I do agree with other comments that do-nothing and ignoring the problem will be cancer to building a high-performing team. 
reply

 
reply

 I'm assuming you don't have an HR department because why on earth would you be handling this and asking the internet if you did (LARPing aside), but if you want to go through the motions, notify them of their under-performance, ask them what resources they need to perform to the expectation of the role as applied for (which you also make clear and document), bring that to whomever for approval, and then set progress improvement checkpoints every week to see where they're at. This could be training, additional staff support, consulting, etc. Give the employee a week to decide and put together their proposal.If they don't get the picture and start applying elsewhere while they're still employed, then evaluate them per the agreed timeline or, if the resources aren't approved and the project can't be delegated, go ahead and terminate their employment.Otherwise, and this is more mature, better, kinder way to handle it, just let them know they weren't a good fit, don't apologize but do offer them a generous severance, and let them go. Or if you want, you can hire me for a day, and I'll do it. If they don't get the picture and start applying elsewhere while they're still employed, then evaluate them per the agreed timeline or, if the resources aren't approved and the project can't be delegated, go ahead and terminate their employment.Otherwise, and this is more mature, better, kinder way to handle it, just let them know they weren't a good fit, don't apologize but do offer them a generous severance, and let them go. Or if you want, you can hire me for a day, and I'll do it. Otherwise, and this is more mature, better, kinder way to handle it, just let them know they weren't a good fit, don't apologize but do offer them a generous severance, and let them go. Or if you want, you can hire me for a day, and I'll do it. 
reply

 
reply

 The stories I keep hearing, about companies ghosting the applicant after 5-6 exhausting rounds of interviews, are scaring me, to be frank. It feels like the companies are optimizing towards not hiring as much as possible, and it's very tempting to optimize for passing the interview and make it into the primary skill... 
reply

 
reply

 Given the comments here, you don't have the couple months to unrust your skills. You will be deemed unfit after the first one and fired, the prevailing sentiment seems to be. 
reply

 
reply

 
reply

 The bar is really, really low. You will have to step over it however. 
reply

 
reply

 
reply

 
reply

 
reply

 Your blaming the wrong guy. The elephant in the room is that your interview process massively fucked up, and you failed to understand the most basic question of this process: junior or senior. 
reply

 
reply

 
reply

 For example: I was hired by a company as a developer, and they loved me, I was very productive there. But just a few months into the employment, a competing company offered me a much higher salary with a much shorter commute. I went to my manager and told him all about the offer, and asked him what he would do in my shoes. He said he'd take the other offer (since he knew that a competitive counter-offer was impossible). I took the offer, and we parted on very good terms.So you may be able to say something like this to this employee: ""There seems to have been a misunderstanding about our expectations and your experience. We thought you had more experience relevant for this role. We don't want to leave you high and dry, but the current arrangement isn't tenable. Would you prefer to restart as a junior developer and work your way back up as you gain experience, or do you feel it would be better to part ways?""Though now that I've typed it out, I'm not sure the strategy works as well when the one instigating the conversation has more power than the person being asked. Hmm. I'll post this in spite of my self doubt, just in case someone replies with interesting insights. I'm happy to be wrong if I learn something. So you may be able to say something like this to this employee: ""There seems to have been a misunderstanding about our expectations and your experience. We thought you had more experience relevant for this role. We don't want to leave you high and dry, but the current arrangement isn't tenable. Would you prefer to restart as a junior developer and work your way back up as you gain experience, or do you feel it would be better to part ways?""Though now that I've typed it out, I'm not sure the strategy works as well when the one instigating the conversation has more power than the person being asked. Hmm. I'll post this in spite of my self doubt, just in case someone replies with interesting insights. I'm happy to be wrong if I learn something. Though now that I've typed it out, I'm not sure the strategy works as well when the one instigating the conversation has more power than the person being asked. Hmm. I'll post this in spite of my self doubt, just in case someone replies with interesting insights. I'm happy to be wrong if I learn something. 
reply

 
reply

 Critically, discuss your options and intentions with HR. It can get messy for everyone if you don't approach dismissal in the right way. 
reply

 I can't tell from the description whether the candidate was outright deceptive, like claiming experience they didn't have, or candidate was just good at the normal interviewing rituals, and the real problem was mess-up on company's end (i.e., interviewers said ""mediocre"" but HR somehow heard ""hire at all costs"").In any case, talk with appropriate management and HR -- with everyone clear on what the cause of the hiring mistake was -- and figure out what the acceptable options are.Then, if the candidate seemed to be dealing in good faith, then probably talk with the employee, candidly, about the problem, and what options you're presenting.If they're leaving, you can assist to do it in a gentle way.  You might not have to assist much; they might hear it's not working out, and start job-hunting urgently.If they're staying but downleveled, you can probably figure out the details to do it in a sufficiently non-awkward, discreet way.  If employees noticed a bad-performer, they might be relieved to see that corrected, but hopefully they can also see the sympathetic and constructive way it was done, and adopt that tone themselves.But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. In any case, talk with appropriate management and HR -- with everyone clear on what the cause of the hiring mistake was -- and figure out what the acceptable options are.Then, if the candidate seemed to be dealing in good faith, then probably talk with the employee, candidly, about the problem, and what options you're presenting.If they're leaving, you can assist to do it in a gentle way.  You might not have to assist much; they might hear it's not working out, and start job-hunting urgently.If they're staying but downleveled, you can probably figure out the details to do it in a sufficiently non-awkward, discreet way.  If employees noticed a bad-performer, they might be relieved to see that corrected, but hopefully they can also see the sympathetic and constructive way it was done, and adopt that tone themselves.But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. Then, if the candidate seemed to be dealing in good faith, then probably talk with the employee, candidly, about the problem, and what options you're presenting.If they're leaving, you can assist to do it in a gentle way.  You might not have to assist much; they might hear it's not working out, and start job-hunting urgently.If they're staying but downleveled, you can probably figure out the details to do it in a sufficiently non-awkward, discreet way.  If employees noticed a bad-performer, they might be relieved to see that corrected, but hopefully they can also see the sympathetic and constructive way it was done, and adopt that tone themselves.But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. If they're leaving, you can assist to do it in a gentle way.  You might not have to assist much; they might hear it's not working out, and start job-hunting urgently.If they're staying but downleveled, you can probably figure out the details to do it in a sufficiently non-awkward, discreet way.  If employees noticed a bad-performer, they might be relieved to see that corrected, but hopefully they can also see the sympathetic and constructive way it was done, and adopt that tone themselves.But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. If they're staying but downleveled, you can probably figure out the details to do it in a sufficiently non-awkward, discreet way.  If employees noticed a bad-performer, they might be relieved to see that corrected, but hopefully they can also see the sympathetic and constructive way it was done, and adopt that tone themselves.But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. But, if the candidate wasn't in good faith, then they helped make this an adversarial situation, so talk with HR, and maybe also legal counsel, about how to terminate promptly and with a minimum of drama. 
reply

 I'm not pro-HR by any means, nor have I had to hire/fire a bunch of people, but the minute you hint that an employee could be terminated, there's a chance that they could take retaliatory measures.Further, OP stated, ""Essentially we had deficiencies in our technical interview that allowed for custom-fit preparation...""  So, it doesn't seem like the candidate had ""good faith"" intentions from the start.If OP is in the US, most states have an at-will employment clause, so a quick break isn't illegal by any measure (as long as they aren't terminating the employee for things like sex, race, religion, etc.). Further, OP stated, ""Essentially we had deficiencies in our technical interview that allowed for custom-fit preparation...""  So, it doesn't seem like the candidate had ""good faith"" intentions from the start.If OP is in the US, most states have an at-will employment clause, so a quick break isn't illegal by any measure (as long as they aren't terminating the employee for things like sex, race, religion, etc.). If OP is in the US, most states have an at-will employment clause, so a quick break isn't illegal by any measure (as long as they aren't terminating the employee for things like sex, race, religion, etc.). 
reply

 The whole corporate-think ""this person might do something evil, though we have no reason to suspect that, so we should do evil first"" is wrong.(I said talk with management and HR first; they might counsel or instruct differently, but you should make an effort to stand up for employee while you have the chance, before you potentially have to disagree and commit.)If the candidate wasn't dealing in good faith, then, like I said, terminate. (I said talk with management and HR first; they might counsel or instruct differently, but you should make an effort to stand up for employee while you have the chance, before you potentially have to disagree and commit.)If the candidate wasn't dealing in good faith, then, like I said, terminate. If the candidate wasn't dealing in good faith, then, like I said, terminate. 
reply

 
reply

 You not saving the world or anything like that, so just syphoon as much of the idiots vcs moneys to normal people lives. That is the goal with start ups right? 
reply

 
reply

 Most of us do not go to work to warm the seat in exchange for paycheck and poor performers are devastating for morale. It's difficult enough to manage how people perceive themselves with relation to others and their compensation and you do absolutely no favors to anyone with making this even more complicated by having a visibly incompetent employee being over-compensated. 
reply

 The other devs are going to be PISSED if they find out they're making less, and everything will start derailing.There's loads of other good devs available instead. There's loads of other good devs available instead. 
reply

 Once you take into account not only the net negative you're getting from your recent hire, but the effect on other employees too, the rational decision is to let them go. Think of it this way: intrinsic motivation and good climate for everyone else means not having someone higher paid but clearly less competent on the team. 
reply

 At a large company they likely wouldn't recover from this situation either - but they have the financial and management resources to just sandbag him with the worst jobs until he quits, which I'm assuming you can't afford. 
reply

 
reply

 edit: personally I think though that the company should take responsibility and make sure the employee either gets ramped up or a very smooth exit financially since the application probably meant he missed other options 
reply

 
reply

 It sucks to see an underperformer stick around and get lots of $$. It just tells your team that surrounding them with great people isn’t actually a priority.It also sucks to be a person in this position feeling like you’re underperforming for the long term. Or feel on the precipice of being let go without it happening.Gotta be OK being upfront with folks and ripping the bandaid off. It’s a day of feeling bummed on the team that’s better than months of team members feeling unmotivated.I’ll also say this should be really rare and if it keeps happening you need to review your hiring practices, as that’s actually the root cause of people getting into your team that aren’t a good fit. It also sucks to be a person in this position feeling like you’re underperforming for the long term. Or feel on the precipice of being let go without it happening.Gotta be OK being upfront with folks and ripping the bandaid off. It’s a day of feeling bummed on the team that’s better than months of team members feeling unmotivated.I’ll also say this should be really rare and if it keeps happening you need to review your hiring practices, as that’s actually the root cause of people getting into your team that aren’t a good fit. Gotta be OK being upfront with folks and ripping the bandaid off. It’s a day of feeling bummed on the team that’s better than months of team members feeling unmotivated.I’ll also say this should be really rare and if it keeps happening you need to review your hiring practices, as that’s actually the root cause of people getting into your team that aren’t a good fit. I’ll also say this should be really rare and if it keeps happening you need to review your hiring practices, as that’s actually the root cause of people getting into your team that aren’t a good fit. 
reply

 
reply

 
reply

 
reply

 
reply

 I liked to use GWC for all employees:
- do they ""get it""?
- do they want it?
- do they have the capacity to do it?All three must be yes for a role to be a good fit.It's nobody's fault; perhaps they -were- at a senior level at another org, but your definition of senior might be more aligned with the market.Ultimately, it doesn't matter. Their capabilities do not match the requirements of the business. Take the emotion out and it's an easy decision. All three must be yes for a role to be a good fit.It's nobody's fault; perhaps they -were- at a senior level at another org, but your definition of senior might be more aligned with the market.Ultimately, it doesn't matter. Their capabilities do not match the requirements of the business. Take the emotion out and it's an easy decision. It's nobody's fault; perhaps they -were- at a senior level at another org, but your definition of senior might be more aligned with the market.Ultimately, it doesn't matter. Their capabilities do not match the requirements of the business. Take the emotion out and it's an easy decision. Ultimately, it doesn't matter. Their capabilities do not match the requirements of the business. Take the emotion out and it's an easy decision. 
reply

 There's a classic paper out there...The Net Negative Producing Programmer by G. Gordon Schulmey> We've known since the early sixties, but have never come to grips with the implications that there are net negative producing programmers (NNPPs) on almost all projects, who insert enough spoilage to exceed the value of their production. So, it is important to make the bold statement: Taking a poor performer off the team can often be more productive than adding a good one. [6, p. 208] Although important, it is difficult to deal with the NNPP. Most development managers do not handle negative aspects of their programming staff well. This paper discusses how to recognize NNPPs, and remedial actions necessary for project success.(The early 60s may be a reference to (from https://news.ycombinator.com/item?id=421858 )> Gordon Bell, architect of the DEC VAX wrote ""High Tech Ventures"" and included this section on NNP's   Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer The Net Negative Producing Programmer by G. Gordon Schulmey> We've known since the early sixties, but have never come to grips with the implications that there are net negative producing programmers (NNPPs) on almost all projects, who insert enough spoilage to exceed the value of their production. So, it is important to make the bold statement: Taking a poor performer off the team can often be more productive than adding a good one. [6, p. 208] Although important, it is difficult to deal with the NNPP. Most development managers do not handle negative aspects of their programming staff well. This paper discusses how to recognize NNPPs, and remedial actions necessary for project success.(The early 60s may be a reference to (from https://news.ycombinator.com/item?id=421858 )> Gordon Bell, architect of the DEC VAX wrote ""High Tech Ventures"" and included this section on NNP's   Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer > We've known since the early sixties, but have never come to grips with the implications that there are net negative producing programmers (NNPPs) on almost all projects, who insert enough spoilage to exceed the value of their production. So, it is important to make the bold statement: Taking a poor performer off the team can often be more productive than adding a good one. [6, p. 208] Although important, it is difficult to deal with the NNPP. Most development managers do not handle negative aspects of their programming staff well. This paper discusses how to recognize NNPPs, and remedial actions necessary for project success.(The early 60s may be a reference to (from https://news.ycombinator.com/item?id=421858 )> Gordon Bell, architect of the DEC VAX wrote ""High Tech Ventures"" and included this section on NNP's   Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer (The early 60s may be a reference to (from https://news.ycombinator.com/item?id=421858 )> Gordon Bell, architect of the DEC VAX wrote ""High Tech Ventures"" and included this section on NNP's   Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer > Gordon Bell, architect of the DEC VAX wrote ""High Tech Ventures"" and included this section on NNP's   Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer    Negative Productivity is a principle that I claim is worthy of a Nobel Prize. 
   Normal principles of productivity assume that workers create positive output. 
   Brooks refined the concept of software productivity to express it in terms of 
   the ""mythical man month,"" and in software engineering, it is understood that 
   different programmers vary in their productivity by several orders of magnitude. 
   According to the principal of negative productivity, it is possible for an individual
   to produce bad results that others must then redo; hence, someone who is 
   very negatively productive can keep a whole team busy with damage control, 
   preventing the team from producing any output whatsoever.


Various locations of the paper - https://web.archive.org/web/20160305234708/http://pyxisinc.c... https://www.scribd.com/document/557220119/NNPP-ArticleAnd here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer And here it is discussed at C2 - https://wiki.c2.com/?NetNegativeProducingProgrammer 
reply

 
reply

 Most 4 year degrees aren't even sufficient, as they just teach academic knowledge and ""hacking"" skills (as in ""hacking your grades"") that produce juniors that leave a massive wake of technical debt unless checked.But yes, 6mo could be enough to get a particular employee productive, assuming they are highly engaged (ideally not remote) and have someone available to train them every day, and so on. But yes, 6mo could be enough to get a particular employee productive, assuming they are highly engaged (ideally not remote) and have someone available to train them every day, and so on. 
reply

 In fact, I'd argue that for anyone that knows some programming and in good GPA standing, 3 months is good enough for being productive. He can work on minor stuffs starting from 3 months. 
reply

 
reply

 In my experience, usually some level of existing expertise is considered a prerequisite for senior dev positions.* Although a whole year sounds really long for a senior dev to get going in any of those topic areas. * Although a whole year sounds really long for a senior dev to get going in any of those topic areas. 
reply

 I moved to something entirely different and it took me less than a week to find something that is useful to contribute to on the side while I am trying to better understand the context and everything we are doing.Being able to dive into different projects is, imho, a core skill for engineers and a good litmus test for seniority. Being able to dive into different projects is, imho, a core skill for engineers and a good litmus test for seniority. 
reply

 
reply

 It sounds more like legacy / messy systems with no dev/staging platform, or very bad documentation,
or even a terrible onboarding process if you really need 9 months for someone to deploy code. 
reply

 
reply

 
reply

 Linux Kernel development is a fairly organized C software, it is no different than working on Chromium or Unity, or like any other large codebase.It used to be easy to get lost.However now, for only $20 you have an expert coder, sitting by your side (and this is what ChatGPT does), then your learning curve is certainly reduced from the 6-9 months, which seems gigantic.Simulations, number manipulations, data analysis, etc, you have, thanks to ChatGPT, turnkey code solutions.It was tough, when you had no internet, no GitHub, no AI, no documentation, no Wikipedia, no StackOverflow sites, but now the barrier for entry to be productive is much lower.If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. It used to be easy to get lost.However now, for only $20 you have an expert coder, sitting by your side (and this is what ChatGPT does), then your learning curve is certainly reduced from the 6-9 months, which seems gigantic.Simulations, number manipulations, data analysis, etc, you have, thanks to ChatGPT, turnkey code solutions.It was tough, when you had no internet, no GitHub, no AI, no documentation, no Wikipedia, no StackOverflow sites, but now the barrier for entry to be productive is much lower.If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. However now, for only $20 you have an expert coder, sitting by your side (and this is what ChatGPT does), then your learning curve is certainly reduced from the 6-9 months, which seems gigantic.Simulations, number manipulations, data analysis, etc, you have, thanks to ChatGPT, turnkey code solutions.It was tough, when you had no internet, no GitHub, no AI, no documentation, no Wikipedia, no StackOverflow sites, but now the barrier for entry to be productive is much lower.If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. Simulations, number manipulations, data analysis, etc, you have, thanks to ChatGPT, turnkey code solutions.It was tough, when you had no internet, no GitHub, no AI, no documentation, no Wikipedia, no StackOverflow sites, but now the barrier for entry to be productive is much lower.If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. It was tough, when you had no internet, no GitHub, no AI, no documentation, no Wikipedia, no StackOverflow sites, but now the barrier for entry to be productive is much lower.If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. If you need one year to start deliver one basic feature, and you have ChatGPT on your side, then it means the onboarding process is broken. 
reply

 My question for you is -- what exactly do you do? What programming could you possibly be doing that is so trivial that you actually believe that ChatGPT is capable of solving these things? 
reply

 Yes self-learning is better, but it takes a much longer period of time, whereas if you have a tutor, then it saves lot of time (and companies don't often have such resources, which is where AI and books fill the gap).I strongly believe that LLMs are a serious helping tool for programming that helps programmers to onboard their project faster.Regarding more exotic techs, as a cousin of ChatGPT, Google Gemini used to be very very bad, but with Gemini 1.5-Pro you can feed it very long documents, and this is super helpful for specific implementation (e.g. the exotic processors), and it's, really, really not bad at programming, or at least pushing you in the right direction.Of course it's not autonomous (and whether it can be in the short-term on complex projects is unlikely), but it reduces the onboarding time, and this was the point raised in the conversation.A dev paired with a LLM is much much more productive.I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. I strongly believe that LLMs are a serious helping tool for programming that helps programmers to onboard their project faster.Regarding more exotic techs, as a cousin of ChatGPT, Google Gemini used to be very very bad, but with Gemini 1.5-Pro you can feed it very long documents, and this is super helpful for specific implementation (e.g. the exotic processors), and it's, really, really not bad at programming, or at least pushing you in the right direction.Of course it's not autonomous (and whether it can be in the short-term on complex projects is unlikely), but it reduces the onboarding time, and this was the point raised in the conversation.A dev paired with a LLM is much much more productive.I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. Regarding more exotic techs, as a cousin of ChatGPT, Google Gemini used to be very very bad, but with Gemini 1.5-Pro you can feed it very long documents, and this is super helpful for specific implementation (e.g. the exotic processors), and it's, really, really not bad at programming, or at least pushing you in the right direction.Of course it's not autonomous (and whether it can be in the short-term on complex projects is unlikely), but it reduces the onboarding time, and this was the point raised in the conversation.A dev paired with a LLM is much much more productive.I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. Of course it's not autonomous (and whether it can be in the short-term on complex projects is unlikely), but it reduces the onboarding time, and this was the point raised in the conversation.A dev paired with a LLM is much much more productive.I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. A dev paired with a LLM is much much more productive.I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. I suppose that you are concerned that it may push people to lose their jobs in the long-term. I am as well, but we still have some time ahead.I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. I don't like this situation either, but I have to recognize that it is a very helpful co-programming tool. 
reply

 Reading the documentation is basically never the hard part. If it's where most of your work is going, you're not doing hard work. Gemini 1.5-Pro may be able to summarize documentation, but it's what isn't there that hurts you. It may make for a helpful reference, but that wasn't the initial claim. The claim was that ""domain-specific knowledge can be solved with a $20 ChatGPT subscription"", and being frank, that's just stupid. The difference between a smart person and a domain expert is orders of magnitude more than an LLM is able to paper over.It's a struggle to replace even the most trivial paper pushing with an LLM. I'm sure we'll find something one day, but it's going to be doing a hell of a lot more than an LLM. It's a struggle to replace even the most trivial paper pushing with an LLM. I'm sure we'll find something one day, but it's going to be doing a hell of a lot more than an LLM. 
reply

 I've been in this position before and the hire dragged down team productivity for almost a year as we struggled to find something that he was competent at. Wasted untold hours assigning other skilled devs to help him because we were sure that all he needed was a ""bit more guidance.""After 9 months of this, our manager finally bit the bullet and he had to go. In nine months, we could not find a single task that he could be trusted to do and he had shown no improvement in that time.Learn from our mistake! After 9 months of this, our manager finally bit the bullet and he had to go. In nine months, we could not find a single task that he could be trusted to do and he had shown no improvement in that time.Learn from our mistake! Learn from our mistake! 
reply

 Secondly, while your process might be biased or “broken” this is a situation where someone got through when they shouldnt have. Some people are slow to ramp up but others just wont ever do it. Ive hired former Google engineers who ended up being in this exact same situation. It cracked my brain to have to do it, but letting them go was better for everyone.1. The team already knows theyre underperforming. If they know the titles and that salaries are banded to titles then they’ll easily infer they’re getting less than this person.2. Values around personal development, motivation are noble but you can improve from all sorts of starting conditions. I believe in a growth minded environment but also that its not everyones job to invest in people. Some people just dont have it.3. You can rescue it by thoughtfully letting them go. By adjusting your hiring process to avoid false positives (at the expense of some false negatives) and by talking to the team if it’s required.It sucks. Its never easy but its the kindest thing to do for you, for them, and for the team. 1. The team already knows theyre underperforming. If they know the titles and that salaries are banded to titles then they’ll easily infer they’re getting less than this person.2. Values around personal development, motivation are noble but you can improve from all sorts of starting conditions. I believe in a growth minded environment but also that its not everyones job to invest in people. Some people just dont have it.3. You can rescue it by thoughtfully letting them go. By adjusting your hiring process to avoid false positives (at the expense of some false negatives) and by talking to the team if it’s required.It sucks. Its never easy but its the kindest thing to do for you, for them, and for the team. 2. Values around personal development, motivation are noble but you can improve from all sorts of starting conditions. I believe in a growth minded environment but also that its not everyones job to invest in people. Some people just dont have it.3. You can rescue it by thoughtfully letting them go. By adjusting your hiring process to avoid false positives (at the expense of some false negatives) and by talking to the team if it’s required.It sucks. Its never easy but its the kindest thing to do for you, for them, and for the team. 3. You can rescue it by thoughtfully letting them go. By adjusting your hiring process to avoid false positives (at the expense of some false negatives) and by talking to the team if it’s required.It sucks. Its never easy but its the kindest thing to do for you, for them, and for the team. It sucks. Its never easy but its the kindest thing to do for you, for them, and for the team. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Is the poster a hiring manager who takes staffing problems to an internet forum instead of HR?Is the poster someone else on the team hoping to generate responses on HN to try to coerce management into taking action?The story is very one-sided and negative. How much of it is missing? How much is even true? Is the poster someone else on the team hoping to generate responses on HN to try to coerce management into taking action?The story is very one-sided and negative. How much of it is missing? How much is even true? The story is very one-sided and negative. How much of it is missing? How much is even true? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I've been at the opposite end of the spectrum at companies where the CTO wants a perfect team, and fired employees that weren't perfect or made (what we considered) reconcilable mistakes. We were all stressed out that we would be next on the chopping block. 
reply

 Your team members want to work with other great people who can help them deliver success - after all, the feeling of success is one of the most rewarding things a job can give you.I’ll also add that letting someone go (constructively) can be a net positive for them, if you can put them on a path for greater success in life elsewhere. Struggling to deliver for months or even years is also not a good use of their time.It might feel harsh, and it’s definitely a very difficult conversation to have, but I think if you remember that your responsibility is towards the team as a whole it can help you emotionally accept and navigate the situation. I’ll also add that letting someone go (constructively) can be a net positive for them, if you can put them on a path for greater success in life elsewhere. Struggling to deliver for months or even years is also not a good use of their time.It might feel harsh, and it’s definitely a very difficult conversation to have, but I think if you remember that your responsibility is towards the team as a whole it can help you emotionally accept and navigate the situation. It might feel harsh, and it’s definitely a very difficult conversation to have, but I think if you remember that your responsibility is towards the team as a whole it can help you emotionally accept and navigate the situation. 
reply

 No. Let them go and move on. This is the problem with title inflation and it happens all the time.How did you evaluate this candidate for this role exactly?Some candidates are great at acing the interviews (since 90% of the time it is measured on predictable leetcode puzzles) but as soon as the real work begins, the new hire lacks basic skills, asks for too much help on issues that can be solved by 5 second googling or they take extremely long on simple tasks.If you used Leetcode and yet this was the result, then perhaps you might need to find another way of evaluating actual 'senior' hires.A wrong hire is worse than no hire. Not only the money is spent but time is also wasted and will be wasted further by training. How did you evaluate this candidate for this role exactly?Some candidates are great at acing the interviews (since 90% of the time it is measured on predictable leetcode puzzles) but as soon as the real work begins, the new hire lacks basic skills, asks for too much help on issues that can be solved by 5 second googling or they take extremely long on simple tasks.If you used Leetcode and yet this was the result, then perhaps you might need to find another way of evaluating actual 'senior' hires.A wrong hire is worse than no hire. Not only the money is spent but time is also wasted and will be wasted further by training. Some candidates are great at acing the interviews (since 90% of the time it is measured on predictable leetcode puzzles) but as soon as the real work begins, the new hire lacks basic skills, asks for too much help on issues that can be solved by 5 second googling or they take extremely long on simple tasks.If you used Leetcode and yet this was the result, then perhaps you might need to find another way of evaluating actual 'senior' hires.A wrong hire is worse than no hire. Not only the money is spent but time is also wasted and will be wasted further by training. If you used Leetcode and yet this was the result, then perhaps you might need to find another way of evaluating actual 'senior' hires.A wrong hire is worse than no hire. Not only the money is spent but time is also wasted and will be wasted further by training. A wrong hire is worse than no hire. Not only the money is spent but time is also wasted and will be wasted further by training. 
reply

 If HR hired the person despite a mediocre rating then they're the ones that need to be sacked. 
reply

 Indeed, it feels as if the OP would be relatively happy if they'd hired a mediocre senior dev, but feel this guy isn't even that. 
reply

 It's unfortunate OP wrote plenty about their displeasure with the candidate but failed to tell us anything about their role in the hiring process, how well the job description matched the actual job requirements or how HR got the impression it did.But the situation as described strikes at a reason I've left previous jobs: the feeling that I couldn't trust the competency and integrity of those I worked with.Like the time our in-house recruiter presented me ""resumes"" they fabricated from linked-in profiles of people they wanted me to interview but who hadn't actually applied to our company, or the time I was pressured give passing reviews to candidates who couldn't pass basic programming tests from managers eager to hire loyal toadies.A small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover can't afford incompetent or perversely motivated HR people who ""hire at any cost"" candidates with mediocre reviews. But the situation as described strikes at a reason I've left previous jobs: the feeling that I couldn't trust the competency and integrity of those I worked with.Like the time our in-house recruiter presented me ""resumes"" they fabricated from linked-in profiles of people they wanted me to interview but who hadn't actually applied to our company, or the time I was pressured give passing reviews to candidates who couldn't pass basic programming tests from managers eager to hire loyal toadies.A small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover can't afford incompetent or perversely motivated HR people who ""hire at any cost"" candidates with mediocre reviews. Like the time our in-house recruiter presented me ""resumes"" they fabricated from linked-in profiles of people they wanted me to interview but who hadn't actually applied to our company, or the time I was pressured give passing reviews to candidates who couldn't pass basic programming tests from managers eager to hire loyal toadies.A small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover can't afford incompetent or perversely motivated HR people who ""hire at any cost"" candidates with mediocre reviews. A small outfit with a focus on personal development, intrinsic motivation, good climate, and low turnover can't afford incompetent or perversely motivated HR people who ""hire at any cost"" candidates with mediocre reviews. 
reply

 
reply

 Turns out he wrote some of the worst code I've seen, and worse, was unreceptive to feedback.Ended up firing him by the 3rd day. Ended up firing him by the 3rd day. 
reply

 No.""Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons?""You need to let them go. Whether you call it performance reason or not is your call. You made a mistake hiring the wrong person. It is your fault. But you need to correct it by letting them go.Doesn't matter whether you are a small team or large. Wrong hire is a wrong hire and things won't magically change just because you wish to. Fix the problem now and go back to hiring mode. Thank me later. Been there many times. ""Or should we make this (perhaps justifiably, after their misleading self-presentation) the first time we let someone go for performance reasons?""You need to let them go. Whether you call it performance reason or not is your call. You made a mistake hiring the wrong person. It is your fault. But you need to correct it by letting them go.Doesn't matter whether you are a small team or large. Wrong hire is a wrong hire and things won't magically change just because you wish to. Fix the problem now and go back to hiring mode. Thank me later. Been there many times. You need to let them go. Whether you call it performance reason or not is your call. You made a mistake hiring the wrong person. It is your fault. But you need to correct it by letting them go.Doesn't matter whether you are a small team or large. Wrong hire is a wrong hire and things won't magically change just because you wish to. Fix the problem now and go back to hiring mode. Thank me later. Been there many times. Doesn't matter whether you are a small team or large. Wrong hire is a wrong hire and things won't magically change just because you wish to. Fix the problem now and go back to hiring mode. Thank me later. Been there many times. 
reply

 They're not fit for the role, and to boot, they misrepresented themselves. Your process screwed up, but the key is to not compound that. I'd encourage you to still be decent and give a good severance, because this is ultimately your company's fuck up, and you should take your medicine. 
reply

 
reply

 Why should I stay at your company as a junior engineer if the people I’m teaching things to are senior to me?It devalues seniority and the general appearance of meritocracy in your organization to keep this person at senior. If you really want to be nice, give them the title and compensation that is appropriate for them. If you can’t do that, the right thing to do is to politely say it’s not a great fit for the role and let them go. It devalues seniority and the general appearance of meritocracy in your organization to keep this person at senior. If you really want to be nice, give them the title and compensation that is appropriate for them. If you can’t do that, the right thing to do is to politely say it’s not a great fit for the role and let them go. 
reply

 I.e., what if you agreed to let them keep their current job title, but gave them the responsibilities and salary of a junior dev until the skill gap was closed?Then (a) they have a way forward, (b) they avoid a career-limiting feature on their resume, and (c) you wouldn't be overpaying for their work.That's the best balance of kindness and fairness I can think of at the moment. Then (a) they have a way forward, (b) they avoid a career-limiting feature on their resume, and (c) you wouldn't be overpaying for their work.That's the best balance of kindness and fairness I can think of at the moment. That's the best balance of kindness and fairness I can think of at the moment. 
reply

 The rest of us work and learn honestly for years if not decades. If an employer asked me about my skillsets, I would be honest about my experience and deficiencies and negotiate honestly from there, and make plans to address the weaknesses accordingly.Finding a good dev fit for any given project or team is already hard enough when people are honest and well intentioned. We have no good credential system or standard way to suss out ability. It's how we get endless whiteboarding challenges and leetcode that isn't relevant to the actual job. Allowing charlatans into the mix just makes it worse for everyone, both employers and other employees and prospective employees.It's one thing if this person came in honestly and needed some specific remediation, maybe a particular technology or domain knowledge or whatever, but were generally competent. But that doesn't sound like what happened here. They lied to get their foot in the door, abusing the company's family-like atmosphere. They'll just drag everyone else down.Let them go and have a better hiring process next time. Ask your other employees for better ways to evaluate candidate ability if you need to. They are often better able to evaluate whether someone can do their job or lead them. But show them that you care about fairness, not charismatic lying ability. Finding a good dev fit for any given project or team is already hard enough when people are honest and well intentioned. We have no good credential system or standard way to suss out ability. It's how we get endless whiteboarding challenges and leetcode that isn't relevant to the actual job. Allowing charlatans into the mix just makes it worse for everyone, both employers and other employees and prospective employees.It's one thing if this person came in honestly and needed some specific remediation, maybe a particular technology or domain knowledge or whatever, but were generally competent. But that doesn't sound like what happened here. They lied to get their foot in the door, abusing the company's family-like atmosphere. They'll just drag everyone else down.Let them go and have a better hiring process next time. Ask your other employees for better ways to evaluate candidate ability if you need to. They are often better able to evaluate whether someone can do their job or lead them. But show them that you care about fairness, not charismatic lying ability. It's one thing if this person came in honestly and needed some specific remediation, maybe a particular technology or domain knowledge or whatever, but were generally competent. But that doesn't sound like what happened here. They lied to get their foot in the door, abusing the company's family-like atmosphere. They'll just drag everyone else down.Let them go and have a better hiring process next time. Ask your other employees for better ways to evaluate candidate ability if you need to. They are often better able to evaluate whether someone can do their job or lead them. But show them that you care about fairness, not charismatic lying ability. Let them go and have a better hiring process next time. Ask your other employees for better ways to evaluate candidate ability if you need to. They are often better able to evaluate whether someone can do their job or lead them. But show them that you care about fairness, not charismatic lying ability. 
reply

 Though, it would be a shame to not transfer them to sales or marketing, they sound very talented at that, at the very least. 
reply

 
reply

 Question: how does that ""helping others"" look like? In companies there's a planning phase with meetings, the work phase with assigned tickets - how does the helping fits in? Is it in those cases when somebody asks about features - unknown to him - in the codebase which somebody else knows about? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 That cuts both ways, of course -- while I have only seen one person who ""failed"" their probationary period, I have myself left a job during my probationary period when it turned out to not be what I'd been promised.  That's what the probationary period is for. 
reply

 You need to do the same thing with all of the employees involved in the hiring process, or get them out of the hiring process if that isn't their primary role and they are otherwise competent. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 The going rate for firing without cause is about 1/3rd of a month of salary per year of employment for an employee under 55 (?) on a permanent contract. On a yearly contract this is difficult - I would recommend hiring on permanent contracts because they are even seen as a positive.Demoting will mean that you overpay someone, but will at least clarify the new hierarchy to the team. Demoting will mean that you overpay someone, but will at least clarify the new hierarchy to the team. 
reply

 
reply

 I guess it’s the same amount of time in other countries. 
reply

 
reply

 Second thing is: most of our countries have a more direct conversation style. 
reply

 
reply

 
reply

 As a full-time employee of the company you're working for (i.e. not simply contracted in), you still have an employment contract (it's a right/required) which'll lay out the employment expectations (salary, hours per week, whether you can be required to work additional hours etc).We do also have contractors - i.e. those who work for an external company who are brought in for a specific project (or to provide easy-to-get-rid-of headcount).In my experience, working as a contractor isn't all that much more common than in the US. But people having some form of contract is, because basically all employees have one. We do also have contractors - i.e. those who work for an external company who are brought in for a specific project (or to provide easy-to-get-rid-of headcount).In my experience, working as a contractor isn't all that much more common than in the US. But people having some form of contract is, because basically all employees have one. In my experience, working as a contractor isn't all that much more common than in the US. But people having some form of contract is, because basically all employees have one. 
reply

 
reply

 When I was in France it was quite jarring and imo, it seems like it would be more stressful than at will employment as it's basically a yearly stress (as opposed to stress only when the economy is bad for example). But I think some European countries have some protections for contractors too, I just don't know if those apply to when your contract just doesn't get renewed. 
reply

 
reply

 
reply

 
reply

 You could put them on a project by themselves, with expectations on par with other senior devs. Let them provide you with the evidence you need to make your case. 
reply

 
reply

 * They still have an up-to-date resume* They may still have warm leads for other jobs* Employment with you is probably short enough, they can just leave it off their resume entirely * They may still have warm leads for other jobs* Employment with you is probably short enough, they can just leave it off their resume entirely * Employment with you is probably short enough, they can just leave it off their resume entirely 
reply

 I’ve learned that peers often won’t say what needs to be said even if
it impacts the team, but they will expect leads and managers to pick-up on the problem and handle it all the same. 
reply

 sales / executive track 
reply

 It helps both sides. 
reply

 I got hired on the spot because the conversation we had proved that I was not bullshitting anyone.It may be more difficult for a junior, but that’s not the topic of the post. It may be more difficult for a junior, but that’s not the topic of the post. 
reply

 
reply

 
reply

 
reply

 
reply

 A good strategy would be to have them be a lead on a minor project that requires technical chops and communication.  Ensure there is a daily standup and grind them on details and timelines.  Get them some juniors as direct reports to expose their lack of knowledge, then have meetings with these junior devs about project performance.The stress alone will probably make them quit.  Document as much as you can in emails and messaging systems. The stress alone will probably make them quit.  Document as much as you can in emails and messaging systems. 
reply

 > The stress alone will probably make them quit. Document as much as you can in emails and messaging systems.My god, no.  Unless you want to set a precedent for super-toxic, manipulative workplace environment.  (You don't get to pick&choose when evil happens: ""I learned it from watching you"".)  As well as expose the company to potentially an 8-figure harassment suit. My god, no.  Unless you want to set a precedent for super-toxic, manipulative workplace environment.  (You don't get to pick&choose when evil happens: ""I learned it from watching you"".)  As well as expose the company to potentially an 8-figure harassment suit. 
reply

 Do not do this. You do not need a “strategy”. Just do it! Rip off the band-aid. Either tell them the truth or give no reason even if asked. Reverse the mistake asap and get moving on your company’s mission. You don’t need one second more of this. Nor does anyone else at your organization. Do it today! Do it dispassionately. Do it as nicely as possible. You are going to feel bad because you are a good empathetic human.Some people will have a reaction. Some people will “have a reaction” to try to get more out of you. You are not responsible for either. You are responsible only for your own actions. Figure out what you should give them to be fair and add a little extra so you are sure it isn’t unfair.Plan what you will say and do in advance and have someone you trust with you in the meeting. Stick to your plan. Even the best hiring processes succeed only 50% of the time (though this goes beyond just a bad hire). Firing, and firing quickly is just as important as hiring well.Also remember that if an applicant tailors to a hiring process to this extent, that’s not just a failure of the process. It’s dishonesty. Even if the applicant were competent, you absolutely don’t want to entertain someone dishonest in your company. Some people will have a reaction. Some people will “have a reaction” to try to get more out of you. You are not responsible for either. You are responsible only for your own actions. Figure out what you should give them to be fair and add a little extra so you are sure it isn’t unfair.Plan what you will say and do in advance and have someone you trust with you in the meeting. Stick to your plan. Even the best hiring processes succeed only 50% of the time (though this goes beyond just a bad hire). Firing, and firing quickly is just as important as hiring well.Also remember that if an applicant tailors to a hiring process to this extent, that’s not just a failure of the process. It’s dishonesty. Even if the applicant were competent, you absolutely don’t want to entertain someone dishonest in your company. Plan what you will say and do in advance and have someone you trust with you in the meeting. Stick to your plan. Even the best hiring processes succeed only 50% of the time (though this goes beyond just a bad hire). Firing, and firing quickly is just as important as hiring well.Also remember that if an applicant tailors to a hiring process to this extent, that’s not just a failure of the process. It’s dishonesty. Even if the applicant were competent, you absolutely don’t want to entertain someone dishonest in your company. Also remember that if an applicant tailors to a hiring process to this extent, that’s not just a failure of the process. It’s dishonesty. Even if the applicant were competent, you absolutely don’t want to entertain someone dishonest in your company. 
reply

 
reply

 In most other countries you cannot fire people just for reasons like this.In other countries people have to resort to backhanded ways like the parent comment mentioned if you want to get someone off the payroll. In other countries people have to resort to backhanded ways like the parent comment mentioned if you want to get someone off the payroll. 
reply

 (country specific) 
reply

 I agree, but a lot of things that are not allowed but happen frequently.Doesnt matter what the law says is illegal, unless its enforced.Im not saying its a good thing to resort to such toxic measures.Parent comment said it is evil and should not be done, I just mentioned the reality that in most countries its one of the classical tried and tested method to bypass employment safety laws that almost rarely gets backlash.I myself dislike such toxic behaviour, but just stating the reality of what happens. Doesnt matter what the law says is illegal, unless its enforced.Im not saying its a good thing to resort to such toxic measures.Parent comment said it is evil and should not be done, I just mentioned the reality that in most countries its one of the classical tried and tested method to bypass employment safety laws that almost rarely gets backlash.I myself dislike such toxic behaviour, but just stating the reality of what happens. Im not saying its a good thing to resort to such toxic measures.Parent comment said it is evil and should not be done, I just mentioned the reality that in most countries its one of the classical tried and tested method to bypass employment safety laws that almost rarely gets backlash.I myself dislike such toxic behaviour, but just stating the reality of what happens. Parent comment said it is evil and should not be done, I just mentioned the reality that in most countries its one of the classical tried and tested method to bypass employment safety laws that almost rarely gets backlash.I myself dislike such toxic behaviour, but just stating the reality of what happens. I myself dislike such toxic behaviour, but just stating the reality of what happens. 
reply

 If after several months you decide you no longer want them that's different, but if you hire someone, they're no good, you can fire them pretty easily, assuming you've specified the probationary period in the contract. 
reply

 
reply

 
reply

 If someone's under-performing whilst in their probation period getting rid of them is incredibly easy. Outside of the probation period there's a bit more of a process, but it's still not particularly hard - all you actually need to be doing is documenting. 
reply

 
reply

 > It’s impossible to fire an employee for performance reason after the probation period in Germany.This is untrue.It's true that Kündigungsschutzgesetz does set a really high bar.You can get rid of them if they aren't delivering on assigned tasks, but you need to show that they are able (and are therefore simply unwilling). There's also the possibility of doing it if there are personal reasons (i.e. something in their life has impacted their suitability for the role) but that's more complex.That's why you see people get assigned easier tasks - they're being given tasks that are so noddy that anyone could do them (a failure to do so showing that they're not really trying).But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. This is untrue.It's true that Kündigungsschutzgesetz does set a really high bar.You can get rid of them if they aren't delivering on assigned tasks, but you need to show that they are able (and are therefore simply unwilling). There's also the possibility of doing it if there are personal reasons (i.e. something in their life has impacted their suitability for the role) but that's more complex.That's why you see people get assigned easier tasks - they're being given tasks that are so noddy that anyone could do them (a failure to do so showing that they're not really trying).But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. It's true that Kündigungsschutzgesetz does set a really high bar.You can get rid of them if they aren't delivering on assigned tasks, but you need to show that they are able (and are therefore simply unwilling). There's also the possibility of doing it if there are personal reasons (i.e. something in their life has impacted their suitability for the role) but that's more complex.That's why you see people get assigned easier tasks - they're being given tasks that are so noddy that anyone could do them (a failure to do so showing that they're not really trying).But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. You can get rid of them if they aren't delivering on assigned tasks, but you need to show that they are able (and are therefore simply unwilling). There's also the possibility of doing it if there are personal reasons (i.e. something in their life has impacted their suitability for the role) but that's more complex.That's why you see people get assigned easier tasks - they're being given tasks that are so noddy that anyone could do them (a failure to do so showing that they're not really trying).But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. That's why you see people get assigned easier tasks - they're being given tasks that are so noddy that anyone could do them (a failure to do so showing that they're not really trying).But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. But it's hard. The level they have to achieve is really low - something like 65% of a ""normal"" employee.But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. But Germany is just one country in Europe. Have a look at France, Italy, Belgium or even the UK - it's *nothing* like the level of stringency that Germany applies. 
reply

 
reply

 What is expensive in most European jurisdiction to fire a permanent contract after the initial trial period/first year contract without wrongdoing. But that is typically after a year or more.The reason here is that they are trying to be a employer which focus on personell development. Which is contradictive to capitalism and obviously they have not figured out yet, how to deal with situations like this. The reason here is that they are trying to be a employer which focus on personell development. Which is contradictive to capitalism and obviously they have not figured out yet, how to deal with situations like this. 
reply

 Capitalism doesnt have any 1 original author like Karl Marx, not everything can be made to fit in “capitalism” and villified.The latest devices you’re writing code and comments on here with are devices powered by latest silicon fabrication tech made by teams of engineers on whose careers, companies greatly invested long term to get to this.There are tons of capitalistic employers there who invest in their employees careers retain them and take their help to grow the company, even give them esops and stock options.High skilled labour isnt a cogwheel readily available on the market churning out of colleges, they are trained, retained and further developed throughout their careers to bring value to business and build new products.Capitalism isnt this great evil thing that wants to suck you dry and destroy you. It has perfectly healthy versions that give people a chance at Life, Liberty and the Pursuit of Happiness. The latest devices you’re writing code and comments on here with are devices powered by latest silicon fabrication tech made by teams of engineers on whose careers, companies greatly invested long term to get to this.There are tons of capitalistic employers there who invest in their employees careers retain them and take their help to grow the company, even give them esops and stock options.High skilled labour isnt a cogwheel readily available on the market churning out of colleges, they are trained, retained and further developed throughout their careers to bring value to business and build new products.Capitalism isnt this great evil thing that wants to suck you dry and destroy you. It has perfectly healthy versions that give people a chance at Life, Liberty and the Pursuit of Happiness. There are tons of capitalistic employers there who invest in their employees careers retain them and take their help to grow the company, even give them esops and stock options.High skilled labour isnt a cogwheel readily available on the market churning out of colleges, they are trained, retained and further developed throughout their careers to bring value to business and build new products.Capitalism isnt this great evil thing that wants to suck you dry and destroy you. It has perfectly healthy versions that give people a chance at Life, Liberty and the Pursuit of Happiness. High skilled labour isnt a cogwheel readily available on the market churning out of colleges, they are trained, retained and further developed throughout their careers to bring value to business and build new products.Capitalism isnt this great evil thing that wants to suck you dry and destroy you. It has perfectly healthy versions that give people a chance at Life, Liberty and the Pursuit of Happiness. Capitalism isnt this great evil thing that wants to suck you dry and destroy you. It has perfectly healthy versions that give people a chance at Life, Liberty and the Pursuit of Happiness. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 This is sort-of true. Employment law in the U.S. is by state, and there are only a handful of states that are truly at-will with no exceptions at all (and even in those there are federal exceptions for thew 'protected categories' - race, gender, sexual orientation, religion, national origin, disability that can be reasonably accommodated, etc.). Montana is not employment-at-will at all - you have a probationary period and can only be fired for cause there after that.America has a thing called the 'Uniform Commercial Code' which is basically templates for business and employment law that states can voluntarily pick and choose from (Louisiana, where the law is based on French legal tradition, uses it the least). But even with the UCC there is actually a lot of variation in state laws on stuff like this.In my experience outside of Montana having an explicit probationary period is rare in the U.S. You are seeing why in this thread. Your employer may be able to legally fire you at any time, but the social expectation is that they will get the hire right and not fire you for being a mismatch unless they absolutely have to. America has a thing called the 'Uniform Commercial Code' which is basically templates for business and employment law that states can voluntarily pick and choose from (Louisiana, where the law is based on French legal tradition, uses it the least). But even with the UCC there is actually a lot of variation in state laws on stuff like this.In my experience outside of Montana having an explicit probationary period is rare in the U.S. You are seeing why in this thread. Your employer may be able to legally fire you at any time, but the social expectation is that they will get the hire right and not fire you for being a mismatch unless they absolutely have to. In my experience outside of Montana having an explicit probationary period is rare in the U.S. You are seeing why in this thread. Your employer may be able to legally fire you at any time, but the social expectation is that they will get the hire right and not fire you for being a mismatch unless they absolutely have to. 
reply

 
reply

 
reply

 
reply

 This is cool and all, but company culture is a two way street. Presumably you have this focus because you expect that employees appreciate it and in return are happier, more resilient and ultimately more productive because of it.
But you can’t have this with someone who misrepresented themselves from the moment they walked in.Consider also how this looks for other employees. They were hired for a job, do it well and in return got a great employer who cares about their wellbeing. But if you keep this person on, then you devalue the effort everyone else puts in, because apparently you can just lie on your resume and get the same great treatment as everyone else without any consequences. Consider also how this looks for other employees. They were hired for a job, do it well and in return got a great employer who cares about their wellbeing. But if you keep this person on, then you devalue the effort everyone else puts in, because apparently you can just lie on your resume and get the same great treatment as everyone else without any consequences. 
reply

 
reply

 Letting go of someone sucks, but offset that against upsetting your current good, hard-working team. The quicker you let this person go, the more easily they can pretend the job never happened on their CV. 
reply

 
reply

 How is having having good negotiating skills and being well-prepared considered misleading self-representation?> We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.So you're telling me you'd be the first manager in history who noticed someone's lacking in experience before your team members do? I think not. You're also giving away the possible fact that there might be enough of a disparity between the pay of a new hire and a (company) senior that the current employees might get upset.> they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.How would you know? If you just hired them, you don't know, and obviously your hiring process doesn't work, so, again, you know nothing.The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. > We probably can't reduce the salary, so more productive devs might also be offended if they become aware of it.So you're telling me you'd be the first manager in history who noticed someone's lacking in experience before your team members do? I think not. You're also giving away the possible fact that there might be enough of a disparity between the pay of a new hire and a (company) senior that the current employees might get upset.> they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.How would you know? If you just hired them, you don't know, and obviously your hiring process doesn't work, so, again, you know nothing.The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. So you're telling me you'd be the first manager in history who noticed someone's lacking in experience before your team members do? I think not. You're also giving away the possible fact that there might be enough of a disparity between the pay of a new hire and a (company) senior that the current employees might get upset.> they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.How would you know? If you just hired them, you don't know, and obviously your hiring process doesn't work, so, again, you know nothing.The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. > they might at some point realize they can't catch up to the level they were hired at without years of dedicated effort and thus quit or ""quit internally"", making our investment pointless.How would you know? If you just hired them, you don't know, and obviously your hiring process doesn't work, so, again, you know nothing.The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. How would you know? If you just hired them, you don't know, and obviously your hiring process doesn't work, so, again, you know nothing.The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. The fact firing is even an option, when you fucked up, and that this situation is even a thing, is telling me you're obviously oblivious to what ""culture"" you actually have.Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. Then again...> It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. > It would probably take another 6-12 months of intense training to get them somewhat productiveHave you already spent 6-12 months of intense training on them? Then fire. Have you already spent 6-12 months of intense training on them? Then fire. 
reply

 One way that breakdowns can happen is if people are too subtle in their reviews.  For example, damning with faint praise, or being overly constructive.  Lots of people aren't good at reading comprehension, and even less good when wading through the piles of communication noise that many companies tend to generate.  Combining free-form text with unambiguous ""multiple-choice"" options on the interview reports can help (e.g., interviewer writes constructive things about growth potential, but clicks the ""lukewarm"" or ""not for this role"" radio button).Another way is if different interviewers had very different impressions, and one interviewer's takes precedence.  (This can also happen the other direction: false-negative.  As a team lead, I gave a very strong recommendation to hire this one very determined designer-y frontend engineer.  But another team lead, who would have temporary loan of the hire before my team's project spun up, proceeded to Leetcode-haze them.  I wouldn't say the candidate bombed it, but rather that the company bombed it.  The company really didn't want to hire someone who got a strong negative, so they said no.  Rejected candidate instead went to a different super-cool engineering-driven company, and I soon saw them featured in a tech demo video of that company on LinkedIn, explaining to customers this neat new product thing they built.)Other ways? Another way is if different interviewers had very different impressions, and one interviewer's takes precedence.  (This can also happen the other direction: false-negative.  As a team lead, I gave a very strong recommendation to hire this one very determined designer-y frontend engineer.  But another team lead, who would have temporary loan of the hire before my team's project spun up, proceeded to Leetcode-haze them.  I wouldn't say the candidate bombed it, but rather that the company bombed it.  The company really didn't want to hire someone who got a strong negative, so they said no.  Rejected candidate instead went to a different super-cool engineering-driven company, and I soon saw them featured in a tech demo video of that company on LinkedIn, explaining to customers this neat new product thing they built.)Other ways? Other ways? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Also, this was HR's mistake, so give them in no uncertain terms your decision to let this person go, and let them handle the rest. 
reply

 
reply

 If they lied, fire them.If they were honest during interview and their previous company salary, wasnt higher than your junior pay, give them an option for either demotion or resignation (with decent severance if you can afford to so that they have safety net to look for new jobs)If you were going to hire someone junior too in the short term, then just demote this new dev to his real level.If not, and you desperately need senior dev, make this current new dev resign or fire them. If they were honest during interview and their previous company salary, wasnt higher than your junior pay, give them an option for either demotion or resignation (with decent severance if you can afford to so that they have safety net to look for new jobs)If you were going to hire someone junior too in the short term, then just demote this new dev to his real level.If not, and you desperately need senior dev, make this current new dev resign or fire them. If you were going to hire someone junior too in the short term, then just demote this new dev to his real level.If not, and you desperately need senior dev, make this current new dev resign or fire them. If not, and you desperately need senior dev, make this current new dev resign or fire them. 
reply

 
reply

 My recommendation would, for his sake and yours, to let him go sooner rather than later. Working in the wrong position is also going to tank his self confidence and will do him no favours. 
reply

 Really? You want low turnover in people who lie to you in the interview and are a drag on the rest of the team?That’s exactly how you get high turnover from the good-fit people. That’s exactly how you get high turnover from the good-fit people. 
reply

 You need to provide feedback for your employee. Have a frank discussion about their performance and try and find out what is the actual problem. Assuming there has been little to no actual conversations, it seems you are merely projecting various ailments here. Maybe their cat died, maybe whatever. We simply do not know. 
reply

 
reply

 
reply

 To your face they are worried and ""what will we do, oh no what a mistake we all made"", behind your back they think you are suckers (and based on your post they are probably correct). 
reply

 
reply

"
10,,Santé (YC S23) Is Hiring,https://www.ycombinator.com/companies/sante/jobs/Xw3ujU8-technical-account-manager,"Hi,
About Santé
Santé is a fast-growing, New York based startup making a modern point-of-sale system for liquor stores. We streamline operations for liquor stores with our powerful vertical software.
If you're excited to shape the future of the liquor industr…",2024-06-14T12:01:08Z,"All-in-one POS for liquor stores Hi, About Santé Santé is a fast-growing, New York based startup making a modern point-of-sale system for liquor stores. We streamline operations for liquor stores with our powerful vertical software. If you're excited to shape the future of the liquor industry, we’d love to work with you. We seek driven, ambitious people excited to make an impact through innovation. About the role With fast growth and sales consistently beating quotas, we need our first Technical Account Manager to complete product installations for new customers and own customer service for all customers. Our founders have been leading these efforts, but the sheer volume of new customers now requires that we bring on a specialist to take over. You'll work hand-in-hand with the two founders (CEO leading sales and CTO leading product development). No two days will be the same. You'll directly engage with customers daily to understand needs, answer questions, and ensure successful rollouts. As an early member, you'll also help build processes to make our implementation team even more successful. Our internal tools will allow you to deploy our product so you don't need to be a software engineer to succeed in this role but we are looking for someone who is a fast learner and wants to impress customers by going the extra mile. Responsibilities Skills How to apply Our interview process is short and to the point, and we can make a final decision in days. We respect your time and will communicate clearly with you throughout the process. Modern POS for Liquor Stores © 2024 Y Combinator"
11,,Poll: Is AI Hype a Bubble?,https://news.ycombinator.com/item?id=40685752,Comments,2024-06-14T22:30:30Z,"Do you believe the current excitement surrounding AI is: AI feels to me like it's in a similar state. ChatGPT was a genuinely exciting breakthrough, and because of the previous example of web, everyone instantly wants to see ""LLMs as a platform"" take off. This has not happened whatsoever. I literally only use ChatGPT. I don't even use Copilot because it's janky and doesn't solve any real problems for me. I guess I sometimes use the RAG-based applications (like docs pages now support a ChatGPT interface), but these are basically ChatGPT with some extra context injected in-- so, ChatGPT. You talk to any of these AI companies and they all admit they're just using the AI label to fundraise and behind the scenes it's either a CRUD app or the thinnest GPT integration in front. I literally don't use any other AI applications. They're all annoying and flooding the web and it is pure clutter everywhere that adds no benefit ever, all because everyone wants to see ""LLMs as a platform.""I grew up being a huge fan of YC, and I would respect them so much more if they would take the contrarian (but in my humble opinion correct) view and say actually, judging by the structural evidence and actual results, it's not clear what exactly AI has to offer right now, and we're going to return to PG's founding philosophy and continue funding unsexy and unpopular but ultimately actually important things. I grew up being a huge fan of YC, and I would respect them so much more if they would take the contrarian (but in my humble opinion correct) view and say actually, judging by the structural evidence and actual results, it's not clear what exactly AI has to offer right now, and we're going to return to PG's founding philosophy and continue funding unsexy and unpopular but ultimately actually important things. 
reply

 Apple has heavily integrated AI into it's systems and apps. Every other major tech company is actively adding it to their apps and systems in many different ways. They aren't talking about future potential. We are years past that already. It's here. That's it. We aren't trying to convince people that AI is here to stay. Rather, we are already talking about a post-AI/LLM world. Crypto never really got to that state.What was crypto's big thing? Ape pictures.> I literally don't use any other AI applications.Linux users will get there too. Especially if you start using ANY tech used by any of the major players. You are already using it, and you don't even realize it. What was crypto's big thing? Ape pictures.> I literally don't use any other AI applications.Linux users will get there too. Especially if you start using ANY tech used by any of the major players. You are already using it, and you don't even realize it. > I literally don't use any other AI applications.Linux users will get there too. Especially if you start using ANY tech used by any of the major players. You are already using it, and you don't even realize it. Linux users will get there too. Especially if you start using ANY tech used by any of the major players. You are already using it, and you don't even realize it. 
reply

 
reply

 So, you are already using more than just ChatGPT. And we both know you aren't going to switch off Mac and iPhone.> Time will tell23 hours... so yeah, not long at all. > Time will tell23 hours... so yeah, not long at all. 23 hours... so yeah, not long at all. 
reply

 With all the hype it would be quite difficult to not ""realize"" where it is allegedly being used.  There is a comical effort to claim that ""AI"" is being used in everything. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 The current wave of model development, sharing, and fine-tuning is creating a technical ecosystem that supports making computer programs that are able to interact with unstructured data in ways that historically have been impossible.That most people have only seen that used to make a chatbot that can answer unstructured questions with unstructured and occasionally hallucinated answers says nothing about the profound ways those capabilities will shift what kinds of problems we point computers at in the future.Let's take a classic cataloging problem like managing a small library inventory. Say you're a software company and you have a few bookshelves of programming books people can borrow. And you want to make it possible for people to search the list of books you have in stock to see if there's something they want to borrow before they walk down. This is classic Web 1.0 stuff - a mySQL database with a books table and an authors table, indulge your third normal form fetish. And maybe you integrate with an ISBN catalog by sending it nicely structured XML queries so you can use a scanner to scan the barcodes, pull down and transform structured data about each book, and use it to populate your database. Make an old school HTML form to search it by title, author, publisher, date, etc...Nowadays, you can take a picture of the spines on the shelves; ask a multimodal AI to figure out what books that means you've got; feed that, plus plain text search access to an online catalog, to another model to get it to build a nice big document describing all the books; feed that as context into a chatbot librarian and let it help users find books. Set up a webcam pointing at the shelf and periodically take new pictures to keep track of who took what books.Think about the massive amounts of efforts businesses go to to create information technology systems to structure the state of their business, interactions among their employees, data about their customers and suppliers, integration with external systems, and to schematize and constrain the processes of their business. And now start to think about how that all changes when I can skip the structure part.We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. That most people have only seen that used to make a chatbot that can answer unstructured questions with unstructured and occasionally hallucinated answers says nothing about the profound ways those capabilities will shift what kinds of problems we point computers at in the future.Let's take a classic cataloging problem like managing a small library inventory. Say you're a software company and you have a few bookshelves of programming books people can borrow. And you want to make it possible for people to search the list of books you have in stock to see if there's something they want to borrow before they walk down. This is classic Web 1.0 stuff - a mySQL database with a books table and an authors table, indulge your third normal form fetish. And maybe you integrate with an ISBN catalog by sending it nicely structured XML queries so you can use a scanner to scan the barcodes, pull down and transform structured data about each book, and use it to populate your database. Make an old school HTML form to search it by title, author, publisher, date, etc...Nowadays, you can take a picture of the spines on the shelves; ask a multimodal AI to figure out what books that means you've got; feed that, plus plain text search access to an online catalog, to another model to get it to build a nice big document describing all the books; feed that as context into a chatbot librarian and let it help users find books. Set up a webcam pointing at the shelf and periodically take new pictures to keep track of who took what books.Think about the massive amounts of efforts businesses go to to create information technology systems to structure the state of their business, interactions among their employees, data about their customers and suppliers, integration with external systems, and to schematize and constrain the processes of their business. And now start to think about how that all changes when I can skip the structure part.We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. Let's take a classic cataloging problem like managing a small library inventory. Say you're a software company and you have a few bookshelves of programming books people can borrow. And you want to make it possible for people to search the list of books you have in stock to see if there's something they want to borrow before they walk down. This is classic Web 1.0 stuff - a mySQL database with a books table and an authors table, indulge your third normal form fetish. And maybe you integrate with an ISBN catalog by sending it nicely structured XML queries so you can use a scanner to scan the barcodes, pull down and transform structured data about each book, and use it to populate your database. Make an old school HTML form to search it by title, author, publisher, date, etc...Nowadays, you can take a picture of the spines on the shelves; ask a multimodal AI to figure out what books that means you've got; feed that, plus plain text search access to an online catalog, to another model to get it to build a nice big document describing all the books; feed that as context into a chatbot librarian and let it help users find books. Set up a webcam pointing at the shelf and periodically take new pictures to keep track of who took what books.Think about the massive amounts of efforts businesses go to to create information technology systems to structure the state of their business, interactions among their employees, data about their customers and suppliers, integration with external systems, and to schematize and constrain the processes of their business. And now start to think about how that all changes when I can skip the structure part.We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. Nowadays, you can take a picture of the spines on the shelves; ask a multimodal AI to figure out what books that means you've got; feed that, plus plain text search access to an online catalog, to another model to get it to build a nice big document describing all the books; feed that as context into a chatbot librarian and let it help users find books. Set up a webcam pointing at the shelf and periodically take new pictures to keep track of who took what books.Think about the massive amounts of efforts businesses go to to create information technology systems to structure the state of their business, interactions among their employees, data about their customers and suppliers, integration with external systems, and to schematize and constrain the processes of their business. And now start to think about how that all changes when I can skip the structure part.We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. Think about the massive amounts of efforts businesses go to to create information technology systems to structure the state of their business, interactions among their employees, data about their customers and suppliers, integration with external systems, and to schematize and constrain the processes of their business. And now start to think about how that all changes when I can skip the structure part.We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. We are not yet used to thinking about how to solve problems with computers that don't need their inputs to be rigorously structured. When we start realizing what that means, we're in a different game entirely. 
reply

 I'm just not quite sure I buy this. It feels to me like there's a light motte-and-bailey going on, where supposedly AI is going to be a paradigm shift that changes the very notion of what's possible, but the actual proposals are mostly about LLMs being a finite-multiplier enhancement for the existing ability of software to model and optimize processes.In particular, a big fraction of the concrete proposals seem to be about making business processes more efficient. Are businesses generally constrained by this to begin with? Like businesses don't seem to be sprinting at the edge of software technology to get as much efficiency as they can, buying diminishing returns from existing tech and waiting eagerly for the next wave of improvements. Judging by revealed preferences, it just doesn't seem like a very high priority for them.Taking your automated library example, that sounds very cool from a hacker/tinkerer perspective and I'm sure it would result in some efficiency improvements, but it just doesn't seem like, no offense to anyone, a problem that needs urgent attention. How does this significantly improve the situation for anyone involved?Of course it's true that we don't know what we don't know, and I don't disagree that often technology changes the world in unpredictable ways or even that current AI could possibly lead to this. At risk of being the dropbox-is-just-rsync guy, I'm just skeptical about the following pattern:(1) some new tech gets invented that's supposedly the next internet;(2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. In particular, a big fraction of the concrete proposals seem to be about making business processes more efficient. Are businesses generally constrained by this to begin with? Like businesses don't seem to be sprinting at the edge of software technology to get as much efficiency as they can, buying diminishing returns from existing tech and waiting eagerly for the next wave of improvements. Judging by revealed preferences, it just doesn't seem like a very high priority for them.Taking your automated library example, that sounds very cool from a hacker/tinkerer perspective and I'm sure it would result in some efficiency improvements, but it just doesn't seem like, no offense to anyone, a problem that needs urgent attention. How does this significantly improve the situation for anyone involved?Of course it's true that we don't know what we don't know, and I don't disagree that often technology changes the world in unpredictable ways or even that current AI could possibly lead to this. At risk of being the dropbox-is-just-rsync guy, I'm just skeptical about the following pattern:(1) some new tech gets invented that's supposedly the next internet;(2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. Taking your automated library example, that sounds very cool from a hacker/tinkerer perspective and I'm sure it would result in some efficiency improvements, but it just doesn't seem like, no offense to anyone, a problem that needs urgent attention. How does this significantly improve the situation for anyone involved?Of course it's true that we don't know what we don't know, and I don't disagree that often technology changes the world in unpredictable ways or even that current AI could possibly lead to this. At risk of being the dropbox-is-just-rsync guy, I'm just skeptical about the following pattern:(1) some new tech gets invented that's supposedly the next internet;(2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. Of course it's true that we don't know what we don't know, and I don't disagree that often technology changes the world in unpredictable ways or even that current AI could possibly lead to this. At risk of being the dropbox-is-just-rsync guy, I'm just skeptical about the following pattern:(1) some new tech gets invented that's supposedly the next internet;(2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. (1) some new tech gets invented that's supposedly the next internet;(2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. (2) no one can quite explain or plausibly hypothesize how; but(3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. (3) in the meantime, a wave of companies start building ""platforms"" and selling shovels to people who will supposedly later build the actual useful thing. 
reply

 I also use Claude Opus for activities that need large context window. But the second a better alternative appears, most people will switch to it. Because - why not?The market already stabilized somewhat - you can use lower quality models locally for simpler stuff and paid models (better quality in case of ChatGPT-4, larger context window for Claude Opus[0]) when you need something more advanced.[0] I'm not sure what is the current status of Gemini Pro with 1M context window, but from what I heard it's too expensive for any practical use. The market already stabilized somewhat - you can use lower quality models locally for simpler stuff and paid models (better quality in case of ChatGPT-4, larger context window for Claude Opus[0]) when you need something more advanced.[0] I'm not sure what is the current status of Gemini Pro with 1M context window, but from what I heard it's too expensive for any practical use. [0] I'm not sure what is the current status of Gemini Pro with 1M context window, but from what I heard it's too expensive for any practical use. 
reply

 
reply

 I think a better analogy might be self driving cars: probably going to be as impactful as early hype people guessed eventually, but on much longer timescales than people originally thought. 
reply

 I also expect to see markets and hype go up and down because these things go in cycles.If you expect it to completely change the world in the next couple of years, you're probably wrong. And if you think that it's a useless gimmick with a giant hype bubble around it, and that it will disappear as soon as the hype dies down, you're also very wrong. If you expect it to completely change the world in the next couple of years, you're probably wrong. And if you think that it's a useless gimmick with a giant hype bubble around it, and that it will disappear as soon as the hype dies down, you're also very wrong. 
reply

 My most “bold” take is that it’s going to end up as a loss leader consolidated at big companies. It’s much too expensive to run at scale and we will see a ton of companies dry up who can’t monetize it. I think we’ll see a general inability to monetize it even at the enterprise level. 
reply

 Well, it depends. If you already have a lot of your own data, and can rent powerful hardware to train your model (and competent people do actually set up and manage the whole process), you can get a very powerful engine with interesting insights that will be relevant to you (and possibly to you only), with the effect probably proportional to how specific your data is. After the training phase, actually using the model doesn't need to be that expensive. 
reply

 But at the same time it is going to drastically change the way people work. In a very close future every single programmer is going to have chatgpt open. Every single marketer, researcher, lawyer, doctor etc...It's a revolution the same scale of internet itself. Everybody was on google everyday at some point, everybody will be on an AI at some point (if not most of the time they interact with a device) It's a revolution the same scale of internet itself. Everybody was on google everyday at some point, everybody will be on an AI at some point (if not most of the time they interact with a device) 
reply

 I thought that for a little bit, paid for it for several months, but it's not enough better imo - and the hallucination rabbit holes burn harder than the productive chats make up for.But something like it probably, it just might be harder to say oh yeah LLMs did that it wasn't over hyped after all. Augmented search, or just improvements to search with a more familiar presentation. Summarise the small amount of information from blogspam and collapse them all, turn a NL question into a few different salient keyword searches, that sort of thing. I haven't tried Kagi's AI yet (I've only used it at all for a few searches while DDG was down recently) but maybe they're doing something interesting or worth watching at least. But something like it probably, it just might be harder to say oh yeah LLMs did that it wasn't over hyped after all. Augmented search, or just improvements to search with a more familiar presentation. Summarise the small amount of information from blogspam and collapse them all, turn a NL question into a few different salient keyword searches, that sort of thing. I haven't tried Kagi's AI yet (I've only used it at all for a few searches while DDG was down recently) but maybe they're doing something interesting or worth watching at least. 
reply

 
reply

 
reply

 The information resources already exist, if people can't be bothered to access them the old-fashioned way that guarantees accuracy then they're not fit for purpose in their role, and should be fired on the spot.Also heard about accountants doing maths in ChatGPT—it ain't Wolfram Alpha lol. Also heard about accountants doing maths in ChatGPT—it ain't Wolfram Alpha lol. 
reply

 
reply

 Agreed that chatbots will change things. Hard disagree that it's on the scale of the internet. The internet at large touches way more than the habits of white collar workers 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Hell will freeze over before I consider using proprietary software for programming. 
reply

 My guess is that we're in for an AI winter in ~12-18mo as most AI startups fail and investors lose their shirts on a bunch of bets, but a few good use cases rise from the ashes.OpenAI is going to walk away with a tooon of VC money from startups spending on their APIs over the next year though. OpenAI is going to walk away with a tooon of VC money from startups spending on their APIs over the next year though. 
reply

 Love it.Nods to the folk wisdom that inventors rarely foresee how their inventions will ultimately play out. Nods to the folk wisdom that inventors rarely foresee how their inventions will ultimately play out. 
reply

 please unpack how LLMs are “problem makers” in “most” domains? 
reply

 PhishingBuggy generated codeCheating in online coursesChatBots that try to do too much and do it worse than real human service reps, like that one that wrongly assured a customer that their airline ticket was refundableDeluge of low-value generated content taking attention and revenue away from high-value content creators Buggy generated codeCheating in online coursesChatBots that try to do too much and do it worse than real human service reps, like that one that wrongly assured a customer that their airline ticket was refundableDeluge of low-value generated content taking attention and revenue away from high-value content creators Cheating in online coursesChatBots that try to do too much and do it worse than real human service reps, like that one that wrongly assured a customer that their airline ticket was refundableDeluge of low-value generated content taking attention and revenue away from high-value content creators ChatBots that try to do too much and do it worse than real human service reps, like that one that wrongly assured a customer that their airline ticket was refundableDeluge of low-value generated content taking attention and revenue away from high-value content creators Deluge of low-value generated content taking attention and revenue away from high-value content creators 
reply

 I do love using ChatGPT for fun stuff like “write me a recipe for enchiladas that’s also a country western song.” My kids and I find it hilarious. 
reply

 In retrospect it probably detected it generated something it didn't have the IP rights to give me, but ever since then I've described the state of the art as ""like talking through the intercom at a McDonald's drive-thru, but every now and then the attendant says 'sorry, can we start over? I got distracted thinking about killing you.'"" 
reply

 
reply

 
reply

 But Copilot has revolutionized my coding. I have to code in many languages on a daily basis: Typescript, tsx, Css, Html, Dart, config files (like docker[compose], k8s, Ansible, json configs), c#, python. I'm only fluent in c# and ts. The fact that I do not need to remember the syntax for all the other is a big game changer. I was able to be immediately productive in a new language/framework after reading the documents. Previously it took some time before I ramped up, and then it would be lost after some inactivity. I'm not talking about important concepts, or CS fundamentals. I'm talking about specific ways things can be done in each language/framework.  Copilot makes me 1000x more productive in this part. I'm still limited by my mental bandwidth, so I'm probably 2x more productive on an average day.I also use ChatGPT, and run some models locally just to play with them, but all happen much less frequently than my colleague disrupting discussions with ChatGPT content. I also use ChatGPT, and run some models locally just to play with them, but all happen much less frequently than my colleague disrupting discussions with ChatGPT content. 
reply

 I'll give it a try next year, maybe it improves to the point where the number of suboptimal suggestions falls to 20% or so, it would be much easier then. 
reply

 LLMs have a tendency to hallucinate at a rate that makes them untrustworthy at scale w/o a human in the loop. The more open ended the prompt, the higher the hallucination rate. Here I mean minor things, like swapping a negative, that can fundamentally change a result.Thus, any place that we trust computer to perform reliable logic, we cannot trust an LLM because it's error rate is too high.Methods such as RAG can box in the LLM to keep them on track, but this error rate means that they can never be mission critical, a-la business logic, and keeps them to being a toy.Where LLMs are game changers are ETL pipelines / data scrapers. I used to work at Clearbit where we built thousands of lines of code just to extract the address of a company's HQ or if a company is owed by another org. LLMs just do that... for free. With LLMs data extraction from free form text is now a solved problem, and thats god damn mindblowing for me. Thus, any place that we trust computer to perform reliable logic, we cannot trust an LLM because it's error rate is too high.Methods such as RAG can box in the LLM to keep them on track, but this error rate means that they can never be mission critical, a-la business logic, and keeps them to being a toy.Where LLMs are game changers are ETL pipelines / data scrapers. I used to work at Clearbit where we built thousands of lines of code just to extract the address of a company's HQ or if a company is owed by another org. LLMs just do that... for free. With LLMs data extraction from free form text is now a solved problem, and thats god damn mindblowing for me. Methods such as RAG can box in the LLM to keep them on track, but this error rate means that they can never be mission critical, a-la business logic, and keeps them to being a toy.Where LLMs are game changers are ETL pipelines / data scrapers. I used to work at Clearbit where we built thousands of lines of code just to extract the address of a company's HQ or if a company is owed by another org. LLMs just do that... for free. With LLMs data extraction from free form text is now a solved problem, and thats god damn mindblowing for me. Where LLMs are game changers are ETL pipelines / data scrapers. I used to work at Clearbit where we built thousands of lines of code just to extract the address of a company's HQ or if a company is owed by another org. LLMs just do that... for free. With LLMs data extraction from free form text is now a solved problem, and thats god damn mindblowing for me. 
reply

 I'm using AI today to generate real business value in a couple of different industries but also feel that it is simultaneously overhyped for today and underhyped for the future. If the question is just ""is it a bubble"" the answer is obviously yes, it will come back down. But, how far is down and how long will it take for the world to catch up to the market? Maybe not that long. 
reply

 When we have developed catalogues of models and other tools and we start training an agent to learn how to create arbitrary graphs of/programs with those tools we might be close.  Think of Demis' ""play any video game"" AI but with successively more complex real world problems and sensor data. 
reply

 I think one of the major problems is outside technical circles, where I get the impression plenty of people think we're already there.  It's not a recent thing either, I remember having this impression last year, and it's just been growing since. 
reply

 But people tend to conflate knowledge for intelligence, many thinks that Google search is intelligent as well etc. 
reply

 
reply

 I think as the technology adapts, the utility will be having chips on your existing hardware that can provide this functionality. Will LLMs always need super high end gpu's to process requests or will the algorithms improve enough to allow quick speeds with lesser hardware? I will tell you one thing for certain. NVDA's stock price is not based on any possibility of algorithm improvements and only based on the idea that more and more resources will be needed. It's based on the idea that there will always be the need for massive data centers to process these requests.. 
reply

 
reply

 
reply

 All in all looking at the technological innovations of the past century, I can't help but feel the technological novelty of previous growth spurts are just not achievable anymore.More importantly, we cannot go one day without being told what a happy and advanced wonderful western enlightened era given us: a technological cargo cult with a global serfdom ready to manifest old powers. More importantly, we cannot go one day without being told what a happy and advanced wonderful western enlightened era given us: a technological cargo cult with a global serfdom ready to manifest old powers. 
reply

 
reply

 It'll be adopted by companies in some way or another and I am very hopeful for things like AI tutors which can actually significantly improve learning but we're definitely going to see a pullback when revenue never materializes. 
reply

 Prospects in 1 year? Likely overhyped.
Prospects in 10 years? We are unprepared for how much it will change. 
reply

 https://pluralistic.net/2023/12/19/bubblenomics/#pop""Once investor subsidies dry up, will the real-world, non-hyperbolic applications for AI be enough to cover these running costs? ... "" ""Once investor subsidies dry up, will the real-world, non-hyperbolic applications for AI be enough to cover these running costs? ... "" 
reply

 
reply

 The hype _is_ justified. But we will not have AGI tomorrow. However, the pace of advancements has accelerated (in broad terms), and I believe will continue to accelerate. I would be unsure in 1-5 years. But 10 years is not the near future. To say the world today looks nothing like it did 10 years ago is an understatement.Collectively we will continue to stack (newly) outsized gains everyday, assisted by advancements in AI. And 10 years from now we won't recognize the constraints of today and instead will have all new expectations and problems.What does this mean for markets? Well, it doesn't matter _really_ matter for NVDA. We're in a gold rush, and NVDA is the only one selling good shovels, plus they have arguably the best plan for quality excavators, trommels, drills, conveyor belts and dump trucks for those who are serious about this long term.I bought a large stake in NVDA the day ChatGPT was announced and was adding to it until I started training for a triathlon which is now slurping up all my gold. Just gonna hold for the next couple of decades. Collectively we will continue to stack (newly) outsized gains everyday, assisted by advancements in AI. And 10 years from now we won't recognize the constraints of today and instead will have all new expectations and problems.What does this mean for markets? Well, it doesn't matter _really_ matter for NVDA. We're in a gold rush, and NVDA is the only one selling good shovels, plus they have arguably the best plan for quality excavators, trommels, drills, conveyor belts and dump trucks for those who are serious about this long term.I bought a large stake in NVDA the day ChatGPT was announced and was adding to it until I started training for a triathlon which is now slurping up all my gold. Just gonna hold for the next couple of decades. What does this mean for markets? Well, it doesn't matter _really_ matter for NVDA. We're in a gold rush, and NVDA is the only one selling good shovels, plus they have arguably the best plan for quality excavators, trommels, drills, conveyor belts and dump trucks for those who are serious about this long term.I bought a large stake in NVDA the day ChatGPT was announced and was adding to it until I started training for a triathlon which is now slurping up all my gold. Just gonna hold for the next couple of decades. I bought a large stake in NVDA the day ChatGPT was announced and was adding to it until I started training for a triathlon which is now slurping up all my gold. Just gonna hold for the next couple of decades. 
reply

 10 years ago was 2014. If I look back, most of the world seems similar. I would like to understand what drastic changes occurred in the last decade. 
reply

 
reply

 
reply

 Entire companies are putting huge proportions of their total budget into AI hardware, I cannot see the majority of those being profitable at the end of the day as there's simply not the consumer spending on those products to maintain it.Most current AI projects seem to be a ""value-add"" level, meanwhile nvidia's market cap, at $3.2 trillion, is $10k for every man, woman and child in the united states. And that's just one company - even if it may be the largest single representative of the AI-driven market. And all the largest 5 companies in the world (Microsoft, Apple, Google and Amazon) are also likely riding the AI hype valuation train, but maybe to a lesser amount. Summing them gives ~$14 trillion, or over 40k for every man, woman and child in the united states.How on earth do we expect the revenue that sort of valuation represents be extracted from the market? Most current AI projects seem to be a ""value-add"" level, meanwhile nvidia's market cap, at $3.2 trillion, is $10k for every man, woman and child in the united states. And that's just one company - even if it may be the largest single representative of the AI-driven market. And all the largest 5 companies in the world (Microsoft, Apple, Google and Amazon) are also likely riding the AI hype valuation train, but maybe to a lesser amount. Summing them gives ~$14 trillion, or over 40k for every man, woman and child in the united states.How on earth do we expect the revenue that sort of valuation represents be extracted from the market? How on earth do we expect the revenue that sort of valuation represents be extracted from the market? 
reply

 
reply

 In coding, it made me a lot more productive. No more do I have to scour Google or Stack Overflow. Instead, I get the answer straight from the AI. It might not be working at times but it's definitely better.Even random questions like ""What is the cost to produce the Apple Pro Display XDR?"" is being answered more promptly by AI.This is contrary to the crypto craze where there was expected use but sadly it did not come to fruition. And until now, it's still a speculative industry, a solution looking for a problem. Even random questions like ""What is the cost to produce the Apple Pro Display XDR?"" is being answered more promptly by AI.This is contrary to the crypto craze where there was expected use but sadly it did not come to fruition. And until now, it's still a speculative industry, a solution looking for a problem. This is contrary to the crypto craze where there was expected use but sadly it did not come to fruition. And until now, it's still a speculative industry, a solution looking for a problem. 
reply

 
reply

 I haven't seen any weird uses yet that I can think of, outside of like GitHub projects 
reply

 
reply

 
reply

 Not in terms of value — I think it is already delivering a lot of value and it will deliver more and more —, nor in terms of finance. Some overspending VC losing their bets does not constitute a bubble. NVidia has a somewhat diversified demand in games, crypto mining and AI. And it’s not negligible the chance of the next software big thing also use GPUs.I don’t think it will end up being more impactful to humanity than the internet itself, but it will be big and useful. I don’t think it will end up being more impactful to humanity than the internet itself, but it will be big and useful. 
reply

 Imagine being able to program every machine by just telling it what you need. For example, even toasters can have LLMs in them. Give it ability to control temperature and humidity and you have the perfect toaster machine that can toast everyones bread upon request. Maybe every machine in the future will have AI in it that will act both as a controller and UI. Any specialised industry getting wiped out. Doing home security? No more specialised applications or implementation, just tell the door whom should it let in.And LLMs are just one way of doing computer intelligence.The way software ate the world, AI will eventually eat software. And LLMs are just one way of doing computer intelligence.The way software ate the world, AI will eventually eat software. The way software ate the world, AI will eventually eat software. 
reply

 My toaster has a little dial on the side that lets me do that already. I don't need to have a conversation with my toaster to get it to toast the bread, I just put the bread in it, push the lever down, and then toast happens.Works just fine. Works just fine. 
reply

 
reply

 
reply

 
reply

 
reply

 In the future, all toasters will be able make great toast when practically all devices come with the same control board, something similar to raspberry pi but with ability to run LLMs and the toaster makers will simply connect the heating elements and sensors without needing to understand computers and the AI will control that toaster to cook just right.:) :) 
reply

 That's my point. It does that without a language model. Not only is perfect toast a solved problem, but slathering on a layer of LLM bullshit isn't going to make it more affordable than the Mitsubishi. 
reply

 My point is that it can be possible to bring down all kind of electronics control unit into single standard component. The toaster and your dishwasher can have the exact same electronics since they wouldn’t need specialized computer that needs to have specialized software and wouldn’t need specialized engineering to make the software work with the hardware. Just connect the sensors and the other hardware like the heating unit to the AI board and tell it what it is and tell it to act like a toaster. 
reply

 1: even if this means the operator needs experience and expertise from trial and error to know if it's cold, already hot, if we're putting bagels in, etc. 
reply

 
reply

 
reply

 Supporting your view is the retrospective claim: Y2K justified huge spending, and the resulting dotcom bubble, resulted in a much needed economy-wide IT refresh.FWIW, I'm fine with burning bales of VC cash to upgrade everyone's infra. Which ""AI"" does in a way that ""crypto"" didn't. FWIW, I'm fine with burning bales of VC cash to upgrade everyone's infra. Which ""AI"" does in a way that ""crypto"" didn't. 
reply

 Last year I had a subscription for ChatGPT, I had two homegrown apps running on OpenAI API (which have since moved to Groq with LLama), I had Copilot on VSCode, I had Midjourney, I was playing around locally with LMStudio and Stable Diffusion... and I'm pretty sure I'm forgetting some things.Now I have nothing left. I use ChatGPT, Claude, Gemini (the free versions) from time to time, but it's a hit or miss and I'm extremely skeptical of GPT generated content which has a smell to it. The only people I know that use this constantly and unapologetically are the ex-blockchain grifters and junior (or wannabe) devs that think generating a small encapsulated function for a well known problem domain is a step away from the AI replacing humans.So yeah, I'm unsure, but leaning towards overhype based on personal experience. We'll see, I'm too dumb to ride this wave I guess. Now I have nothing left. I use ChatGPT, Claude, Gemini (the free versions) from time to time, but it's a hit or miss and I'm extremely skeptical of GPT generated content which has a smell to it. The only people I know that use this constantly and unapologetically are the ex-blockchain grifters and junior (or wannabe) devs that think generating a small encapsulated function for a well known problem domain is a step away from the AI replacing humans.So yeah, I'm unsure, but leaning towards overhype based on personal experience. We'll see, I'm too dumb to ride this wave I guess. So yeah, I'm unsure, but leaning towards overhype based on personal experience. We'll see, I'm too dumb to ride this wave I guess. 
reply

 Transformers have some interesting properties like in-context meta learning. This is indeed something to be excited about.But to say transformers can be AGI by simply increasing context windows is a doubtful proposition. But to say transformers can be AGI by simply increasing context windows is a doubtful proposition. 
reply

 But I also think it's being overused or misapplied in so many situations.  I've been involved in a couple of projects that were advertised as ""AI"" which were absolutely not, and I'm suspicious of any company advertising AI products. 
reply

 On other hand valuations are insane. And I believe many projects are pushing AI for sake of pushing something. See blockchains previously. So there is some use, but also lot of waste of time and money. 
reply

 Despite what feels like hype right now, it still doesn't price in the massive waves of transformations coming to nearly every sphere of modern life.This poll needs a fourth option: ""What's coming in the next 1 to 10 years is far greater than what today's level of excitement indicates"". This poll needs a fourth option: ""What's coming in the next 1 to 10 years is far greater than what today's level of excitement indicates"". 
reply

 But I think what's fascinating is the incredible strides in hardware we're seeing along side AI, that is cyclically fueling the hype.While the AI advances are not tangible, the hardware is. While the AI advances are not tangible, the hardware is. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 AI as a market is pretty promising in specific applications. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Define near future here.I think we could look back in 3 or 4 years and say that Nvidia overplayed it's hand back here in 2024 by trying to extract too many $$$ from the market and thus attracting lots of other players in to try to get a piece of the action. Certainly there are a lot of big players trying to bypass the Nvidia tax: Meta, Microsoft, Google, Amazon, Intel are all working on their own AI accelerators (Google's TPU has been around for almost 10 years now). CUDA is Nvidia's market moat because most ML/AI code relies on it. But if some other player can come in and undercut Nvidia's prices by a significant amount while offering a workable software stack that could be really compelling - the market seems to really be wanting something like that. I think we could look back in 3 or 4 years and say that Nvidia overplayed it's hand back here in 2024 by trying to extract too many $$$ from the market and thus attracting lots of other players in to try to get a piece of the action. Certainly there are a lot of big players trying to bypass the Nvidia tax: Meta, Microsoft, Google, Amazon, Intel are all working on their own AI accelerators (Google's TPU has been around for almost 10 years now). CUDA is Nvidia's market moat because most ML/AI code relies on it. But if some other player can come in and undercut Nvidia's prices by a significant amount while offering a workable software stack that could be really compelling - the market seems to really be wanting something like that. 
reply

 I think SW is hardly ever a strong moat. Given the right incentive it’s a moat that can be bridged. In this case avoiding nvda tax is a huge incentive. 
reply

 
reply

 But it's a game changer.Software development. Education. Marketing. Writing. It's already generating millions of dollars of value. Considering the speed things are improving right now, it's only going to go up.There are a lot of dynamics at play and I'm not sure how it'll turn out overall. I'm especially curious about how it will turn out when a generation of software developers that learned programming/graduated with GPT enters into the workforce. Software development. Education. Marketing. Writing. It's already generating millions of dollars of value. Considering the speed things are improving right now, it's only going to go up.There are a lot of dynamics at play and I'm not sure how it'll turn out overall. I'm especially curious about how it will turn out when a generation of software developers that learned programming/graduated with GPT enters into the workforce. There are a lot of dynamics at play and I'm not sure how it'll turn out overall. I'm especially curious about how it will turn out when a generation of software developers that learned programming/graduated with GPT enters into the workforce. 
reply

 
reply

 - artists/content creators worried- enterprise/legal worried about implications (legal and production)- politicians are worried about AI crimes/threatsI feel that we are close to a Minsky moment for this AI space that is currently distorted by capital gains being generated by piggying back off the hype.Over time, LLMs will run in our browser/phones but with the unchanged perceptions: Its a nifty toy but we need to hire back the people we let go from the initial hype with reduced wages since y'all can generate stuff now - enterprise/legal worried about implications (legal and production)- politicians are worried about AI crimes/threatsI feel that we are close to a Minsky moment for this AI space that is currently distorted by capital gains being generated by piggying back off the hype.Over time, LLMs will run in our browser/phones but with the unchanged perceptions: Its a nifty toy but we need to hire back the people we let go from the initial hype with reduced wages since y'all can generate stuff now - politicians are worried about AI crimes/threatsI feel that we are close to a Minsky moment for this AI space that is currently distorted by capital gains being generated by piggying back off the hype.Over time, LLMs will run in our browser/phones but with the unchanged perceptions: Its a nifty toy but we need to hire back the people we let go from the initial hype with reduced wages since y'all can generate stuff now I feel that we are close to a Minsky moment for this AI space that is currently distorted by capital gains being generated by piggying back off the hype.Over time, LLMs will run in our browser/phones but with the unchanged perceptions: Its a nifty toy but we need to hire back the people we let go from the initial hype with reduced wages since y'all can generate stuff now Over time, LLMs will run in our browser/phones but with the unchanged perceptions: Its a nifty toy but we need to hire back the people we let go from the initial hype with reduced wages since y'all can generate stuff now 
reply

 
reply

 
reply

 There is also this obnoxious wall street/silicon valley hype train surrounding all of it-- which is by design. This is exactly what these companies want: a huge digital gold rush so they can try their hand at panning for gold using investor money. They try it with any new tech or buzzword they can because it brings in money.Its unfortunate because this technology feels revolutionary. This feels like the internet did to me as a kid. It wasn't all great. It wasn't perfect. But it was cool and there was something special about it. There are these new tools and services that all do slightly different things and when you combined them you could create really amazing things.  AI feels that way. I'm not just talking LLMs either. I think those are impressive and useful, but there is so much else going on in the AI/ML space that can already really move the needle--and this is the worst it will ever be.I hate the comparisons to Bitcoin/block chain. They are being made because that same obnoxious wall street/silicon valley hype-model was at play there too, but I think anyone who was honest with themselves knew there were severe limitations with the tech and its usefulness. AI tools actually provide value, right now, and has a lot of room to grow.But back to the hype and ""Bubble"" question. I think its overhyped because thats whats what silicon valley is good at and wall street is good and amplifying it (and punishing anyone not riding the wave). We probably are in a bubble, but AI is here to stay. Its a new frontier of computing and its going to unlock new and interesting ways to interact with each other and the world around us.I also want to point out that AR is a perfect complement for all of the AI/ML tools that have been developed. The Meta Ray Bans are really interesting to me because they are marrying the two techs. I dont trust Facebook with that type of thing, but imagine if a privacy respecting company tried something like that? Apple is setting themselves up nicely in this space. They could create a new market with iGlass or Apple Vision with ""apple intelligence"" built in.This is the most excited I've been about tech in a long while. Its unfortunate because this technology feels revolutionary. This feels like the internet did to me as a kid. It wasn't all great. It wasn't perfect. But it was cool and there was something special about it. There are these new tools and services that all do slightly different things and when you combined them you could create really amazing things.  AI feels that way. I'm not just talking LLMs either. I think those are impressive and useful, but there is so much else going on in the AI/ML space that can already really move the needle--and this is the worst it will ever be.I hate the comparisons to Bitcoin/block chain. They are being made because that same obnoxious wall street/silicon valley hype-model was at play there too, but I think anyone who was honest with themselves knew there were severe limitations with the tech and its usefulness. AI tools actually provide value, right now, and has a lot of room to grow.But back to the hype and ""Bubble"" question. I think its overhyped because thats whats what silicon valley is good at and wall street is good and amplifying it (and punishing anyone not riding the wave). We probably are in a bubble, but AI is here to stay. Its a new frontier of computing and its going to unlock new and interesting ways to interact with each other and the world around us.I also want to point out that AR is a perfect complement for all of the AI/ML tools that have been developed. The Meta Ray Bans are really interesting to me because they are marrying the two techs. I dont trust Facebook with that type of thing, but imagine if a privacy respecting company tried something like that? Apple is setting themselves up nicely in this space. They could create a new market with iGlass or Apple Vision with ""apple intelligence"" built in.This is the most excited I've been about tech in a long while. I hate the comparisons to Bitcoin/block chain. They are being made because that same obnoxious wall street/silicon valley hype-model was at play there too, but I think anyone who was honest with themselves knew there were severe limitations with the tech and its usefulness. AI tools actually provide value, right now, and has a lot of room to grow.But back to the hype and ""Bubble"" question. I think its overhyped because thats whats what silicon valley is good at and wall street is good and amplifying it (and punishing anyone not riding the wave). We probably are in a bubble, but AI is here to stay. Its a new frontier of computing and its going to unlock new and interesting ways to interact with each other and the world around us.I also want to point out that AR is a perfect complement for all of the AI/ML tools that have been developed. The Meta Ray Bans are really interesting to me because they are marrying the two techs. I dont trust Facebook with that type of thing, but imagine if a privacy respecting company tried something like that? Apple is setting themselves up nicely in this space. They could create a new market with iGlass or Apple Vision with ""apple intelligence"" built in.This is the most excited I've been about tech in a long while. But back to the hype and ""Bubble"" question. I think its overhyped because thats whats what silicon valley is good at and wall street is good and amplifying it (and punishing anyone not riding the wave). We probably are in a bubble, but AI is here to stay. Its a new frontier of computing and its going to unlock new and interesting ways to interact with each other and the world around us.I also want to point out that AR is a perfect complement for all of the AI/ML tools that have been developed. The Meta Ray Bans are really interesting to me because they are marrying the two techs. I dont trust Facebook with that type of thing, but imagine if a privacy respecting company tried something like that? Apple is setting themselves up nicely in this space. They could create a new market with iGlass or Apple Vision with ""apple intelligence"" built in.This is the most excited I've been about tech in a long while. I also want to point out that AR is a perfect complement for all of the AI/ML tools that have been developed. The Meta Ray Bans are really interesting to me because they are marrying the two techs. I dont trust Facebook with that type of thing, but imagine if a privacy respecting company tried something like that? Apple is setting themselves up nicely in this space. They could create a new market with iGlass or Apple Vision with ""apple intelligence"" built in.This is the most excited I've been about tech in a long while. This is the most excited I've been about tech in a long while. 
reply

 I think it's a poorly understood form of compression, a very lossy form of compression.I think it's big corporate adherents know all that, I think, particularly after the internet and the industry it unlocked, smartphone and the internet access that they made ubiquitous, software developers are just looking for things to sell to people. All the innovations have happened already in the software world, but this big industry was built while this happened and they can't just pack up and go home. The truth is, you can't just sell software to users, you have to sell utility, and most people don't have a real need for software beyond what they already have available, so shiny new trinkets it is. They've got video streaming, communication, information retrieval, report generation, and that's it. You can automate stuff, but that's not the end user buying software, that's the end user buying a widget that software is a component of, and a part they really don't care about. A symptom of what I'm talking about can be seen in the ever increasing needless complexity people keep finding in their lives, the software industry as it applies to direct to consumer sales is very little more than hype and noise and marketing. It's empty calories.AI is just another thing in a long line of these things, yesterday it was augmented reality, day before that it was IoT, the list goes back quite a number of years. The last real big innovations that end consumers bought that improved their lives was smartphones and video streaming. Everything an end user can benefit from software wise they already have. Easy communication, multimedia content and symmetry of distribution, near free information availability, I can't think of anything beyond those 3 broad categories, money maybe if you're into the bitcoin thing. Maybe ""AI"" as compression can help with local information retrieval when it's more mature, which is very powerful, but the branding and marketing around it as if it is a mind is not conducive to success on that front. Software is well on it's way to being a mostly business to business thing again, like it once was, which necessarily means a big bubble is going to pop. That's where the innovations are happening, but for us regular people it's all marginal improvement of what we already have as a side with a healthy serving of hype and disappointment. I think it's big corporate adherents know all that, I think, particularly after the internet and the industry it unlocked, smartphone and the internet access that they made ubiquitous, software developers are just looking for things to sell to people. All the innovations have happened already in the software world, but this big industry was built while this happened and they can't just pack up and go home. The truth is, you can't just sell software to users, you have to sell utility, and most people don't have a real need for software beyond what they already have available, so shiny new trinkets it is. They've got video streaming, communication, information retrieval, report generation, and that's it. You can automate stuff, but that's not the end user buying software, that's the end user buying a widget that software is a component of, and a part they really don't care about. A symptom of what I'm talking about can be seen in the ever increasing needless complexity people keep finding in their lives, the software industry as it applies to direct to consumer sales is very little more than hype and noise and marketing. It's empty calories.AI is just another thing in a long line of these things, yesterday it was augmented reality, day before that it was IoT, the list goes back quite a number of years. The last real big innovations that end consumers bought that improved their lives was smartphones and video streaming. Everything an end user can benefit from software wise they already have. Easy communication, multimedia content and symmetry of distribution, near free information availability, I can't think of anything beyond those 3 broad categories, money maybe if you're into the bitcoin thing. Maybe ""AI"" as compression can help with local information retrieval when it's more mature, which is very powerful, but the branding and marketing around it as if it is a mind is not conducive to success on that front. Software is well on it's way to being a mostly business to business thing again, like it once was, which necessarily means a big bubble is going to pop. That's where the innovations are happening, but for us regular people it's all marginal improvement of what we already have as a side with a healthy serving of hype and disappointment. AI is just another thing in a long line of these things, yesterday it was augmented reality, day before that it was IoT, the list goes back quite a number of years. The last real big innovations that end consumers bought that improved their lives was smartphones and video streaming. Everything an end user can benefit from software wise they already have. Easy communication, multimedia content and symmetry of distribution, near free information availability, I can't think of anything beyond those 3 broad categories, money maybe if you're into the bitcoin thing. Maybe ""AI"" as compression can help with local information retrieval when it's more mature, which is very powerful, but the branding and marketing around it as if it is a mind is not conducive to success on that front. Software is well on it's way to being a mostly business to business thing again, like it once was, which necessarily means a big bubble is going to pop. That's where the innovations are happening, but for us regular people it's all marginal improvement of what we already have as a side with a healthy serving of hype and disappointment. 
reply

 I'm both highly critical of much of present-day Silicon Valley (as a metonym for the high-tech industry itself, not merely some geographical region centred near Sunnyvale, CA), and of the view that developments of the current AI boom, even if falling short of or manifesting in ways far different from what advocates claim could be absolutely profound.There are a couple of items I've been sitting on for a few years which might make interesting HN submissions.  One is a Wikipedia list of defunct US automobile companies.  There are a lot of them:<https://en.wikipedia.org/wiki/List_of_defunct_automobile_man...>Another, which I cannot locate presently, was a list of hundreds of oil companies which had been registered in California.In both cases:- A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. There are a couple of items I've been sitting on for a few years which might make interesting HN submissions.  One is a Wikipedia list of defunct US automobile companies.  There are a lot of them:<https://en.wikipedia.org/wiki/List_of_defunct_automobile_man...>Another, which I cannot locate presently, was a list of hundreds of oil companies which had been registered in California.In both cases:- A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. <https://en.wikipedia.org/wiki/List_of_defunct_automobile_man...>Another, which I cannot locate presently, was a list of hundreds of oil companies which had been registered in California.In both cases:- A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. Another, which I cannot locate presently, was a list of hundreds of oil companies which had been registered in California.In both cases:- A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. In both cases:- A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - A huge number of individual enterprises sprang up.- A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - A tiny minority of those survived.  The rest were acquired or simply went out of business.- The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - The resulting industries transformed absolutely everything, though not necessarily how early pioneers and backers advertised or anticipated.The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. The most salient observation though is that these are events from which one can draw a profound boundary, with clear ""before"" and ""after"" times.  Moreover, the concerns of those in the midst of the transformation often seem quaint because we live in the world shaped by that transition.  Thinking from the perspective of those alive at the time, or before, their world DID in fact end.I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. I'm reasonably certain of a few things:- AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - AI seems like it will profoundly disrupt much of the present high-tech information technology sector.  Particularly programming, data processing, data creation, data interpretation, design, and other elements.- There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - There will be tremendous business failures.  The end result will likely be profoundly monopolistic, with a very few large winners.  To the extent that diversity is retained, it's likely to be grounded in legal, cultural, financial, and/or regulatory conditions, and not on the ""free market"" preserving competition.  (The free market rarely preserves competition.)- There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - There will be many unanticipated, and some anticipated, negative consequences.  Growing lack of trustworthiness of information and media, use in mass propaganda and targeted manipulation, general disinformation, etc., are among the more obvious of these (and generally:  are anticipated).  These are only some of the consequences.- There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. - There will likely be sharp limitations or constraints on certain applications, again, some fairly evident, others not, but which will shape the resulting landscape.I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. I find the bubble / no-bubble question something of a red herring.  Both hugely transformational and stillborne technologies tend to arrive with bubbles.  Markets and investment patterns tend to drive this.  What really matters is how well the technology ultimately persists after the bodies have fallen. 
reply

 
reply

 
reply

 
reply

 go ask Joe Public how many times they used ChatGPTmost people don’t know wtf chatgpt isLook outside your filter bubble most people don’t know wtf chatgpt isLook outside your filter bubble Look outside your filter bubble 
reply

 [0] https://www.pewresearch.org/short-reads/2024/03/26/americans... 
reply

 If memory serves me correctly, Canadians were the most likely to take an interest in Facebook in the early days. As of 2008, less than two years after being opened to the general public, 32.9% of Canadians were Facebook users. (If my memory fails me, it is possible that some other country had an even higher uptake.)Only 13.8% of those in the United States were Facebook users at the same time, so if you are referring to the USA specifically then your bet is a pretty safe one. But this also highlights that early interest in technology tends to be highly regional. Relatively high ChatGPT usage in the USA does not imply relatively high usage worldwide.Which is important as Joe Public hales from the UK. You might have been thinking of John Q. Public, which is the member of the Public family who lives in the USA, when you went to US figures. But I can find no ChatGPT usage data for the UK. The chances of what Joe Public will say are unknown. The odds are probably not as good as what you suggest. Only 13.8% of those in the United States were Facebook users at the same time, so if you are referring to the USA specifically then your bet is a pretty safe one. But this also highlights that early interest in technology tends to be highly regional. Relatively high ChatGPT usage in the USA does not imply relatively high usage worldwide.Which is important as Joe Public hales from the UK. You might have been thinking of John Q. Public, which is the member of the Public family who lives in the USA, when you went to US figures. But I can find no ChatGPT usage data for the UK. The chances of what Joe Public will say are unknown. The odds are probably not as good as what you suggest. Which is important as Joe Public hales from the UK. You might have been thinking of John Q. Public, which is the member of the Public family who lives in the USA, when you went to US figures. But I can find no ChatGPT usage data for the UK. The chances of what Joe Public will say are unknown. The odds are probably not as good as what you suggest. 
reply

 I believe it can be overhyped within the industry without the laymen having been exposed to it. 
reply

"
12,,Brainbase (YC W24) Is Hiring Head of Product,https://www.ycombinator.com/companies/brainbase/jobs/W62qIfA-founding-head-of-product,"ABOUT BRAINBASE
Brainbase is to AI workers what Retool is to internal tools.
Very soon every company will have an AI workforce working alongside their human team. At Brainbase we let businesses create their own enterprise-grade AI workers. Everyone from SMBs …",2024-06-10T17:01:58Z,"AI workflow automations for enterprise Brainbase is to AI workers what Retool is to internal tools. Very soon every company will have an AI workforce working alongside their human team. At Brainbase we let businesses create their own enterprise-grade AI workers. Everyone from SMBs to government agencies are choosing us to create workers that do everything from outbound sales calls to customer support. Brainbase is built on an entirely new type of AI agent our founder developed during his PhD at Harvard, which allows for more complex workflows on a longer time horizon, enabling us to move entire workloads from human employees to AI workers. Our company was founded in January 2024 and we already hit our 100K+ ARR milestone and have raised a seed round from YC, 500 Global and other top tier firms, with participation from the founders of Youtube and Hubspot, as well as many top YC alumni. As part of our founding team, you will have a high agency role in bringing AI to the enterprise. You will work one-on-one with our CEO and founding team to primarily brainstorm product directions, running sales campaigns, talking to users and shaping company culture for other team members to come. We think you should apply if the following sounds like you: In addition to the personal qualities mentioned above, this role requires the following: 💻 Must haves 💻 Good to haves 🧠 Why should I join Brainbase and not start my own startup? If you’re accepted into our team, there is no question that we believe you’re capable of running your company. In fact you can be sure that we have all the faith in you that you’ll probably start your own unicorn at some point. But startups are (famously) hard, and it’s usually good practice to see how a good one is run before you start your own. This is truer than ever with the current AI boom, where you really want to see what sets a great AI company from a mediocre one. As a founding member of our team, you’ll get to experience all the great parts of being a founder (autonomy, talking to customers, shipping, culture creation) without any of the overhead (fundraising, operations, taxes). In the end, if you choose to leave to start your own journey, we’ll do everything we can to support you. 🧠 Why do I need to be technical for a product role? One of our core principles at Brainbase is to build what you sell and sell what you build. This means that every member of our founding team is required to have a wholistic view of both our engineering and sales efforts. As such, while we don’t expect you to be as excellent in our stack as our engineers, you are required to have reasonable prior experience in coding so that you can have excellent communication with the developers and be able to intimately understand the product you’re bringing to our users. The same requirement goes for our engineers, whose application processes involve sales and operations trials. 🧠 I’d like to join, but I don’t think I’m founding engineer material If you’re in doubt, and satisfy the Must Have’s from above, you should apply. We love having exceptional people join our team in any capacity and we might end up seeing something in you that you don’t yet yourself. 🧠 What’s the application process like? We vary the application process based on what we can already gather from your resume and previous experiences but you should expect (1) a screening phone call, (2) two reference checks (manager and colleague), (3) running an end-to-end sales campaign, (4) reporting results, (5) final wrap-up call. Brainbase is an AI workflow automation builder designed to handle complex enterprise workflows. Our customers use us to spin up everything from sales autopilots to full fledged customer support workflows in less than a day. SMBs and unicorns choose us over our competitors because we are the only platform that combines the power of AI with the ease and robustness of an off-the-shelf enterprise tool. Brainbase is an AI workflow automation builder designed to handle complex enterprise workflows. Our customers use us to spin up everything from sales autopilots to full fledged customer support workflows in less than a day. SMBs and unicorns choose us over our competitors because we are the only platform that combines the power of AI with the ease and robustness of an off-the-shelf enterprise tool. © 2024 Y Combinator"
13,,Imbue (Formerly Generally Intelligent) (YC S17) Is Hiring an Engineering Manager,https://news.ycombinator.com/item?id=40604246,Comments,2024-06-07T01:00:55Z,"Machine Learning Engineer (SF or Remote, Contract or Full-time):
https://jobs.lever.co/imbue/9411e2ec-502a-403f-a39a-0d44c676...Research Scientist (SF, Full-time):
https://jobs.lever.co/imbue/6c25a25c-35ec-4d7b-8d7e-40e9c4c8...Machine Learning Research Engineer (SF, Full-time):
https://jobs.lever.co/imbue/c2f4a435-1eef-489a-9972-fba95e4a...Systems Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/7afede07-8f22-4c49-b247-19e1a0ca...Technical Lead Manager (SF, Full-time):
https://jobs.lever.co/imbue/9ce44b67-04ca-4da1-b845-6995c62a...Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Research Scientist (SF, Full-time):
https://jobs.lever.co/imbue/6c25a25c-35ec-4d7b-8d7e-40e9c4c8...Machine Learning Research Engineer (SF, Full-time):
https://jobs.lever.co/imbue/c2f4a435-1eef-489a-9972-fba95e4a...Systems Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/7afede07-8f22-4c49-b247-19e1a0ca...Technical Lead Manager (SF, Full-time):
https://jobs.lever.co/imbue/9ce44b67-04ca-4da1-b845-6995c62a...Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Machine Learning Research Engineer (SF, Full-time):
https://jobs.lever.co/imbue/c2f4a435-1eef-489a-9972-fba95e4a...Systems Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/7afede07-8f22-4c49-b247-19e1a0ca...Technical Lead Manager (SF, Full-time):
https://jobs.lever.co/imbue/9ce44b67-04ca-4da1-b845-6995c62a...Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Systems Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/7afede07-8f22-4c49-b247-19e1a0ca...Technical Lead Manager (SF, Full-time):
https://jobs.lever.co/imbue/9ce44b67-04ca-4da1-b845-6995c62a...Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Technical Lead Manager (SF, Full-time):
https://jobs.lever.co/imbue/9ce44b67-04ca-4da1-b845-6995c62a...Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Infrastructure Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/e66a55a3-a117-406c-9b07-8ba05504...Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Senior Software Engineer (Remote or SF, Full-time):
https://jobs.lever.co/imbue/38a93a78-fb8d-4614-bb12-b6277a7f...Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Engineering Manager (SF, Full-time):
https://jobs.lever.co/imbue/75fac008-22e5-49ab-9f4e-a4c459b5...Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Founding Product Engineer (SF, Full-time):
https://jobs.lever.co/imbue/0764f1c0-89e5-452f-ab41-ff1d1ba8...Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Head of Data Engineering (SF, Full-time):
https://jobs.lever.co/imbue/05c940e7-ec08-4eb1-87c1-3dbb05a9...Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Software Engineer, Data (SF, Full-time):
https://jobs.lever.co/imbue/b7e42bb4-e3e4-4022-a563-556f890b...Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6... Executive Recruiter (Technical) (SF, Full-time):
https://jobs.lever.co/imbue/0943dc8a-a420-4639-ad05-3765f9f6..."
14,,"Ask HN: How do you juggle side projects vs. ""just for fun"" projects",https://news.ycombinator.com/item?id=40605445,Comments,2024-06-07T04:49:07Z,"Mentally I find it difficult to treat a side project as “just for fun” vs a potential financial improving project.Specifically I’m in the midst of trying to add Stripe to a browser extension I’m building, and am very much in the weeds as everything runs on cloud functions and I’ve never used Stripe before.So, how do you juggle (financial) side projects vs for-fun side projects? Specifically I’m in the midst of trying to add Stripe to a browser extension I’m building, and am very much in the weeds as everything runs on cloud functions and I’ve never used Stripe before.So, how do you juggle (financial) side projects vs for-fun side projects? So, how do you juggle (financial) side projects vs for-fun side projects? What helps there is asking yourself if whatever you'd be chasing there is actually worth the things you invest/loose/burn by chasing it.Do you actually need this potential financial improvement?
Do you need it more than time filled with something fun, relaxing and enjoyable?What would you even do with the potential financial improvement?And don't forget that you as a human still need fun, relaxing and enjoyable experiences.
If you turn those that you have into money, you then have to use parts of the money again to get new fun, relaxing and enjoyable experiences. Maybe even more than what you gained initially.It is okay to not view everything one does through ""is this marketable/can I make money from this"" lens. It is healthy to do that.Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. Do you actually need this potential financial improvement?
Do you need it more than time filled with something fun, relaxing and enjoyable?What would you even do with the potential financial improvement?And don't forget that you as a human still need fun, relaxing and enjoyable experiences.
If you turn those that you have into money, you then have to use parts of the money again to get new fun, relaxing and enjoyable experiences. Maybe even more than what you gained initially.It is okay to not view everything one does through ""is this marketable/can I make money from this"" lens. It is healthy to do that.Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. What would you even do with the potential financial improvement?And don't forget that you as a human still need fun, relaxing and enjoyable experiences.
If you turn those that you have into money, you then have to use parts of the money again to get new fun, relaxing and enjoyable experiences. Maybe even more than what you gained initially.It is okay to not view everything one does through ""is this marketable/can I make money from this"" lens. It is healthy to do that.Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. And don't forget that you as a human still need fun, relaxing and enjoyable experiences.
If you turn those that you have into money, you then have to use parts of the money again to get new fun, relaxing and enjoyable experiences. Maybe even more than what you gained initially.It is okay to not view everything one does through ""is this marketable/can I make money from this"" lens. It is healthy to do that.Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. It is okay to not view everything one does through ""is this marketable/can I make money from this"" lens. It is healthy to do that.Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. Don't be fooled by people and/or the zeitgeist telling you something else.
Chances are that they either don't have your best interest in mind or are just stuck in the same hell, parroting the same message that people that didn't have their best interest in mind told them. 
reply

 I think because we grew up relatively poor it’s hard for me to not grind, but it is a good suggestion to ask do I actually NEED the financial gain?I’d say at this stage it’s more want than need, because my dream is to retire early and program on deep projects all day long (on the beach of course) I’d say at this stage it’s more want than need, because my dream is to retire early and program on deep projects all day long (on the beach of course) 
reply

 I do not look at side projects that are set up to make money as side projects. Those are businesses you create with the goal of making money. And when you also have a full-time job creating a business on the side is hard enough, so no fun projects.Basically, I look at it this way:A) Fulltime job + building a business on the sideB) Fulltime job + fun projectsI don't mix those. Sure, sometimes you set up a new project to try out new technology. But that is for learning, and you do not have to finish the product. Basically, I look at it this way:A) Fulltime job + building a business on the sideB) Fulltime job + fun projectsI don't mix those. Sure, sometimes you set up a new project to try out new technology. But that is for learning, and you do not have to finish the product. A) Fulltime job + building a business on the sideB) Fulltime job + fun projectsI don't mix those. Sure, sometimes you set up a new project to try out new technology. But that is for learning, and you do not have to finish the product. B) Fulltime job + fun projectsI don't mix those. Sure, sometimes you set up a new project to try out new technology. But that is for learning, and you do not have to finish the product. I don't mix those. Sure, sometimes you set up a new project to try out new technology. But that is for learning, and you do not have to finish the product. 
reply

 Yes I think I need to start calling these things as they are,  business (on the side)It is very hard doing a full time job and doing a side business, I’m wondering how some folk manage to make it work. I certainly struggle to It is very hard doing a full time job and doing a side business, I’m wondering how some folk manage to make it work. I certainly struggle to 
reply

 Manage expectations.I earn a comfortable amount of money in $DAYJOB (openstack devops) and I've started building a consulting business on the side. That's amidst other side projects that won't ever earn money.I make it work by not expecting my business to build quickly. I focus on making my dayjob work, because that's where the reliable money is coming from, and I make sure I have enough time to relax and appreciate life. I work on my business when I have time and energy left over.One day I may get enough clients that I can start thinking about reversing the priorities, pushing back on the dayjob to make more time for the business. But if that day never comes, I'm still happy: I'm not going to be homeless any time soon, and regardless of what happens, I have a high probability of a good retirement in 15 or 20 years due to investments I've already made.You must be young. I also used to stress about how I could never get enough done, and beat myself up for not being able to fill every waking moment with something productive. You'll eventually learn that this is the path to burnout. I wonder if it's necessary to burn out first before you learn the lesson ... I earn a comfortable amount of money in $DAYJOB (openstack devops) and I've started building a consulting business on the side. That's amidst other side projects that won't ever earn money.I make it work by not expecting my business to build quickly. I focus on making my dayjob work, because that's where the reliable money is coming from, and I make sure I have enough time to relax and appreciate life. I work on my business when I have time and energy left over.One day I may get enough clients that I can start thinking about reversing the priorities, pushing back on the dayjob to make more time for the business. But if that day never comes, I'm still happy: I'm not going to be homeless any time soon, and regardless of what happens, I have a high probability of a good retirement in 15 or 20 years due to investments I've already made.You must be young. I also used to stress about how I could never get enough done, and beat myself up for not being able to fill every waking moment with something productive. You'll eventually learn that this is the path to burnout. I wonder if it's necessary to burn out first before you learn the lesson ... I make it work by not expecting my business to build quickly. I focus on making my dayjob work, because that's where the reliable money is coming from, and I make sure I have enough time to relax and appreciate life. I work on my business when I have time and energy left over.One day I may get enough clients that I can start thinking about reversing the priorities, pushing back on the dayjob to make more time for the business. But if that day never comes, I'm still happy: I'm not going to be homeless any time soon, and regardless of what happens, I have a high probability of a good retirement in 15 or 20 years due to investments I've already made.You must be young. I also used to stress about how I could never get enough done, and beat myself up for not being able to fill every waking moment with something productive. You'll eventually learn that this is the path to burnout. I wonder if it's necessary to burn out first before you learn the lesson ... One day I may get enough clients that I can start thinking about reversing the priorities, pushing back on the dayjob to make more time for the business. But if that day never comes, I'm still happy: I'm not going to be homeless any time soon, and regardless of what happens, I have a high probability of a good retirement in 15 or 20 years due to investments I've already made.You must be young. I also used to stress about how I could never get enough done, and beat myself up for not being able to fill every waking moment with something productive. You'll eventually learn that this is the path to burnout. I wonder if it's necessary to burn out first before you learn the lesson ... You must be young. I also used to stress about how I could never get enough done, and beat myself up for not being able to fill every waking moment with something productive. You'll eventually learn that this is the path to burnout. I wonder if it's necessary to burn out first before you learn the lesson ... 
reply

 I also tend to default to working on my business, but if something has my curiosity going, I give myself time to explore. 
reply

 
reply

 - https://maxrozen.com/2018-review-starting-an-internet-busine...- https://maxrozen.com/2019-further-reflections-trying-to-star...- https://maxrozen.com/indiehacking-3-year-review- https://maxrozen.com/2021-strangers-paid-my-macbook- https://maxrozen.com/2022-just-keep-shipping- https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. - https://maxrozen.com/2019-further-reflections-trying-to-star...- https://maxrozen.com/indiehacking-3-year-review- https://maxrozen.com/2021-strangers-paid-my-macbook- https://maxrozen.com/2022-just-keep-shipping- https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. - https://maxrozen.com/indiehacking-3-year-review- https://maxrozen.com/2021-strangers-paid-my-macbook- https://maxrozen.com/2022-just-keep-shipping- https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. - https://maxrozen.com/2021-strangers-paid-my-macbook- https://maxrozen.com/2022-just-keep-shipping- https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. - https://maxrozen.com/2022-just-keep-shipping- https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. - https://maxrozen.com/2023-focus-single-product-pays-offIn short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. In short, I spent two hours every morning building software and trying to sell it on the Internet over several years, eventually I found something that stuck.I do everything, from design and implementation, to marketing, sales and support. I do everything, from design and implementation, to marketing, sales and support. 
reply

 I don't go into side projects with the intent of ever making a dime on them, though. I usually go into side projects because I have a need and the project is to meet that need. Sometimes, I go into a side project to learn a new skill. Sometimes both.As an example, I'm halfway through developing a radio mesh network to allow easy communications with my friends when we're in the wild where there is no cellphone connectivity. I'm doing it because we have a need for one, and there isn't anything that meets that need on the market.It's also clear that this could be a marketable thing, so that's in the back of my mind but doesn't influence design, implementation, or the amount of time I spend on doing it. It's a ""for fun"" project. As an example, I'm halfway through developing a radio mesh network to allow easy communications with my friends when we're in the wild where there is no cellphone connectivity. I'm doing it because we have a need for one, and there isn't anything that meets that need on the market.It's also clear that this could be a marketable thing, so that's in the back of my mind but doesn't influence design, implementation, or the amount of time I spend on doing it. It's a ""for fun"" project. It's also clear that this could be a marketable thing, so that's in the back of my mind but doesn't influence design, implementation, or the amount of time I spend on doing it. It's a ""for fun"" project. 
reply

 What drives me - Why the hell the machine is not working for me, it feels like I'm working for it.How I work towards it -LatestPrivate project - https://www.youtube.com/watch?v=KHpf8h0JMuoPublic project - https://github.com/imvetri/ui-editorMy side project, my office goals, my plan to sell a product, all around the same. How I work towards it -LatestPrivate project - https://www.youtube.com/watch?v=KHpf8h0JMuoPublic project - https://github.com/imvetri/ui-editorMy side project, my office goals, my plan to sell a product, all around the same. LatestPrivate project - https://www.youtube.com/watch?v=KHpf8h0JMuoPublic project - https://github.com/imvetri/ui-editorMy side project, my office goals, my plan to sell a product, all around the same. Private project - https://www.youtube.com/watch?v=KHpf8h0JMuoPublic project - https://github.com/imvetri/ui-editorMy side project, my office goals, my plan to sell a product, all around the same. Public project - https://github.com/imvetri/ui-editorMy side project, my office goals, my plan to sell a product, all around the same. My side project, my office goals, my plan to sell a product, all around the same. 
reply

 I have other hobbies, and I enjoy using, learning about, and contributing to, the more well known popular FOSS apps just as much as making new ones. 
reply

 
reply

 But I helped with the Text Inputs feature on ESPHome, fixed some issues that made Armoria unable to work without a cloud CDN, worked on some bugs for CustomPiOs.I've found lots of random bugs in Python libraries over the years.I've also answered a lot of questions on Reddit, and made lots of bug reports. I've found lots of random bugs in Python libraries over the years.I've also answered a lot of questions on Reddit, and made lots of bug reports. I've also answered a lot of questions on Reddit, and made lots of bug reports. 
reply

 
reply

 
reply

 
reply

 
reply

 My state of mind are quite different when I'm doing ""work"" work and when I'm doing something else for fun. Completely different experiences with just the facts that I'm staring at a screen and using my fingers on a keyboard being common to both. 
reply

 It’s- intellectually challenging and interesting- massive rabbit hole- I’m good at it- it’s a very creative outlet and the outputs are awesomeI’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day - intellectually challenging and interesting- massive rabbit hole- I’m good at it- it’s a very creative outlet and the outputs are awesomeI’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day - massive rabbit hole- I’m good at it- it’s a very creative outlet and the outputs are awesomeI’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day - I’m good at it- it’s a very creative outlet and the outputs are awesomeI’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day - it’s a very creative outlet and the outputs are awesomeI’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day I’m relatively physically disabled (not noticeable to the naked eye though), otherwise I’d be out walking and running and bouldering all day 
reply

 
reply

 private flying. 
reply

 
reply

 
reply

"
15,,ThankYouHN: 14 Years,https://news.ycombinator.com/item?id=40605103,Comments,2024-06-07T03:40:57Z,"HN has changed my perspective on engineering and the world, my life metrics, and ultimately given me wisdom. Anonymous arguments flourish beautifully here. No one cares who you are—only your argument matters.It's helped me a lot with running my consulting business. I don’t have to repeat other people's mistakes or, even better, I can just copy proven systems and best practices. I've learned so many lessons and found incredibly useful links here.The text-based format with upvotes and downvotes works beautifully. No fancy web frameworks—just pure HTML and CSS for my browser.HN is the only tab in my Chrome that uses the least RAM but provides the most benefit to my daily info intake. Text mode keeps me focus to read & write content. No emojis, no stickers, no visual distraction !I hope HN stays like this forever. It's helped me a lot with running my consulting business. I don’t have to repeat other people's mistakes or, even better, I can just copy proven systems and best practices. I've learned so many lessons and found incredibly useful links here.The text-based format with upvotes and downvotes works beautifully. No fancy web frameworks—just pure HTML and CSS for my browser.HN is the only tab in my Chrome that uses the least RAM but provides the most benefit to my daily info intake. Text mode keeps me focus to read & write content. No emojis, no stickers, no visual distraction !I hope HN stays like this forever. The text-based format with upvotes and downvotes works beautifully. No fancy web frameworks—just pure HTML and CSS for my browser.HN is the only tab in my Chrome that uses the least RAM but provides the most benefit to my daily info intake. Text mode keeps me focus to read & write content. No emojis, no stickers, no visual distraction !I hope HN stays like this forever. HN is the only tab in my Chrome that uses the least RAM but provides the most benefit to my daily info intake. Text mode keeps me focus to read & write content. No emojis, no stickers, no visual distraction !I hope HN stays like this forever. I hope HN stays like this forever. It's a very special place that successfully avoided its ""Eternal September"". I hope dang knows how much we appreciate his work to not let the quality go downhill. 
reply

 Also, you guys in the comments are consistently great. Not only do I learn a ton from you and am delighted to have an appreciative ear for my own arcana, but it's also reassuring to see a reflection of my own quirks and neuroticies lightly peppered throughout as well. You guys remind me that we're all in this crazy world together, trying our best with whatever tools we got. 
reply

 Be kind. 
reply

 
reply

 
reply

 (Apologies for overusing the phrase but it just fits in the context)Even I have been using it for the last 10 years and it's still the most important source of my information diet. Even I have been using it for the last 10 years and it's still the most important source of my information diet. 
reply

 Though I think I’m shadowbanned for saying “f OpenAI” 
reply

 
reply

 This place is one of the few I can trust to get info that one can not ""bump"" into anyplace else. 
reply

 
reply

 
reply

 
reply

 Wikipedia says:> Social media are interactive technologies that facilitate the creation, sharing and aggregation of content, ideas, interests, and other forms of expression through virtual communities and networks.I guess it is, huh, what do you know. I'm so used to thinking of social media as facebook/twitter/instagram/tiktok, where people have individual feeds. > Social media are interactive technologies that facilitate the creation, sharing and aggregation of content, ideas, interests, and other forms of expression through virtual communities and networks.I guess it is, huh, what do you know. I'm so used to thinking of social media as facebook/twitter/instagram/tiktok, where people have individual feeds. I guess it is, huh, what do you know. I'm so used to thinking of social media as facebook/twitter/instagram/tiktok, where people have individual feeds. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 The most voted reason could be shown directly in the title, no one would need to ask why a post was flagged... although they'll maybe start asking why was that reason selected. 
reply

 
reply

 You should be using Firefox 
reply

 
reply

 
reply

 
reply

 
reply

"
16,,"Ask HN: Is it just me, or does the job market for IT seem bad today?",https://news.ycombinator.com/item?id=40668459,Comments,2024-06-13T11:48:46Z,"Do you get the same feeling? Now it's like submit 1000 resumes, get interviews from 4, spend 20+ hours preparing and doing interviews, get ghosted at the end.I have a friend who works for local government. They have an open GIS programmer position. I've done GIS programming for government (as a contractor), and it's not hard stuff. She says they received many 100s of resumes and are currently interviewing 30 people. They had so many people apply that they required each applicant to submit a very involved project beforehand just to weed people out. So, there are literally 30 people out there right now, putting in 20+ hours to complete a project just to get a job that pays probably $110k / year. I have a friend who works for local government. They have an open GIS programmer position. I've done GIS programming for government (as a contractor), and it's not hard stuff. She says they received many 100s of resumes and are currently interviewing 30 people. They had so many people apply that they required each applicant to submit a very involved project beforehand just to weed people out. So, there are literally 30 people out there right now, putting in 20+ hours to complete a project just to get a job that pays probably $110k / year. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I remember back in college thinking that take-home project assessments were great (as a candidate). Even after getting fleeced on those a few times (e.g., spent a week completing the assessment, everything seemed picture perfect, submitted it, waited a week, automatic rejection with zero feedback or explanation, wtf?).These days, I would rather go through 5-6 rounds of leetcode+systems design interviews. Takes much less time, each one gets easier and faster, and zero extra overhead with each subsequent interview (while with take-home projects, each one will take around the same amount of time). And I am not even gonna dive into the whole cheating issue with take-home projects.I simply got other things in life at this point that I would rather do, than to spend over 10 hours in a week on a single take-home project, while i can spend that exact same number of hours to complete ~2 full leetcode-centric interview loops at 2 different companies. And that’s not even mentioning that take-home project interviews also have leetcode and other rounds as follow-ups anyway. As well as the whole “the company doesn’t care about this being easily cheatable” attitude with take-home projects not really making me want to work there (acting as a weak proxy for the general quality of candidates they are hiring).P.S. I think of leetcode as the best lowest common denominator. Yes, there are certain niche interview processes that are very one-of-a-kind that are great, but they are imo not easily transportable outside of the company conducting those. The one that came to my mind personally was Dropbox (the whole process from start to finish was fantastic, and they treated candidates like reasonable adults, no lowballing on offers or any other bs), with one specific round being “prepare to discuss any project you worked on before in depth, and a week ahead of it send a very short 1-2 paragraph description of what the project is to your interviewer.” It was one of the best interviews I ever had in my entire life (not talking about my performance on it, but rather in terms of how in-depth it went and how just great it felt to talk all that systems design and decision-making).P.P.S. Another one I can think of is Netflix, but I didn’t interview there myself yet. A couple friends of mine did, and apparently there was almost no code involved at any point there (no leetcode, no take home projects, nothing). 3 years later, those firends are still at Netflix and seem to be loving it, so Netflix definitely did something right there. These days, I would rather go through 5-6 rounds of leetcode+systems design interviews. Takes much less time, each one gets easier and faster, and zero extra overhead with each subsequent interview (while with take-home projects, each one will take around the same amount of time). And I am not even gonna dive into the whole cheating issue with take-home projects.I simply got other things in life at this point that I would rather do, than to spend over 10 hours in a week on a single take-home project, while i can spend that exact same number of hours to complete ~2 full leetcode-centric interview loops at 2 different companies. And that’s not even mentioning that take-home project interviews also have leetcode and other rounds as follow-ups anyway. As well as the whole “the company doesn’t care about this being easily cheatable” attitude with take-home projects not really making me want to work there (acting as a weak proxy for the general quality of candidates they are hiring).P.S. I think of leetcode as the best lowest common denominator. Yes, there are certain niche interview processes that are very one-of-a-kind that are great, but they are imo not easily transportable outside of the company conducting those. The one that came to my mind personally was Dropbox (the whole process from start to finish was fantastic, and they treated candidates like reasonable adults, no lowballing on offers or any other bs), with one specific round being “prepare to discuss any project you worked on before in depth, and a week ahead of it send a very short 1-2 paragraph description of what the project is to your interviewer.” It was one of the best interviews I ever had in my entire life (not talking about my performance on it, but rather in terms of how in-depth it went and how just great it felt to talk all that systems design and decision-making).P.P.S. Another one I can think of is Netflix, but I didn’t interview there myself yet. A couple friends of mine did, and apparently there was almost no code involved at any point there (no leetcode, no take home projects, nothing). 3 years later, those firends are still at Netflix and seem to be loving it, so Netflix definitely did something right there. I simply got other things in life at this point that I would rather do, than to spend over 10 hours in a week on a single take-home project, while i can spend that exact same number of hours to complete ~2 full leetcode-centric interview loops at 2 different companies. And that’s not even mentioning that take-home project interviews also have leetcode and other rounds as follow-ups anyway. As well as the whole “the company doesn’t care about this being easily cheatable” attitude with take-home projects not really making me want to work there (acting as a weak proxy for the general quality of candidates they are hiring).P.S. I think of leetcode as the best lowest common denominator. Yes, there are certain niche interview processes that are very one-of-a-kind that are great, but they are imo not easily transportable outside of the company conducting those. The one that came to my mind personally was Dropbox (the whole process from start to finish was fantastic, and they treated candidates like reasonable adults, no lowballing on offers or any other bs), with one specific round being “prepare to discuss any project you worked on before in depth, and a week ahead of it send a very short 1-2 paragraph description of what the project is to your interviewer.” It was one of the best interviews I ever had in my entire life (not talking about my performance on it, but rather in terms of how in-depth it went and how just great it felt to talk all that systems design and decision-making).P.P.S. Another one I can think of is Netflix, but I didn’t interview there myself yet. A couple friends of mine did, and apparently there was almost no code involved at any point there (no leetcode, no take home projects, nothing). 3 years later, those firends are still at Netflix and seem to be loving it, so Netflix definitely did something right there. P.S. I think of leetcode as the best lowest common denominator. Yes, there are certain niche interview processes that are very one-of-a-kind that are great, but they are imo not easily transportable outside of the company conducting those. The one that came to my mind personally was Dropbox (the whole process from start to finish was fantastic, and they treated candidates like reasonable adults, no lowballing on offers or any other bs), with one specific round being “prepare to discuss any project you worked on before in depth, and a week ahead of it send a very short 1-2 paragraph description of what the project is to your interviewer.” It was one of the best interviews I ever had in my entire life (not talking about my performance on it, but rather in terms of how in-depth it went and how just great it felt to talk all that systems design and decision-making).P.P.S. Another one I can think of is Netflix, but I didn’t interview there myself yet. A couple friends of mine did, and apparently there was almost no code involved at any point there (no leetcode, no take home projects, nothing). 3 years later, those firends are still at Netflix and seem to be loving it, so Netflix definitely did something right there. P.P.S. Another one I can think of is Netflix, but I didn’t interview there myself yet. A couple friends of mine did, and apparently there was almost no code involved at any point there (no leetcode, no take home projects, nothing). 3 years later, those firends are still at Netflix and seem to be loving it, so Netflix definitely did something right there. 
reply

 I was fed up to see entitled wannabees be paid a lot of money to slow me down by forcing me to do some parody of scrum that they learn at one bootcamp, feeling they were in any way important as they drank they in-house latte during multiple remote meetings a day.I much prefer a market where people I work with are actually paid according to their skill and ship code rather than power point or worse, an update to the code of conduct to include some inclusive edge case.I would prefer a balance of all worlds, that would be fairer. But you can never quite reach it, because you pass it on the way up or down quickly as the pendulum swing.So if I have to choose, I prefer a hard market.I understand that people need to eat and that it's not everybody's preference, though. I much prefer a market where people I work with are actually paid according to their skill and ship code rather than power point or worse, an update to the code of conduct to include some inclusive edge case.I would prefer a balance of all worlds, that would be fairer. But you can never quite reach it, because you pass it on the way up or down quickly as the pendulum swing.So if I have to choose, I prefer a hard market.I understand that people need to eat and that it's not everybody's preference, though. I would prefer a balance of all worlds, that would be fairer. But you can never quite reach it, because you pass it on the way up or down quickly as the pendulum swing.So if I have to choose, I prefer a hard market.I understand that people need to eat and that it's not everybody's preference, though. So if I have to choose, I prefer a hard market.I understand that people need to eat and that it's not everybody's preference, though. I understand that people need to eat and that it's not everybody's preference, though. 
reply

 
reply

 
reply

 Right, but in the late 90s and early 2000s, unless you were a manager climbing the ranks, you weren't making big bucks.Even folks at Microsoft, which at the time was one of the most dominant software companies, were only millionaires if they joined pre-IPO.  The company wasn't minting IC millionaires.Now you have a whole host of FAANGMULA companies that do mint millionaires if you stay long enough and get your full vest, and don't get totally unlucky on the timing of RSU grants. Even folks at Microsoft, which at the time was one of the most dominant software companies, were only millionaires if they joined pre-IPO.  The company wasn't minting IC millionaires.Now you have a whole host of FAANGMULA companies that do mint millionaires if you stay long enough and get your full vest, and don't get totally unlucky on the timing of RSU grants. Now you have a whole host of FAANGMULA companies that do mint millionaires if you stay long enough and get your full vest, and don't get totally unlucky on the timing of RSU grants. 
reply

 [1]: https://github.com/bilbof/whoishiring-ratio 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 ""This script outputs how many job seekers there are vs how many jobs.""Isn't it actually showing the ratio of jobs / job seekers? It does seem so by the chart and the code but the text makes it sound the opposite. (Or is it my wrong reading?) Isn't it actually showing the ratio of jobs / job seekers? It does seem so by the chart and the code but the text makes it sound the opposite. (Or is it my wrong reading?) 
reply

 
reply

 
reply

 
reply

 
reply

 I haven't had a recruiter contact me on Linkedin for over a year, in 2022 and before I was being contacted by recruiters on Linkedin all the time.Companies have different modes - mass layoffs, small layoffs, no hires, only hiring replacements, a few new slots open, many slots open.  In early-mid 2022 we were in the last category and it's moved to one of the other modes for most companies, except for LLM hires.There are different sources of information, I found this helpful ( https://interviewing.io/blog/when-is-hiring-coming-back-pred... ) from a company with some insights into tech hiring. Companies have different modes - mass layoffs, small layoffs, no hires, only hiring replacements, a few new slots open, many slots open.  In early-mid 2022 we were in the last category and it's moved to one of the other modes for most companies, except for LLM hires.There are different sources of information, I found this helpful ( https://interviewing.io/blog/when-is-hiring-coming-back-pred... ) from a company with some insights into tech hiring. There are different sources of information, I found this helpful ( https://interviewing.io/blog/when-is-hiring-coming-back-pred... ) from a company with some insights into tech hiring. 
reply

 My profile is marked as remote only. The offers are all on-site.So I have my doubts that it is a match. So I have my doubts that it is a match. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 https://blog.pragmaticengineer.com/section-174/A recent bill has given relief for the domestic amortization but is still stuck in the senate.https://gop-waysandmeans.house.gov/wp-content/uploads/2024/0... A recent bill has given relief for the domestic amortization but is still stuck in the senate.https://gop-waysandmeans.house.gov/wp-content/uploads/2024/0... https://gop-waysandmeans.house.gov/wp-content/uploads/2024/0... 
reply

 but a simplified TL;dr is that companies used to be able to expense that year's R&D costs (including salaries for developers etc) in that same taxable year. now, that is no longer the case, and companies must amortize those R&D costs over 5 years.this is not ideal.[0] https://www.axios.com/2024/01/20/taxes-irs-startups-section1... this is not ideal.[0] https://www.axios.com/2024/01/20/taxes-irs-startups-section1... [0] https://www.axios.com/2024/01/20/taxes-irs-startups-section1... 
reply

 
reply

 The interest rate rises were intended to contract the economy and reduce wage inflation pressure by increasing unemployment, and they seem to have had that effect.The AI bubble is also causing a lot of companies to believe in the idea of replacing their staff with AI. The AI bubble is also causing a lot of companies to believe in the idea of replacing their staff with AI. 
reply

 Replacing generic slogan writers with AI might work, but replacing IT workers with AI at this point will be funny to watch (from a distance). 
reply

 
reply

 
reply

 
reply

 What changed is remote work. My company got rid of US/UK based employees and only hires LATAM contractors by the hundreds. 
reply

 
reply

 I'm not claiming to be very knowledgeable about AI/LLMs or the job market or ""the economy"" in general, but I'd be absolutely shocked to find that the AI stuff has any impact on the current IT job market.I know that some people are using AI tools to help generate code and stuff, but it seems like those tools can't even generate correct code a lot of the time- and that's with a professional human programmer asking it to. I can't imagine that these tools are increasing productivity so much that it could actually reduce hiring. I know that some people are using AI tools to help generate code and stuff, but it seems like those tools can't even generate correct code a lot of the time- and that's with a professional human programmer asking it to. I can't imagine that these tools are increasing productivity so much that it could actually reduce hiring. 
reply

 
reply

 
reply

 
reply

 I’ve heard people on HN suggest it’s definitely helping them, but I’ve yet to see it in person.  So ehh maybe they are just working on very different things. 
reply

 Maybe that “more” will be in other areas of the business or economy and thus lead to less headcount, but given how profitable tech is.. I’d assume they’d be redeployed to build more product 
reply

 Not to mention that I'm so skeptical right now that I highly doubt these AI tools are helping IT workers be even 5% more productive.Historically, every time a new web framework comes out that swears it'll make web devs so much more productive, it doesn't seem like that ever causes a noticeable change in the job market. Historically, every time a new web framework comes out that swears it'll make web devs so much more productive, it doesn't seem like that ever causes a noticeable change in the job market. 
reply

 
reply

 But things will likely improve eventually. Probably due to a mix of laid off developers finally finding new jobs, a decent percentage of developers/engineers leaving the industry, and new companies being founded in future. 
reply

 I think things will get better, the effects of the above will lessen with a rate cut and probably a repeal, but the golden era is past. 
reply

 
reply

 Were I to guess, 20 years ago you were in niche group of weirdos who enjoyed writing computer code in their free time which just so happened align with the 90s-00s internet revolution and 10s smart phone revolution.For a couple of decades there just hasn't been enough nerds to build all apps and websites companies wanted built, and therefore competition for these jobs was extremely high. If you wanted to win the best IT talent you had to pay 6 figures and offer endless perks.Today every government in the world is trying to push kids to code in an attempt to win a share of economic success that companies like Google and Apple have had. But with more people now going into software, more outsourcing and with cloud software like Shopify allowing those without a technical background to build and ship websites and products on their own, the demand for engineers relative to the number of engineers is now decreasing for the first time.Going forward I'd bet on AI continuing to erode the relative demand for software engineers.I'd also argue it's less that the IT market today is bad, but that it's adjusting to be more comparable to other skilled labour jobs which are more competitive and less favourably compensated than IT.Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. For a couple of decades there just hasn't been enough nerds to build all apps and websites companies wanted built, and therefore competition for these jobs was extremely high. If you wanted to win the best IT talent you had to pay 6 figures and offer endless perks.Today every government in the world is trying to push kids to code in an attempt to win a share of economic success that companies like Google and Apple have had. But with more people now going into software, more outsourcing and with cloud software like Shopify allowing those without a technical background to build and ship websites and products on their own, the demand for engineers relative to the number of engineers is now decreasing for the first time.Going forward I'd bet on AI continuing to erode the relative demand for software engineers.I'd also argue it's less that the IT market today is bad, but that it's adjusting to be more comparable to other skilled labour jobs which are more competitive and less favourably compensated than IT.Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. Today every government in the world is trying to push kids to code in an attempt to win a share of economic success that companies like Google and Apple have had. But with more people now going into software, more outsourcing and with cloud software like Shopify allowing those without a technical background to build and ship websites and products on their own, the demand for engineers relative to the number of engineers is now decreasing for the first time.Going forward I'd bet on AI continuing to erode the relative demand for software engineers.I'd also argue it's less that the IT market today is bad, but that it's adjusting to be more comparable to other skilled labour jobs which are more competitive and less favourably compensated than IT.Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. Going forward I'd bet on AI continuing to erode the relative demand for software engineers.I'd also argue it's less that the IT market today is bad, but that it's adjusting to be more comparable to other skilled labour jobs which are more competitive and less favourably compensated than IT.Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. I'd also argue it's less that the IT market today is bad, but that it's adjusting to be more comparable to other skilled labour jobs which are more competitive and less favourably compensated than IT.Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. Clearly going forward the shortage is likely to be in jobs that have geographical restrictions and require hard skills. You can't outsource a roofer and use Gen AI to generate you a roof, and it's a profession that takes years to master therefore you can't just hire anyone to do it, and yet no one wants to do these manual labour jobs anymore. Were I in my teens today, this is where I'd be looking for career security. As it stands I'm not going to complain after lucking massively over the last ~15 years – there really was no better time to be a computer nerd. 
reply

 SE job listings have returned to the levels they were at before the huge ramp up in hype a few years ago. Unfortunately FRED data only goes out a few years here. 
reply

 
reply

 I’m not looking for new mobile dev jobs soon but the market for native looks like shit. 
reply

 I have worked on mobile app (iOS and Android) and done full-stack web and app development.When I apply for places the recruiter literally cannot fathom this ""Um. So...Are you frontend or backend?"" Both. ""...But which one"" BOTH ""Which do you prefer?"" I prefer a company that can handle the concept of someone who can and HAS done it all. When I apply for places the recruiter literally cannot fathom this ""Um. So...Are you frontend or backend?"" Both. ""...But which one"" BOTH ""Which do you prefer?"" I prefer a company that can handle the concept of someone who can and HAS done it all. 
reply

 
reply

 I always thought fullstack meant front end and backend, not front end across multiple platforms. 
reply

 
reply

 
reply

 
reply

 You want to be paid like you have 20 years.  The experience should make you worth that.  That is, you should be more productive than someone with 2 years of experience.But not every company understands that.  And even, of the companies that do understand, not every one of them needs that.  Some just need a junior that they can plug in.And, of the ones that are looking for someone of your level, most of them understand that this is a hire that is somewhat more important to get right.The net result is that this is a slower process than it was for you 20 years ago.  You need to adjust your expectations.  But jobs are still there - they just take longer to find. But not every company understands that.  And even, of the companies that do understand, not every one of them needs that.  Some just need a junior that they can plug in.And, of the ones that are looking for someone of your level, most of them understand that this is a hire that is somewhat more important to get right.The net result is that this is a slower process than it was for you 20 years ago.  You need to adjust your expectations.  But jobs are still there - they just take longer to find. And, of the ones that are looking for someone of your level, most of them understand that this is a hire that is somewhat more important to get right.The net result is that this is a slower process than it was for you 20 years ago.  You need to adjust your expectations.  But jobs are still there - they just take longer to find. The net result is that this is a slower process than it was for you 20 years ago.  You need to adjust your expectations.  But jobs are still there - they just take longer to find. 
reply

 guys from 37 signals are really pushing the post vercel era. 
reply

 
reply

 
reply

 Now it seems like 80% of open positions are for senior developers/engineers, the list of required technologies for these roles is higher than ever, and you're competing with hundreds if not thousands of other candidates too. If you ever want to feel depressed about the market, one look at LinkedIn's candidate numbers for any role is probably gonna do it.As for why this seems to be the case... the best I've heard is that the end of the pandemic shook multiple industries to their cores.Interest rates were good (for these companies) during that time period, so they had money to throw around on hiring developers en masse. And with everyone locked inside, internet based businesses were booming, whether it was online tools like Zoom, media companies like Netflix or gaming companies as a whole.Unfortunately for them, when the pandemic ended, all this went away. People went back to normal life, and in many cases, actually spent far more time offline than ever before. So the stats went down, the beancounters and CEOs panicked, and we've seen the effects ever since.All those companies either shut down, laid off a bunch of staff or outsourced the work to some cheaper locale, and said staff flooded the market. So now it's an employer's market where they can be ultra choosy about who they hire, and where the requirements to get hired are higher than ever. As for why this seems to be the case... the best I've heard is that the end of the pandemic shook multiple industries to their cores.Interest rates were good (for these companies) during that time period, so they had money to throw around on hiring developers en masse. And with everyone locked inside, internet based businesses were booming, whether it was online tools like Zoom, media companies like Netflix or gaming companies as a whole.Unfortunately for them, when the pandemic ended, all this went away. People went back to normal life, and in many cases, actually spent far more time offline than ever before. So the stats went down, the beancounters and CEOs panicked, and we've seen the effects ever since.All those companies either shut down, laid off a bunch of staff or outsourced the work to some cheaper locale, and said staff flooded the market. So now it's an employer's market where they can be ultra choosy about who they hire, and where the requirements to get hired are higher than ever. Interest rates were good (for these companies) during that time period, so they had money to throw around on hiring developers en masse. And with everyone locked inside, internet based businesses were booming, whether it was online tools like Zoom, media companies like Netflix or gaming companies as a whole.Unfortunately for them, when the pandemic ended, all this went away. People went back to normal life, and in many cases, actually spent far more time offline than ever before. So the stats went down, the beancounters and CEOs panicked, and we've seen the effects ever since.All those companies either shut down, laid off a bunch of staff or outsourced the work to some cheaper locale, and said staff flooded the market. So now it's an employer's market where they can be ultra choosy about who they hire, and where the requirements to get hired are higher than ever. Unfortunately for them, when the pandemic ended, all this went away. People went back to normal life, and in many cases, actually spent far more time offline than ever before. So the stats went down, the beancounters and CEOs panicked, and we've seen the effects ever since.All those companies either shut down, laid off a bunch of staff or outsourced the work to some cheaper locale, and said staff flooded the market. So now it's an employer's market where they can be ultra choosy about who they hire, and where the requirements to get hired are higher than ever. All those companies either shut down, laid off a bunch of staff or outsourced the work to some cheaper locale, and said staff flooded the market. So now it's an employer's market where they can be ultra choosy about who they hire, and where the requirements to get hired are higher than ever. 
reply

 The second reason is AI. The biggest use case for LLMs is writing. They are really good at writing, including writing code. Developer are more productive as a result and companies can do more with less people. 
reply

 I don't think there's an end in sight for that issue, and it likely could get worse if the AI surge alleviates (or pops entirely!). It sucks, but I'd look in non-traditional IT places (government, universities, non-tech companies) as many of them are still growing quickly!Graph: https://wolfstreet.com/wp-content/uploads/2024/06/US-employm... Graph: https://wolfstreet.com/wp-content/uploads/2024/06/US-employm... 
reply

 
reply

 
reply

 But for a long time it had been really really good to a point that even people which fairly lacking qualifications could often easily get a job in a very short time frame (through also with some common biases/discrimination e.g. against age, and some positions, like very very well paying ones are still not easy to get).And I would say that times are about to be over soon.Honestly what has me worried the most is that nonsensical bias against age often found, as if having experience for 5,10 years is good but dear you have 20 years of experience in server development not its bad .... wtf. Especially given that I don't buy many of the argument people in favor of it often push. Sure the tech landscape is constantly changing but a lot of the base principle aren't really changing that much only the tooling and how you apply them, even with LLM supported programming that is still true. Similar arguments like older people being less willing to work overtime as IMHO misleading as every time I have seen companies (mostly with young people) do a lot of overtime the results where quite subpar in quality to a point that it created some huge issues often just one or two month down the line (or well days later, in some cases). And sure some people really get stuck up with certain approaches with age (but not all), but as far as I can tell that as less of a risk then blindly following the newest trends (e.g. framework) without a deep understanding of the things it implies mid to long term (which is what I have often seen with younger people).I mean I'm not old yet, but if the industries doesn't fix its mess that will be a problem for me in 10-15 years. (Generally we also need to fix teaching and sustainability of a lot of software development. But that is a different topic, one which has gotten worse through LLMs as they allow keeping unsustainable approaches for a longer time). And I would say that times are about to be over soon.Honestly what has me worried the most is that nonsensical bias against age often found, as if having experience for 5,10 years is good but dear you have 20 years of experience in server development not its bad .... wtf. Especially given that I don't buy many of the argument people in favor of it often push. Sure the tech landscape is constantly changing but a lot of the base principle aren't really changing that much only the tooling and how you apply them, even with LLM supported programming that is still true. Similar arguments like older people being less willing to work overtime as IMHO misleading as every time I have seen companies (mostly with young people) do a lot of overtime the results where quite subpar in quality to a point that it created some huge issues often just one or two month down the line (or well days later, in some cases). And sure some people really get stuck up with certain approaches with age (but not all), but as far as I can tell that as less of a risk then blindly following the newest trends (e.g. framework) without a deep understanding of the things it implies mid to long term (which is what I have often seen with younger people).I mean I'm not old yet, but if the industries doesn't fix its mess that will be a problem for me in 10-15 years. (Generally we also need to fix teaching and sustainability of a lot of software development. But that is a different topic, one which has gotten worse through LLMs as they allow keeping unsustainable approaches for a longer time). Honestly what has me worried the most is that nonsensical bias against age often found, as if having experience for 5,10 years is good but dear you have 20 years of experience in server development not its bad .... wtf. Especially given that I don't buy many of the argument people in favor of it often push. Sure the tech landscape is constantly changing but a lot of the base principle aren't really changing that much only the tooling and how you apply them, even with LLM supported programming that is still true. Similar arguments like older people being less willing to work overtime as IMHO misleading as every time I have seen companies (mostly with young people) do a lot of overtime the results where quite subpar in quality to a point that it created some huge issues often just one or two month down the line (or well days later, in some cases). And sure some people really get stuck up with certain approaches with age (but not all), but as far as I can tell that as less of a risk then blindly following the newest trends (e.g. framework) without a deep understanding of the things it implies mid to long term (which is what I have often seen with younger people).I mean I'm not old yet, but if the industries doesn't fix its mess that will be a problem for me in 10-15 years. (Generally we also need to fix teaching and sustainability of a lot of software development. But that is a different topic, one which has gotten worse through LLMs as they allow keeping unsustainable approaches for a longer time). I mean I'm not old yet, but if the industries doesn't fix its mess that will be a problem for me in 10-15 years. (Generally we also need to fix teaching and sustainability of a lot of software development. But that is a different topic, one which has gotten worse through LLMs as they allow keeping unsustainable approaches for a longer time). 
reply

 
reply

 For every cutting edge startup chasing young people to abuse, there are a dozen existing companies with tons of legacy technical debt.
They don't pay FANG salaries, but they will pay.In my experience lately, it seems like Engineering and Developer positions have taken a hit, but backend infrastructure and DevOps type positions are still very hot, especially if you have cloud automation experience and know your way around Linux. In my experience lately, it seems like Engineering and Developer positions have taken a hit, but backend infrastructure and DevOps type positions are still very hot, especially if you have cloud automation experience and know your way around Linux. 
reply

 
reply

 
reply

 
reply

 And I mean the desirable, well-paying jobs, not the $20/hr service/food jobs that anyone can get. 
reply

 If you're a doctor, and you apply for a hospital job, do they at least reply to acknowledge your application? Do they then send a rejection letter if you're simply 'not what they're looking for'? If they then start to consider you as a candidate, do you have to 'trial cure' a couple of patients, take a cell-function exam, and endure 6 rounds of other interviews and screens before getting on the final shortlist?Tech applications mostly just go into the void (sometimes there's an autoresponder to at least say your application has been received into their system, but often not even that), occasionally they'll give you a rejection letter if you're not suitable, but often they won't bother, and then at any time during the arduous rounds of tests and screenings you may be ghosted; just they can't even be bothered to tell you you're no longer in the funnel.I really don't believe this hiring experience is something inherited or 'caught-up' from other industries. Tech applications mostly just go into the void (sometimes there's an autoresponder to at least say your application has been received into their system, but often not even that), occasionally they'll give you a rejection letter if you're not suitable, but often they won't bother, and then at any time during the arduous rounds of tests and screenings you may be ghosted; just they can't even be bothered to tell you you're no longer in the funnel.I really don't believe this hiring experience is something inherited or 'caught-up' from other industries. I really don't believe this hiring experience is something inherited or 'caught-up' from other industries. 
reply

 I think this shows a better version of trade school is needed for software developers; computer science degrees don't seem to be enough to have confidence in someone's abilities. At least doctors have rigorous schooling and training, arguably even a bit too long and expensive. 
reply

 
reply

 Yes, you can refer to me as a non-techie if you want. I don't find that offensive, but it would just be inaccurate. I am tech-adjacent. 
reply

 The position is now closed and we’re hiring internally instead. 
reply

 
reply

 
reply

 I have outsourced coworkers that I tutor.  They are almost universally pathetic at software development and are a net negative overall.  I get the most done during the times upper management can't overlook the lack of progress on current projects and leave the offshore people to their own devices for a spell, or have fired them as we go through cycles of hiring and firing.  Management just can't stop touching themselves thinking about those sub-minimum wage salaries but somehow never grasp you get what you pay for.Want a job in software development?- Love it for the work not the money.  If you're in it for the money you'll never be good.- Don't chase fads. I know little of crypto, web 3.0 (what version are we on now anyway?), javascript frameworks, and use AI sparingly.  But I know programming and software development well enough to ace the little pointless tests they give in job interviews.- Don't play games with getting hired.  Use people not technology to find a better job.  That means being presentable and personable and networking.  Indeed is not networking it's a marketplace and you're the product.Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. Want a job in software development?- Love it for the work not the money.  If you're in it for the money you'll never be good.- Don't chase fads. I know little of crypto, web 3.0 (what version are we on now anyway?), javascript frameworks, and use AI sparingly.  But I know programming and software development well enough to ace the little pointless tests they give in job interviews.- Don't play games with getting hired.  Use people not technology to find a better job.  That means being presentable and personable and networking.  Indeed is not networking it's a marketplace and you're the product.Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. - Love it for the work not the money.  If you're in it for the money you'll never be good.- Don't chase fads. I know little of crypto, web 3.0 (what version are we on now anyway?), javascript frameworks, and use AI sparingly.  But I know programming and software development well enough to ace the little pointless tests they give in job interviews.- Don't play games with getting hired.  Use people not technology to find a better job.  That means being presentable and personable and networking.  Indeed is not networking it's a marketplace and you're the product.Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. - Don't chase fads. I know little of crypto, web 3.0 (what version are we on now anyway?), javascript frameworks, and use AI sparingly.  But I know programming and software development well enough to ace the little pointless tests they give in job interviews.- Don't play games with getting hired.  Use people not technology to find a better job.  That means being presentable and personable and networking.  Indeed is not networking it's a marketplace and you're the product.Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. - Don't play games with getting hired.  Use people not technology to find a better job.  That means being presentable and personable and networking.  Indeed is not networking it's a marketplace and you're the product.Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. Everyone has reasons not to attempt these things, but believe me when I say I can do it so can you. I have pretty good social anxiety but we're all bozos on this bus and I just keep that in mind at all times. 
reply

 It was their legit policy to fire you if you tried negotiating your salary. 
reply

 
reply

 
reply

 What, older people aren't allowed to work from home? 
reply

 Like the benefits you can get with working from home if you e.g. have a partner and children are much much larger in practice then when you are a single student. Through also the challenges you have to overcome to make working from home viable. With the main challenge being proper working from home needing more space (in general) at home which with high apartment prices isn't always easy. 
reply

 
reply

 
reply

 https://data.indeed.com/#/postingsSelect the ""Sector"" tab, and check the ""IT Operations & Helpdesk"" and
""Software Development"" options under the ""Sector"" dropdown. Select the ""Sector"" tab, and check the ""IT Operations & Helpdesk"" and
""Software Development"" options under the ""Sector"" dropdown. 
reply

 Even assuming rates will start to drop H2 this year and cost of capital will be lower, some of the new-found productivity demand will be consumed by maturing AI tools.tl;dr this looks like the new normal. tl;dr this looks like the new normal. 
reply

 Skilled talent with a good network can find a job fast. I know multiple people who have gotten new jobs within weeks of getting laid off this year.But I also know people who are absolutely struggling to get a job despite being quite good and putting out lots and lots of applications. But I also know people who are absolutely struggling to get a job despite being quite good and putting out lots and lots of applications. 
reply

 I've only heard back from three companies but I've probably applied to over 100 (5+ yoe). 
reply

 > I receive screening call in a bad moment.> Me: ""Right now it's a bit difficult for me. Can we do this at another time, like maybe in 30 minutes?""> Them: ""Sorry, I have another interview at that moment. We'll call you tomorrow.""Of course ""tomorrow"" is euphemism for ""never"", and I knew it, so I wasn't even disappointed when I didn't get the call next day.So yeah my guess is that with so many applicants, interviewers are looking for the absolute tiniest reason to reject anyone.Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". > Me: ""Right now it's a bit difficult for me. Can we do this at another time, like maybe in 30 minutes?""> Them: ""Sorry, I have another interview at that moment. We'll call you tomorrow.""Of course ""tomorrow"" is euphemism for ""never"", and I knew it, so I wasn't even disappointed when I didn't get the call next day.So yeah my guess is that with so many applicants, interviewers are looking for the absolute tiniest reason to reject anyone.Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". > Them: ""Sorry, I have another interview at that moment. We'll call you tomorrow.""Of course ""tomorrow"" is euphemism for ""never"", and I knew it, so I wasn't even disappointed when I didn't get the call next day.So yeah my guess is that with so many applicants, interviewers are looking for the absolute tiniest reason to reject anyone.Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". Of course ""tomorrow"" is euphemism for ""never"", and I knew it, so I wasn't even disappointed when I didn't get the call next day.So yeah my guess is that with so many applicants, interviewers are looking for the absolute tiniest reason to reject anyone.Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". So yeah my guess is that with so many applicants, interviewers are looking for the absolute tiniest reason to reject anyone.Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". Maybe it got even more worse in these last few months compared to the beginning of the year, or maybe it's specific to the company, or maybe both.Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". Because earlier this year I got a call early while I was still sleeping (went to sleep late the previous day) but they were chill and even laughed, saying ""no worries, is it fine at [some hour]?"". 
reply

 Also, some of the migration is to lower the business costs. That too could be addressed. 
reply

 
reply

 
reply

 SPY trajectory is misleading as it is dominated by a small set of companies.https://www.zerohedge.com/markets/fed-chair-powell-admits-bi... https://www.zerohedge.com/markets/fed-chair-powell-admits-bi... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 https://tradingeconomics.com/country-list/interest-rateMost businesses never operate from an operational budget but rather debt. When rates go high, the businesses have to cut the fat. Which generally means the job market tightens.This is but 1 factor in why the governments should be obligated by constitution to balance the budget. Most businesses never operate from an operational budget but rather debt. When rates go high, the businesses have to cut the fat. Which generally means the job market tightens.This is but 1 factor in why the governments should be obligated by constitution to balance the budget. This is but 1 factor in why the governments should be obligated by constitution to balance the budget. 
reply

 
reply

 That model might work if they cut spending during good times.As is, the modern government spending model is that they (almost) constantly increase whether things are going well or poorly. Then the next time there's a downtown, government spending as a portion of the (shrinking) economy is a higher % and therefore it takes more to ""stabilize"" it this time around.Think of driving down the road. If it's a normal straight road in good weather, you minimally adjust the wheel back and forth and if something happens, you have many degrees of freedom and even momentum pointing you in the right direction.Now think of a road at night in a storm with lots of curves. As you tighten your hands on the wheel and steer back and forth, things are quite a bit different. The direction you want to go now vs 10 seconds from now are a little different. And a disruption - however so small - may need a bigger reaction to avoid and a bigger after-reaction to recover. Momentum can easily work against you. As is, the modern government spending model is that they (almost) constantly increase whether things are going well or poorly. Then the next time there's a downtown, government spending as a portion of the (shrinking) economy is a higher % and therefore it takes more to ""stabilize"" it this time around.Think of driving down the road. If it's a normal straight road in good weather, you minimally adjust the wheel back and forth and if something happens, you have many degrees of freedom and even momentum pointing you in the right direction.Now think of a road at night in a storm with lots of curves. As you tighten your hands on the wheel and steer back and forth, things are quite a bit different. The direction you want to go now vs 10 seconds from now are a little different. And a disruption - however so small - may need a bigger reaction to avoid and a bigger after-reaction to recover. Momentum can easily work against you. Think of driving down the road. If it's a normal straight road in good weather, you minimally adjust the wheel back and forth and if something happens, you have many degrees of freedom and even momentum pointing you in the right direction.Now think of a road at night in a storm with lots of curves. As you tighten your hands on the wheel and steer back and forth, things are quite a bit different. The direction you want to go now vs 10 seconds from now are a little different. And a disruption - however so small - may need a bigger reaction to avoid and a bigger after-reaction to recover. Momentum can easily work against you. Now think of a road at night in a storm with lots of curves. As you tighten your hands on the wheel and steer back and forth, things are quite a bit different. The direction you want to go now vs 10 seconds from now are a little different. And a disruption - however so small - may need a bigger reaction to avoid and a bigger after-reaction to recover. Momentum can easily work against you. 
reply

 Nope. Keynes himself created this idea and then disproved it. There's 1 key factor of why this fails EVERYTIME.Lets say the downturn was just the uranium mining industry. Government comes in, adds spending to stabilize. Then you ASSUME the government will stop once the issue is over. Nope. Never ever does. Politicians who created the subsidy move on to other issues and those temporary government measures become permanent.This is a big gap for the difference between theory and practice.On occasion you'll hear about the need to end corporate welfare. Nobody ever actually does it, but then when that industry bounces back, they are supercharged by free subsidies. Then the next politician is told, you can cut but it's going to cause people to lose jobs. Which is true.Government should never be in this business to start with. Lets say the downturn was just the uranium mining industry. Government comes in, adds spending to stabilize. Then you ASSUME the government will stop once the issue is over. Nope. Never ever does. Politicians who created the subsidy move on to other issues and those temporary government measures become permanent.This is a big gap for the difference between theory and practice.On occasion you'll hear about the need to end corporate welfare. Nobody ever actually does it, but then when that industry bounces back, they are supercharged by free subsidies. Then the next politician is told, you can cut but it's going to cause people to lose jobs. Which is true.Government should never be in this business to start with. This is a big gap for the difference between theory and practice.On occasion you'll hear about the need to end corporate welfare. Nobody ever actually does it, but then when that industry bounces back, they are supercharged by free subsidies. Then the next politician is told, you can cut but it's going to cause people to lose jobs. Which is true.Government should never be in this business to start with. On occasion you'll hear about the need to end corporate welfare. Nobody ever actually does it, but then when that industry bounces back, they are supercharged by free subsidies. Then the next politician is told, you can cut but it's going to cause people to lose jobs. Which is true.Government should never be in this business to start with. Government should never be in this business to start with. 
reply

"
17,,Reworkd (YC S23) Is Hiring a founding back end/infrastructure engineer,https://www.ycombinator.com/companies/reworkd/jobs/4f6BHpT-founding-engineer,"As a Founding Backend Engineer at Reworkd, you will shape the future of LLM agents interacting with the web. In your first month you may:
Build a robust queuing system to handle 1M+ compute heavy (Playwright) jobs a day
Migrate an existing pool of batch worke…",2024-06-13T12:00:36Z,"The simplest way to extract web data at scale As a Founding Backend Engineer at Reworkd, you will shape the future of LLM agents interacting with the web. In your first month you may: 
Responsibilities: 
Qualifications and Skills: 
Compensation: The base compensation for this role is $130,000 - $160,000 USD per year. In addition, you will also receive equity-based compensation, a top tier medical/dental/vision plan, and unlimited PTO. In addition, we also host weekly team outings, team dinners and will even give you a haircut (no seriously, our COO is a barber). 
Reworkd is an in-person company, our brand new office is located in the heart of San Francisco. Successful candidates will be required to relocate if they do not already live in the Bay Area. 
Interview Process: We like to keep interview loops short but want actual in person working sessions so each of us can determine if we’re the right fit Step 1: 30 min intro call with a founder Step 2: 1 hour technical call with founding team Step 3: A pair programming session with technical team 
Reworkd is committed to fostering and empowering an inclusive community within our organization. We do not discriminate on the basis of race, religion, color, gender expression or identity, sexual orientation, national origin, citizenship, age, marital status, veteran status, disability status, or any other characteristic protected by law. Reworkd encourages everyone to apply for our available positions, even if they don't necessarily check every box on the job description. At Reworkd, we’re working on multimodal LLM agents to extract structured web data at scale. Since inception, Reworkd has been one of the leaders in AI Agents, having built and scaled AgentGPT to over 1M+ monthly users. We are a team of engineers and operators from leading CS universities such as UBC, CMU and SFU. Our team has prior experience at organizations such as AWS, Article, and Microsoft AI. Currently a small, fast moving team of four, we’ve built every layer our our LLM/Agent stack including: evals, prompt design, LLM/Agent routing and custom OCR pipelines. Additionally, we’re backed by top tier investors including Y Combinator, Paul Graham, SV Angel, General Catalyst, AI Grant, and many more. © 2024 Y Combinator"
18,,Launch HN: Overwatch (YC S22): OSINT platform for cyber and fraud risk,https://news.ycombinator.com/item?id=40659236,Comments,2024-06-12T15:32:53Z,"Overwatch began when we were working with risk and threat intel teams at Google, Stripe, and government. We experienced the immense challenge every fraud and cyber threat analyst faces: manually parsing through an ocean of data to find valuable insights and filter out the noise. This included using many of the feeds and tools out there that were often very expensive, noisy, keyword-based, and lacked accurate entity extraction or advanced query features.Most threat intelligence tools utilize thousands of keywords and teams of analysts to manually sift through torrents of alerts. These alerts are usually individual posts on various platforms across news, social media, deep and dark web sources that have some matching keyword. This is full of false positives, requiring many hours to wade through to figure out what intel matters most to our users, why, and what they can do next.Overwatch uses an alternative approach by layering AI agents and NLP techniques, including a combination of multifarious datasets, cluster analysis, topic modeling, Retrieval Augmented Language Models (RALM) and domain knowledgeable agents.This allows us to (1) Filter through OSINT in real time to identify events and narratives that matter to our users, and write reports on what they could do about it; (2) Identify dark web and deep web threats, fraud methods, new tactics, and compromised accounts, stolen checks, and credentials affecting our users or their peers; (3) Send an alert any time one a 3rd party supplier or parts of the tech stack are impacted by a widely exploited vulnerability, ransomware attack, or breach; and (4) Track malware and ransomware groups that are actively targeting your industry including Indicators of Compromise (IOCs).Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Most threat intelligence tools utilize thousands of keywords and teams of analysts to manually sift through torrents of alerts. These alerts are usually individual posts on various platforms across news, social media, deep and dark web sources that have some matching keyword. This is full of false positives, requiring many hours to wade through to figure out what intel matters most to our users, why, and what they can do next.Overwatch uses an alternative approach by layering AI agents and NLP techniques, including a combination of multifarious datasets, cluster analysis, topic modeling, Retrieval Augmented Language Models (RALM) and domain knowledgeable agents.This allows us to (1) Filter through OSINT in real time to identify events and narratives that matter to our users, and write reports on what they could do about it; (2) Identify dark web and deep web threats, fraud methods, new tactics, and compromised accounts, stolen checks, and credentials affecting our users or their peers; (3) Send an alert any time one a 3rd party supplier or parts of the tech stack are impacted by a widely exploited vulnerability, ransomware attack, or breach; and (4) Track malware and ransomware groups that are actively targeting your industry including Indicators of Compromise (IOCs).Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Overwatch uses an alternative approach by layering AI agents and NLP techniques, including a combination of multifarious datasets, cluster analysis, topic modeling, Retrieval Augmented Language Models (RALM) and domain knowledgeable agents.This allows us to (1) Filter through OSINT in real time to identify events and narratives that matter to our users, and write reports on what they could do about it; (2) Identify dark web and deep web threats, fraud methods, new tactics, and compromised accounts, stolen checks, and credentials affecting our users or their peers; (3) Send an alert any time one a 3rd party supplier or parts of the tech stack are impacted by a widely exploited vulnerability, ransomware attack, or breach; and (4) Track malware and ransomware groups that are actively targeting your industry including Indicators of Compromise (IOCs).Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! This allows us to (1) Filter through OSINT in real time to identify events and narratives that matter to our users, and write reports on what they could do about it; (2) Identify dark web and deep web threats, fraud methods, new tactics, and compromised accounts, stolen checks, and credentials affecting our users or their peers; (3) Send an alert any time one a 3rd party supplier or parts of the tech stack are impacted by a widely exploited vulnerability, ransomware attack, or breach; and (4) Track malware and ransomware groups that are actively targeting your industry including Indicators of Compromise (IOCs).Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Our intelligence is actionable because the alert comes with the context and important details that an analyst needs to make an informed decision. Being AI-native, we also have a range of chat and data visualization features to effectively function as an intel co-pilot or industry expert. Finally, our in-house intelligence analysts and investigators can assist threat intelligence teams with HUMINT investigations and darkweb acquisition.Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Our current customers include internet platforms, financial institutions, and supply chain companies. Within a day of one breach, one of our customers used Overwatch to surface 18,000+ leaked credentials. Another used us to surface fraudulent checks and learn exactly how threat actors were targeting their specific product features.Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Our website says “Request a demo” but if you want to poke around on a very basic example of how we’re aggregating dark web, deep web, social, and surface web, log in at https://app.overwatchdata.io/ using these credentials:
  username: try_overwatch@overwatchdata.io 
  pw: HelloHNWorldThat login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! That login is for an un-personalized feed of cyber threat intel (breaches, vulnerabilities, ransomed organizations, and industry updates) that gives you a flavor of not just the kind of information from which we can collect, but more importantly, how our technology prioritizes, clusters, and summarizes alerts for cyber / fraud analysts. Try the chat agent on the left-hand side to parse through the data.Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Or sign up for a longer trial and preview of our email alerts: https://xryl45u9uep.typeform.com/to/pvtZQyS0. You can also check out our clickthrough demo for dark and deep web intelligence: https://app.storylane.io/share/qyayvtamapis.Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Integration options range from simple dashboard access to our API for those who want to weave our intelligence directly into other products. Pricing is dependent on how complex a threat landscape our users want to monitor and we’re still figuring out how to standardize this but we’ll always do our best for the HN community.Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! Since the platform is AI-powered, it can also be used for news monitoring, supply chain disruptions, regulatory monitoring, or social media monitoring. We’ve had a lot of experience wrangling text-based feeds and using numerous AI-models (from embeddings, entity extractors, and LLMs) to filter, categorize, cluster, and analyze the data into meaning - so let us know if you’d like to nerd-out or have had any particular challenges. Looking forward to your feedback and questions! Thanks, HN! That said, love the initiative and focus on this space and there’s probably an opportunity to sell your data to hedge funds. 
reply

 
reply

 Since the model summaries would still need to be validated against the source results manually, your business' actual viability as a product hinges on whether customers perceive a significant time savings in the data provided via these channels over historical aggregation methods (like keyword analysis that you mentioned) and level of false positives.What do you measure as the largest impact here? Is there a large time savings, is it additional discovery from blindspots that other methods don't cover? Both? Are there additional benefits you see to this model beyond automation and expanded discovery? What do you measure as the largest impact here? Is there a large time savings, is it additional discovery from blindspots that other methods don't cover? Both? Are there additional benefits you see to this model beyond automation and expanded discovery? 
reply

 We not just help with relevant detection, but also automate some of the next two steps as well. Bringing the total weekly time saved down to a few minutes a day. 
reply

 
reply

 
reply

 This type of information (OSINT of vulns/cves, proof of concepts) is useful for the Blue team side of defending against attackers. With easy to access information in a timely manner, the defenders can proactively put roadblocks and alerts into place for vulnerabilities as opposes to AFTER they are popped/hacked by such.Prevention is ideal; detection, a must. Prevention is ideal; detection, a must. 
reply

 
reply

 
reply

 I know platforms like Flare are cool but when you need to monitor hundreds or even thousands of corporate keywords, domains, and assets, it becomes cheaper for CTI to just write the tools themselves.What does your platform look like in regards to this and pricing?For example, your pricing for monitoring 100 keywords and pricing for monitoring 500 keywords.200k unique telegram channels is an interesting stat.Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels/groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds? What does your platform look like in regards to this and pricing?For example, your pricing for monitoring 100 keywords and pricing for monitoring 500 keywords.200k unique telegram channels is an interesting stat.Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels/groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds? For example, your pricing for monitoring 100 keywords and pricing for monitoring 500 keywords.200k unique telegram channels is an interesting stat.Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels/groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds? 200k unique telegram channels is an interesting stat.Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels/groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds? Each Telegram account (if paid Premium account) can only be in 1k channels and groups max. To monitor 200k unique channels/groups, you have a network of at least 200 paid Telegram accounts continuously monitoring? Are you using Pyrogram or Telethon for this? Are these accounts owned by you (Overwatch) or are you just using a bunch of 3rd party Telegram intel feeds? 
reply

 
reply

 I would like an answer on the Telegram questions tho :) 
reply

 
reply

 
reply

 
reply

 
reply

 I have a lot of experience with this kind of tool and workflow from at least three perspectives: internal builds; vendor; and consumer of vendor products such as this one. Happy to talk more if you're interested 
reply

 
reply

 
reply

 
reply

 
reply

 It looks like you're embedding data from Twitter - are you paying for decahose/enterprise access or just paying for a low volume of high value tweets (i.e. I'm seeing many from FalconFeedsio, DailyDarkWeb) 
reply

 
reply

 Seems like this is going to become a cat and mouse game similar to evading AV. 
reply

 To your point catching every threat or every alert especially on darkweb is always a cat and mouse game.  Our idea is a prioritization problem – how do you mitigate the biggest risks quickly.The existing OSINT tools we used are keyword search based / pretty noisy so we’ve been focusing on the idea that given there’s no way analysts can find or triage every alert, how do you catch the biggest stuff.  We do a few things from AI crawlers to continue to expand data collections to AI categorization, clustering, data extraction etc to make it easier to track the cover the most ground. The existing OSINT tools we used are keyword search based / pretty noisy so we’ve been focusing on the idea that given there’s no way analysts can find or triage every alert, how do you catch the biggest stuff.  We do a few things from AI crawlers to continue to expand data collections to AI categorization, clustering, data extraction etc to make it easier to track the cover the most ground. 
reply

 
reply

 OSINT is about gathering data from public or semi-public places.There are plenty of private dark web forums that these kinds of tools probably don't have visibility into, but the bigger public well-known ones are where you are most likely to see high-profile breaches being sold (since there's a wider audience and actors want to sell data quickly before it devalues), so it's certainly better than nothing... There are plenty of private dark web forums that these kinds of tools probably don't have visibility into, but the bigger public well-known ones are where you are most likely to see high-profile breaches being sold (since there's a wider audience and actors want to sell data quickly before it devalues), so it's certainly better than nothing... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I have all sorts of issues with Vanta/Drata ""compliance as a service"" tools, but adequate for something like this, at this point in time. 
reply

 Most of my employment has been in the security auditing/testing space, and the difference between “bolting it on later” and “building it in from the start” is incredible from both a purely technical and a process standpoint. 
reply

 
reply

 Would this be a service you would ever offer to regular researchers? 
reply

 Opening up certain components of the platform is something we are definitely looking into and passionate about. 
reply

 
reply

 
reply

 
reply

 
reply

 -Personalization: The platform can be fully customized to your interests, e.g. 3rd party vendors, tech stack, products, peers or industry. It’s like having your personalized threat intel org that cuts through the noise. Each of the alerts are ranked and tailored to your interests.-Customization: The platform can be used for a range of use cases, with agents undertaking tasks ranging from finding and extracting check, loan, and credit card fraud, risky narratives about your brand, through to breaches or emerging ransomware groups targeting your tech stack or vendors. Those agents can even identify breaking events that could be near your assets.-So what and now what: Each report provides finished intel, whether finding or extracting relevant indicators of compromise, background on the threat actor and victim, compromised credentials, or compromised credit cards and checks. We're training our agents to be even more specific with answers e.g. ""what IOCs relate to malware groups most active in the airline industry"". We can even automate workflows through integrations or creating cases/escalations for specific teams. -Customization: The platform can be used for a range of use cases, with agents undertaking tasks ranging from finding and extracting check, loan, and credit card fraud, risky narratives about your brand, through to breaches or emerging ransomware groups targeting your tech stack or vendors. Those agents can even identify breaking events that could be near your assets.-So what and now what: Each report provides finished intel, whether finding or extracting relevant indicators of compromise, background on the threat actor and victim, compromised credentials, or compromised credit cards and checks. We're training our agents to be even more specific with answers e.g. ""what IOCs relate to malware groups most active in the airline industry"". We can even automate workflows through integrations or creating cases/escalations for specific teams. -So what and now what: Each report provides finished intel, whether finding or extracting relevant indicators of compromise, background on the threat actor and victim, compromised credentials, or compromised credit cards and checks. We're training our agents to be even more specific with answers e.g. ""what IOCs relate to malware groups most active in the airline industry"". We can even automate workflows through integrations or creating cases/escalations for specific teams. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 If anyone wants to share an email address with other users, it needs to go in the About box. 
reply

 
reply

 
reply

 
reply

 
reply

 We (https://www.newscatcherapi.com/) also serve the same use case but only for the news analysis part. And we don’t really have a UI: it’s all data accessible via an API.I see a lot of questions here about comparing Overwatch to other OSINT tools. The ability to customize/personalize is a huge difference.In my experience, clients with the most expensive problems are super underserved because there is no “Palantir-like” solutions.Don’t get me wrong: you don’t have to do consulting — just tweak the onboarding/set up. Making bespoke solution for the companies with the biggest problems is a great way to get into the market. And it can work on the huge scale. E.g. Palantir.An example from what we have as a very typical situation at NewsCatcher: a big bank is absolutely blown away because we actually can find news about private companies that they need to track with minimum false positives. And all we have to do is to tweak a bit our entity disambiguation module to work with the data points that the bank actually has. I see a lot of questions here about comparing Overwatch to other OSINT tools. The ability to customize/personalize is a huge difference.In my experience, clients with the most expensive problems are super underserved because there is no “Palantir-like” solutions.Don’t get me wrong: you don’t have to do consulting — just tweak the onboarding/set up. Making bespoke solution for the companies with the biggest problems is a great way to get into the market. And it can work on the huge scale. E.g. Palantir.An example from what we have as a very typical situation at NewsCatcher: a big bank is absolutely blown away because we actually can find news about private companies that they need to track with minimum false positives. And all we have to do is to tweak a bit our entity disambiguation module to work with the data points that the bank actually has. In my experience, clients with the most expensive problems are super underserved because there is no “Palantir-like” solutions.Don’t get me wrong: you don’t have to do consulting — just tweak the onboarding/set up. Making bespoke solution for the companies with the biggest problems is a great way to get into the market. And it can work on the huge scale. E.g. Palantir.An example from what we have as a very typical situation at NewsCatcher: a big bank is absolutely blown away because we actually can find news about private companies that they need to track with minimum false positives. And all we have to do is to tweak a bit our entity disambiguation module to work with the data points that the bank actually has. Don’t get me wrong: you don’t have to do consulting — just tweak the onboarding/set up. Making bespoke solution for the companies with the biggest problems is a great way to get into the market. And it can work on the huge scale. E.g. Palantir.An example from what we have as a very typical situation at NewsCatcher: a big bank is absolutely blown away because we actually can find news about private companies that they need to track with minimum false positives. And all we have to do is to tweak a bit our entity disambiguation module to work with the data points that the bank actually has. An example from what we have as a very typical situation at NewsCatcher: a big bank is absolutely blown away because we actually can find news about private companies that they need to track with minimum false positives. And all we have to do is to tweak a bit our entity disambiguation module to work with the data points that the bank actually has. 
reply

 
reply

 
reply

 I would hesitate with the name though. Overwatch is also a game series from Blizzard.And Blizzard is known to be a little sue-addicted. And Blizzard is known to be a little sue-addicted. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Consider Venn diagrams: the audience for these two homynymous products has small overlap. Further moderated when you consider term stickiness to respective meanings is only high for a small fraction of that audience.In other words, most people aware of both can cope with a mutual name. And some may even think it's cool. Each name enhancing the other through association and analogy.Overwatch is definitely the right choice. Consider the 'OG' meaning originates from military terminology. In this context, ""overwatch"" refers to a tactical position where one unit provides covering fire and surveillance for another unit as it moves forward or performs an action. The overwatch position is typically elevated or strategically placed to have a clear view of the battlefield, allowing the overwatching unit to detect threats and engage enemies to protect the advancing or exposed units.This concept ensures that the moving or vulnerable unit can operate with reduced risk, as the overwatching unit can neutralize potential dangers and provide critical information about the surroundings. The practice of overwatch is a fundamental tactic in military operations, emphasizing teamwork, communication, and strategic positioning. In other words, most people aware of both can cope with a mutual name. And some may even think it's cool. Each name enhancing the other through association and analogy.Overwatch is definitely the right choice. Consider the 'OG' meaning originates from military terminology. In this context, ""overwatch"" refers to a tactical position where one unit provides covering fire and surveillance for another unit as it moves forward or performs an action. The overwatch position is typically elevated or strategically placed to have a clear view of the battlefield, allowing the overwatching unit to detect threats and engage enemies to protect the advancing or exposed units.This concept ensures that the moving or vulnerable unit can operate with reduced risk, as the overwatching unit can neutralize potential dangers and provide critical information about the surroundings. The practice of overwatch is a fundamental tactic in military operations, emphasizing teamwork, communication, and strategic positioning. Overwatch is definitely the right choice. Consider the 'OG' meaning originates from military terminology. In this context, ""overwatch"" refers to a tactical position where one unit provides covering fire and surveillance for another unit as it moves forward or performs an action. The overwatch position is typically elevated or strategically placed to have a clear view of the battlefield, allowing the overwatching unit to detect threats and engage enemies to protect the advancing or exposed units.This concept ensures that the moving or vulnerable unit can operate with reduced risk, as the overwatching unit can neutralize potential dangers and provide critical information about the surroundings. The practice of overwatch is a fundamental tactic in military operations, emphasizing teamwork, communication, and strategic positioning. This concept ensures that the moving or vulnerable unit can operate with reduced risk, as the overwatching unit can neutralize potential dangers and provide critical information about the surroundings. The practice of overwatch is a fundamental tactic in military operations, emphasizing teamwork, communication, and strategic positioning. 
reply

 
reply

 I don't think of what you call the 'theoretical' aspects as being purely theoretical, I think they're practical and conceptually associative and have provided a great name.I do know of the game (but I haven't played it haha!), but I don't think it's a problem. I understand that you do. We'll see! Hahaha! :)I'm no expert in SEO but it seems like it could go both ways and even boost it. For people's mental aspect, think the recall of this term will be boosted by there also being a famous game, and I don't think people will be confused by these two different categories.What makes you think they will? What other examples have you seen where this happens? I do know of the game (but I haven't played it haha!), but I don't think it's a problem. I understand that you do. We'll see! Hahaha! :)I'm no expert in SEO but it seems like it could go both ways and even boost it. For people's mental aspect, think the recall of this term will be boosted by there also being a famous game, and I don't think people will be confused by these two different categories.What makes you think they will? What other examples have you seen where this happens? I'm no expert in SEO but it seems like it could go both ways and even boost it. For people's mental aspect, think the recall of this term will be boosted by there also being a famous game, and I don't think people will be confused by these two different categories.What makes you think they will? What other examples have you seen where this happens? What makes you think they will? What other examples have you seen where this happens? 
reply

 Try it and find out? 
reply

 Definitely something to consider, but more in the ""send a note to a trademark lawyer and marketing folks"" than ""rename our entire product and brand"". 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 > Computer game software, [ computer game discs, ] downloadable computer game programs, computer game software downloadable from a global computer network, electronic games software for wireless devices, interactive multimedia computer game programs, mousepads, computer mouses, headsets for use with computers, computer keyboards> Printed matter, namely, [ computer game strategy guides, ] comic books, graphic novels, novels, art books, calendars, posters, [ notebooks, ] and stickers> Entertainment services, namely, providing on-line computer games; Providing computer games that are accessed via a global computer network> Clothing, and headgear, namely, caps, hats, hooded sweatshirts, jackets, sweaters, and T-shirts> Toys, games, and playthings, namely, action figures, collectible toy figures, dolls, plush toys, and vinyl toy figureshttps://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. > Printed matter, namely, [ computer game strategy guides, ] comic books, graphic novels, novels, art books, calendars, posters, [ notebooks, ] and stickers> Entertainment services, namely, providing on-line computer games; Providing computer games that are accessed via a global computer network> Clothing, and headgear, namely, caps, hats, hooded sweatshirts, jackets, sweaters, and T-shirts> Toys, games, and playthings, namely, action figures, collectible toy figures, dolls, plush toys, and vinyl toy figureshttps://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. > Entertainment services, namely, providing on-line computer games; Providing computer games that are accessed via a global computer network> Clothing, and headgear, namely, caps, hats, hooded sweatshirts, jackets, sweaters, and T-shirts> Toys, games, and playthings, namely, action figures, collectible toy figures, dolls, plush toys, and vinyl toy figureshttps://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. > Clothing, and headgear, namely, caps, hats, hooded sweatshirts, jackets, sweaters, and T-shirts> Toys, games, and playthings, namely, action figures, collectible toy figures, dolls, plush toys, and vinyl toy figureshttps://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. > Toys, games, and playthings, namely, action figures, collectible toy figures, dolls, plush toys, and vinyl toy figureshttps://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. https://tsdr.uspto.gov/#caseNumber=86239314&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. https://tsdr.uspto.gov/#caseNumber=86434530&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. https://tsdr.uspto.gov/#caseNumber=86239318&caseSearchType=U...https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. https://tsdr.uspto.gov/#caseNumber=86980853&caseSearchType=U...A search for ""overwatch"" currently matches 191 registered trademarks in the US. A search for ""overwatch"" currently matches 191 registered trademarks in the US. 
reply

 
reply

 Trademarks do not cover all uses of a word -- they only cover the use of a word in relation to a particular field of commerce.  This is, likewise, why your grocery store can sell apples without being afraid of the equally litigious Apple Inc. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
19,,"Ask HN: What are your favorite parables, anecdotes, idioms, etc.?",https://news.ycombinator.com/item?id=40651585,Comments,2024-06-11T21:16:12Z,"Once there was a man on a long journey who came to a river. He said to himself: “This side of the river is very difficult and dangerous to walk on, and the other side seems easier and safer, but how shall I get across?” So he built a raft out of branches and reeds and safely crossed the river. Then he thought to himself: “This raft has been very useful to me in crossing the river; I will not abandon it to rot on the bank, but will carry it along with me.” And thus he voluntarily assumed an unnecessary burden. 
reply

 
reply

 
reply

 
reply

 Anything worth doing is worth doing poorly. (A less obvious but more memorable way of saying don't let perfect be the enemy of good) 
reply

 William Arthur Ward 
reply

 
reply

 There are only 2 hard problems in computer science:1. Naming things
2. Cache invalidation
3. Off-by-one errors
0. Asynchronous callbacks
7. Buffer overflowA203FE11980018900000 1. Naming things
2. Cache invalidation
3. Off-by-one errors
0. Asynchronous callbacks
7. Buffer overflowA203FE11980018900000 
reply

 
reply

 
reply

 
reply

 ""There are no choices. Nothing but a straight line. The illusion comes afterwards, when you ask 'Why me?' and 'What if?' When you look back, see the branches, like a pruned bonsai tree, or a forked lightning. If you had done something differently, it wouldn't be you, it would be someone else looking back, asking a different set of questions.."" 
reply

 
reply

 
reply

 
reply

 
reply

 Adolescense ends when you realize that just because you can does not mean you should.One form of evil is trying to make others suffer because you are.Parenting is love and consequences One form of evil is trying to make others suffer because you are.Parenting is love and consequences Parenting is love and consequences 
reply

 over the years, i kept my interesting finds at https://jerrynsh.com/food-for-thought/ 
reply

 1. We will burn that bridge when we get to it.2. You cannot make a computer run faster but you can make it do less. 2. You cannot make a computer run faster but you can make it do less. 
reply

 
reply

 
reply

 So what people should really say is that someone wants to “eat their cake and have it too” but they don’t. But that’s really what they mean by the saying “have your cake and eat it too”. 
reply

 
reply

 
reply

 german, roughly - ""What Hans did not learn, his son will never learn.""It is so obviously wrong as a generalized truth but painfully accurate on occasion. Cool about it: The reaction of others towards this saying is a great signal on their views regarding life, society and education. It is so obviously wrong as a generalized truth but painfully accurate on occasion. Cool about it: The reaction of others towards this saying is a great signal on their views regarding life, society and education. 
reply

 
reply

 
reply

 It's tough. The internet has taught people the value in branding/advertising. I'm too exhausted from doing the work they skipped. 
reply

 One of my UK vendors recently said, ""this went off like a damp squib"" for something that didn't go over well.  Basically means a firework that didn't light because it was wet. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Drill sergeant asking recruit if he understands what he has just been told. 
reply

 
reply

 
reply

 
reply

 and the P is for Privacy. 
reply

 
reply

 
reply

 
reply

 
reply

 1. a city dweller was driving through the countryside when he saw a ladder propped against a tree, and a man on top of it holding a goat. he's curious enough to stop and find out what's going on. the guy says ""oh, I'm feeding my goat leaves off the tree"". the city guy asks ""but doesn't that waste a lot of time?"", and the farmer looks at him like he's an idiot and says ""what's time to a goat?""2. this one is from back when lift operators were a thing. the lift doors open and there's a furious guy waiting there, who immediately yells ""where the hell have you been?!"". the operator calmly replies ""dude, where can you go in a lift?"" 2. this one is from back when lift operators were a thing. the lift doors open and there's a furious guy waiting there, who immediately yells ""where the hell have you been?!"". the operator calmly replies ""dude, where can you go in a lift?"" 
reply

 Also, there's more than one way to bell a cat. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 (Jokes about recursion are always funny, take, for instance, this one.) 
reply

 
reply

 
reply

 
reply

 
reply

 ""No, of course not! Only test the code that's supposed to work."" 
reply

 
reply

 
reply

 Now they have 2 problems."" 
reply

 
reply

 
reply

 
reply

 
reply

 Everything I need to know about business in one line of one old story. 
reply

 Many great sopranos quotes to go along, such as..""Much like a child, a film has many parents"". ""Much like a child, a film has many parents"". 
reply

"
20,,Ask HN: Am I dead meat already?,https://news.ycombinator.com/item?id=40644194,Comments,2024-06-11T09:24:40Z,"After enduring bad behavior for nth time (yeah it's a toxic workplace) I decided I had enough and did a round of applications. Mostly for backend positions and mostly for golang positions. I don't have prod xp with golang but it's close to C and every time I've used it it seemed ok. But the problem is that I'm either being ignored or skipped over. All jobs are for seniors in the _specific_tech_stack_. Other positions I've applied for and got no response whatsoever are architects, tech managers and the like. Granded, this regards a turd job market (EU/Greece) but still that's where I am at.Am I toasted for good? I mean, nearing my 50s with my most recent gig writing ""C"" on it is as good as declaring my career over? Am I toasted for good? I mean, nearing my 50s with my most recent gig writing ""C"" on it is as good as declaring my career over? A few years later I actually started working in Java and Python, and then iPhone came along and I was right back in C land again!Then in 2016 I got a job writing in Go, which lasted 2 years - aaaaand now I'm back to writing C (and C++) again - 25 years after my C-career crisis.It's not like I'm actively seeking C jobs - I'm a polyglot and can handle pretty much anything. But again and again these C jobs just keep coming out of the woodwork... And I can command premium salary because there just aren't many skilled C developers anymore. Then in 2016 I got a job writing in Go, which lasted 2 years - aaaaand now I'm back to writing C (and C++) again - 25 years after my C-career crisis.It's not like I'm actively seeking C jobs - I'm a polyglot and can handle pretty much anything. But again and again these C jobs just keep coming out of the woodwork... And I can command premium salary because there just aren't many skilled C developers anymore. It's not like I'm actively seeking C jobs - I'm a polyglot and can handle pretty much anything. But again and again these C jobs just keep coming out of the woodwork... And I can command premium salary because there just aren't many skilled C developers anymore. 
reply

 As soon as something basic goes down or when you have unexpected dives into low level stuff, the fair weather pilots are suddenly out of their depth.I started with C, eventually moved into business roles and honestly wasn't even that good a dev. But looking at the uncertainty ahead in the world from a climate point of view, I sometimes worry about the future of tech talent.We are losing tech veterans at a high rate and gaining a lot of chatgpt devs. I once remember a stackoverflow outage from my dev days and a large part of team went on vacation in the second half as we were so used to asking and copying.Any fragility to modern infra will make us fall so hard on our faces I fear and hope I am wrong. I started with C, eventually moved into business roles and honestly wasn't even that good a dev. But looking at the uncertainty ahead in the world from a climate point of view, I sometimes worry about the future of tech talent.We are losing tech veterans at a high rate and gaining a lot of chatgpt devs. I once remember a stackoverflow outage from my dev days and a large part of team went on vacation in the second half as we were so used to asking and copying.Any fragility to modern infra will make us fall so hard on our faces I fear and hope I am wrong. We are losing tech veterans at a high rate and gaining a lot of chatgpt devs. I once remember a stackoverflow outage from my dev days and a large part of team went on vacation in the second half as we were so used to asking and copying.Any fragility to modern infra will make us fall so hard on our faces I fear and hope I am wrong. Any fragility to modern infra will make us fall so hard on our faces I fear and hope I am wrong. 
reply

 I still remember a colleague complaining to me in 2001 about a crash they were having in the data entry app (written in Java) that was wreaking havoc in the bank's check clearing department. The stack trace would go to JNI, into a vendor's .so and then SIGSEGV with an address of 0. The trouble was, nobody knew anything below Java.I tracked down the issue after examining the crash report over lunch for shits and giggles. It failed in memcpy because it was trying to copy a null pointer. I disassembled the vendor's .so and checked the offsets to see where the code was going, and it turned out that the fingerprint reader code would return a null if it failed to scan properly (and the library had no null check). The vendor refused to fix it, so I patched the .so with a few nops, an xor and a je to work around it.Everyone looked at me like I was some kind of god who commanded the very chips themselves.Once the old guard is gone, I wonder what they'll do... I tracked down the issue after examining the crash report over lunch for shits and giggles. It failed in memcpy because it was trying to copy a null pointer. I disassembled the vendor's .so and checked the offsets to see where the code was going, and it turned out that the fingerprint reader code would return a null if it failed to scan properly (and the library had no null check). The vendor refused to fix it, so I patched the .so with a few nops, an xor and a je to work around it.Everyone looked at me like I was some kind of god who commanded the very chips themselves.Once the old guard is gone, I wonder what they'll do... Everyone looked at me like I was some kind of god who commanded the very chips themselves.Once the old guard is gone, I wonder what they'll do... Once the old guard is gone, I wonder what they'll do... 
reply

 Any sufficiently advanced technology is indistinguishable from magic.Maybe now's the right time to start the cult of the machine wizards and secretly pass on your wisdom about disassemblers. I'm only half joking because reality already passed the point where regular people pray for the machine to respect their wishes. And make sure you price your Java exorcism correctly. I'd say a little church covered in gold is fair. Maybe now's the right time to start the cult of the machine wizards and secretly pass on your wisdom about disassemblers. I'm only half joking because reality already passed the point where regular people pray for the machine to respect their wishes. And make sure you price your Java exorcism correctly. I'd say a little church covered in gold is fair. 
reply

 Joe Grand and  $3M of Bitcoin: https://youtu.be/o5IySpAkThg 
reply

 The current generation of addy addicted highschoolers posting anticheat bypasses on unknowncheats will grow into the job market and take up the mantle. 
reply

 Then they just jump jobs and get a 50% raise after enduring the ""poor work environment"" at their previous job. 
reply

 This is not you but the market. Consolidate and don't take this as a judgement on your skills sir.C will never go out of fashion. C will never go out of fashion. 
reply

 That might be rather harsh wording, but I wouldn't rule it out entirely.I am in my mid 40s, have been professionally in the business since my 20s and recently ""migrated"" out as I did not see much potential in it any more.Admittedly, it also depends on how flexible you are and how willing to adopt the latest trends (to avoid saying fads :) ). If you feel comfortable with that, it shouldn't be ""impossible"" to stay in the field but the age will certainly still play a factor.I am not sure how good my advice can be, but if you want to stay technical and with Go, I'd say keep applying for such positions. Many companies will reject you because you may not fulfill their arbitrary requirements, but there'll be eventually a company who recognises your experience and your abilities.While I am probably biased, I would still say programming has become a rather tough market these days for anyone 35+ I am in my mid 40s, have been professionally in the business since my 20s and recently ""migrated"" out as I did not see much potential in it any more.Admittedly, it also depends on how flexible you are and how willing to adopt the latest trends (to avoid saying fads :) ). If you feel comfortable with that, it shouldn't be ""impossible"" to stay in the field but the age will certainly still play a factor.I am not sure how good my advice can be, but if you want to stay technical and with Go, I'd say keep applying for such positions. Many companies will reject you because you may not fulfill their arbitrary requirements, but there'll be eventually a company who recognises your experience and your abilities.While I am probably biased, I would still say programming has become a rather tough market these days for anyone 35+ Admittedly, it also depends on how flexible you are and how willing to adopt the latest trends (to avoid saying fads :) ). If you feel comfortable with that, it shouldn't be ""impossible"" to stay in the field but the age will certainly still play a factor.I am not sure how good my advice can be, but if you want to stay technical and with Go, I'd say keep applying for such positions. Many companies will reject you because you may not fulfill their arbitrary requirements, but there'll be eventually a company who recognises your experience and your abilities.While I am probably biased, I would still say programming has become a rather tough market these days for anyone 35+ I am not sure how good my advice can be, but if you want to stay technical and with Go, I'd say keep applying for such positions. Many companies will reject you because you may not fulfill their arbitrary requirements, but there'll be eventually a company who recognises your experience and your abilities.While I am probably biased, I would still say programming has become a rather tough market these days for anyone 35+ While I am probably biased, I would still say programming has become a rather tough market these days for anyone 35+ 
reply

 Still, no guarantee either of course. 
reply

 what did you do? 
reply

 I'm older than you are and have been out of work for longer than ever before in my life. BUT I finally got a decent offer and will be starting a new job soon. There is hope. 
reply

 Also you’re in the EU so could feasibly move to where needs your exact skill set. But web/frontend/backend is needed everywhere so it’s likely worth adding that to your C skills. 
reply

 
reply

 You _could_, but reaslitically speaking the frictions with language, culture, and distance from family and friends probably makes this harder than maoving US -> Canada or vice-versa. The EU tried hard to overcome this, but they're fighting national differences and cultural borders older than Christianity. 
reply

 Don't lie about anything in your resume/CV. If you get called out, your whole reputation and your whole CV then is in Question. 
reply

 
reply

 
reply

 
reply

 
reply

 Not sure if it is same in the EU, but if it is illegal don't volunteer your age. No need to lie. 
reply

 
reply

 But perhaps you can be economical with facts and/or 're-prioritize' them, if expedient, ie choose which cards to reveal and with what emphasis.Personally, I just tell it matter-of-fact as I see it, pretty much. You're looking for a good match of a job after all so may as well be fairly honest. Take that advice with a bucket of salt though because I'm still looking after <cough>, a year ... <cough, cough> ... or so. Personally, I just tell it matter-of-fact as I see it, pretty much. You're looking for a good match of a job after all so may as well be fairly honest. Take that advice with a bucket of salt though because I'm still looking after <cough>, a year ... <cough, cough> ... or so. 
reply

 Uprooting your life when you are 25-30 is easier, can be a fun adventure, etc. Doing that when you are 50 is many layers more complicated.Lying is absolutely a no-no, there's no upside, you will be forever in debt about a lie and in the case of something as easily detected as your age you will lose all credibility for a stupid reason. Lying is absolutely a no-no, there's no upside, you will be forever in debt about a lie and in the case of something as easily detected as your age you will lose all credibility for a stupid reason. 
reply

 Asking someone to move is usually quite unreasonable, unless there's legit problems where the person lives. A lot of people, especially people in their 50s, have roots that they just can't walk away from.Furthermore, software gigs tend to be much shorter than how often people stay in a location; and remote work in software is super-common today. Furthermore, software gigs tend to be much shorter than how often people stay in a location; and remote work in software is super-common today. 
reply

 Padding the resume isn't a bad idea. If you've worked in C, and taught yourself Go, you're senior in my book. I mean, you may not know the gnarly corners of the language and eco system, but that's easy enough to pick up. 
reply

 
reply

 
reply

 Applying for a junior Go position would probably not be a good fit for you.Applying for a mid-level Go position sounds uphill because competing candidates have 1-2 years of professional Go experience.I would overcome that by accepting any opportunity to get real Go experience.For example, I'm spending some extra hours every week for a money-less startup on an ""I'll register the hours and you'll pay me next year"" basis.As a reward, I learn Phoenix/Elixir and Nix: The lead will spend time fast-forwarding me through the commands, and I can spend some hours that I don't bill them on qualifying. For my next interview, I can say I've spent X months doing Phoenix/Elixir and/or Nix in production. The money is secondary.Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. Applying for a mid-level Go position sounds uphill because competing candidates have 1-2 years of professional Go experience.I would overcome that by accepting any opportunity to get real Go experience.For example, I'm spending some extra hours every week for a money-less startup on an ""I'll register the hours and you'll pay me next year"" basis.As a reward, I learn Phoenix/Elixir and Nix: The lead will spend time fast-forwarding me through the commands, and I can spend some hours that I don't bill them on qualifying. For my next interview, I can say I've spent X months doing Phoenix/Elixir and/or Nix in production. The money is secondary.Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. I would overcome that by accepting any opportunity to get real Go experience.For example, I'm spending some extra hours every week for a money-less startup on an ""I'll register the hours and you'll pay me next year"" basis.As a reward, I learn Phoenix/Elixir and Nix: The lead will spend time fast-forwarding me through the commands, and I can spend some hours that I don't bill them on qualifying. For my next interview, I can say I've spent X months doing Phoenix/Elixir and/or Nix in production. The money is secondary.Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. For example, I'm spending some extra hours every week for a money-less startup on an ""I'll register the hours and you'll pay me next year"" basis.As a reward, I learn Phoenix/Elixir and Nix: The lead will spend time fast-forwarding me through the commands, and I can spend some hours that I don't bill them on qualifying. For my next interview, I can say I've spent X months doing Phoenix/Elixir and/or Nix in production. The money is secondary.Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. As a reward, I learn Phoenix/Elixir and Nix: The lead will spend time fast-forwarding me through the commands, and I can spend some hours that I don't bill them on qualifying. For my next interview, I can say I've spent X months doing Phoenix/Elixir and/or Nix in production. The money is secondary.Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. Alternatively: Use your network. What young people don't have is an abundance of acquaintances who took the management route who can vouch for your generic skill set and work ethics which don't translate into recruiter filter buzzwords. 
reply

 P.S. I'm not far behind in age but I code in 2 different tech stacks daily at work, on FE and BE, and stick my nose into parallel stacks to get that experience, specifically so I don't get COBOL'd (do one thing my entire career, and then that one thing no longer has developer demand). 
reply

 
reply

 But maybe for older people it would be ok? Embedded projects are usually more ""traditionally"" programmed and pretty slow moving. 
reply

 
reply

 
reply

 
reply

 I have done this many times. For example, I didn’t know k8s, and I wanted to switch jobs: I spent around 1-2 months learning k8s at work and at home, I learnt the fundamentals and did some side project and then I put on my CV that I’ve used k8s in my current job (I didn’t).
I passed the job interview. 
reply

 
reply

 Micromanaging employee time is one of the worst signs of a toxic company culture. And definitely not a sign of an efficient one 
reply

 > Micromanaging employee time is one of the worst signs of a toxic company cultureI agree micro managing alot is bad but I don't agree it is toxic. I agree if leadership knows nothing about software engineering and microing it it is bad.There's always two sides. I had seen projects fail because developers are doing what they want with their time, doing things unrelated to current project and end up missing delivery deadlines. I had seen company fail because they don't say anything to their developer because they afraid their developer will feel bad. I had saved client projects by joining in and driving their team to their potentials.There's nothing rude or toxic about it.Unless OP provide more details we can't really know if his company really toxic or not.If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. I agree micro managing alot is bad but I don't agree it is toxic. I agree if leadership knows nothing about software engineering and microing it it is bad.There's always two sides. I had seen projects fail because developers are doing what they want with their time, doing things unrelated to current project and end up missing delivery deadlines. I had seen company fail because they don't say anything to their developer because they afraid their developer will feel bad. I had saved client projects by joining in and driving their team to their potentials.There's nothing rude or toxic about it.Unless OP provide more details we can't really know if his company really toxic or not.If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. There's always two sides. I had seen projects fail because developers are doing what they want with their time, doing things unrelated to current project and end up missing delivery deadlines. I had seen company fail because they don't say anything to their developer because they afraid their developer will feel bad. I had saved client projects by joining in and driving their team to their potentials.There's nothing rude or toxic about it.Unless OP provide more details we can't really know if his company really toxic or not.If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. There's nothing rude or toxic about it.Unless OP provide more details we can't really know if his company really toxic or not.If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. Unless OP provide more details we can't really know if his company really toxic or not.If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. If job market is shit, build something in your own time, take ownership, make it grow and showcase it. A good C++ dev can learn new things so much faster than others. 
reply

 
reply

 That doesn't always mean quitting - I personally try to just change my job role and find that I often can adjust the work to avoid the toxic leaders. But if that cannot be done, leaving the job is a reasonable action.And ""as a Founder"", if you think your staff is obligated to pull you out of any holes you dig, you are going to be in for a surprise when you find out just how many people are happy to let toxic leaders fail. And ""as a Founder"", if you think your staff is obligated to pull you out of any holes you dig, you are going to be in for a surprise when you find out just how many people are happy to let toxic leaders fail. 
reply

 How else are we going to keep ourselves sharp? Besides, is on the benefit of the current company that I become more knowledgeable. Crazy to hear this retrograde way of thinking. 
reply

 
reply

 How do I even work for you without ""sharpening my skills""? 
reply

 
reply

 
reply

 
reply

 
reply

 I am 52, having a good workplace but terrible job (bad quality desktop system to maintain, very frustrating like pissing into headwind against a hill), so I am looking around. If you do not have that _specific_tech_stack_ right now with 3+ years day to day proven professional experience (i.e. already working with it 8 hours or more per day for years), knowing its tricks the interviewee finds essential for that particular position among the hundreds out there (good practices) then don't even dream of competing with the dozen plus eager youngsters live and breath obscure tests and open to do anything told, like instant relocation or shady clause in the contract and whatnot - e.g. pretend and lie as some suggest here -, for less than you, because you have a family with needs.We need luck finding the last places still suitable for the dying breed. Like maintaining a bad quality desktop system among nice people ... maybe I should stick what I have and pray the new owner of the company will keep me after the retiree management sells to. We need luck finding the last places still suitable for the dying breed. Like maintaining a bad quality desktop system among nice people ... maybe I should stick what I have and pray the new owner of the company will keep me after the retiree management sells to. 
reply

 
reply

 I'm expecting that the ""really good at one thing"" will change in the upcoming decades, and that you need to be early in learning it to stay relevant. I put some effort in learning decentralized Web3 in case that would be the big thing, but currently it's not it. Trying to keep eyes open for what AI brings up next. 
reply

 I suspect that most half-decent Golang shops will know this and be open to hiring an experienced C developer. 
reply

 Best advice I can give is to stop applying for vacancies and start networking. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 So you're not wrong. It's where things are going not only in software engineering but other professions as well. 
reply

 A good lens might be to view those positions as senior first, and technology second, even if you don't necessarily voice that perspective in the cover letter / interview. 
reply

 I am working on a project (https://flyingcarcomputer.com) and struggling with C at the moment. If you want to chat, email me at hackernews.vudcc@passmail.net. 
reply

 
reply

 The notion of applying for senior engineer for a lang you’ve not worked in doesn’t make sense to me. Obviously you’d learn but that might be part of the reason for rejection 
reply

 My long time painful observations:For the longest time the corporate web business back was dominated by Java. Some of the people doing that work were incredible engineers but many were not. Many of the people were praying, some still do, that Web Assembly would replace JavaScript because it scared the shit out them. It was both sad and incompetent. You couldn’t talk about this because it made people wildly emotional.Observation two is that JS people were just as fearful and emotional, perhaps much more so, but about almost everything. Many of these people were expert beginners who built a career based on complex nonsense because many of them never really learned to program and would supplement their practical deficits with stacks of tools, frameworks, abstractions, and so forth. Again, you couldn’t rationally talk to people about this without them becoming hyper emotional because it destroys a persons definition of worth and credibility.The best thing that happened to me was being laid off and waiting for something different. For the longest time the corporate web business back was dominated by Java. Some of the people doing that work were incredible engineers but many were not. Many of the people were praying, some still do, that Web Assembly would replace JavaScript because it scared the shit out them. It was both sad and incompetent. You couldn’t talk about this because it made people wildly emotional.Observation two is that JS people were just as fearful and emotional, perhaps much more so, but about almost everything. Many of these people were expert beginners who built a career based on complex nonsense because many of them never really learned to program and would supplement their practical deficits with stacks of tools, frameworks, abstractions, and so forth. Again, you couldn’t rationally talk to people about this without them becoming hyper emotional because it destroys a persons definition of worth and credibility.The best thing that happened to me was being laid off and waiting for something different. Observation two is that JS people were just as fearful and emotional, perhaps much more so, but about almost everything. Many of these people were expert beginners who built a career based on complex nonsense because many of them never really learned to program and would supplement their practical deficits with stacks of tools, frameworks, abstractions, and so forth. Again, you couldn’t rationally talk to people about this without them becoming hyper emotional because it destroys a persons definition of worth and credibility.The best thing that happened to me was being laid off and waiting for something different. The best thing that happened to me was being laid off and waiting for something different. 
reply

 to what? I'm willing to try anything.> HS peoplewhat is HS? > HS peoplewhat is HS? what is HS? 
reply

 A recruiter found me to fill a position writing APIs and proxies as a contractor for a large government entity.  I enjoy it and the people I am working with.  Its mostly low code using a proprietary platform.  I still need to learn more about Kubernetes to get better at this. 
reply

 The vast majority of population doesn’t even have technical experience. 
reply

 
reply

 But if you want to write Go, write go on your own time and use your day job to support your creative practice.The more experience you have the more advantage there is to getting jobs through people you know, and the more disadvantage there is to looking to strangers for employment. Because looking for employment from strangers raises the legitimate question, ""why doesn't this person have work through their professional network?""The question is legitimate because of the circumstance you describe in your question...you are looking for work because you find yourself unwilling to work with other people. Sure, your personal reasons may be legitimate, but they are personal reasons not business reasons. At some level of seniority, there is an expectation that a person can put on their hipwaders and get through ordinary organizational sludge. Because that's the kind of person other senior people want to work with. Good luck. The more experience you have the more advantage there is to getting jobs through people you know, and the more disadvantage there is to looking to strangers for employment. Because looking for employment from strangers raises the legitimate question, ""why doesn't this person have work through their professional network?""The question is legitimate because of the circumstance you describe in your question...you are looking for work because you find yourself unwilling to work with other people. Sure, your personal reasons may be legitimate, but they are personal reasons not business reasons. At some level of seniority, there is an expectation that a person can put on their hipwaders and get through ordinary organizational sludge. Because that's the kind of person other senior people want to work with. Good luck. The question is legitimate because of the circumstance you describe in your question...you are looking for work because you find yourself unwilling to work with other people. Sure, your personal reasons may be legitimate, but they are personal reasons not business reasons. At some level of seniority, there is an expectation that a person can put on their hipwaders and get through ordinary organizational sludge. Because that's the kind of person other senior people want to work with. Good luck. 
reply

 
reply

 
reply

 
reply

 ""start your own business""""your network is your net worth""if these are your two options then the job market for that skill is really bad ""your network is your net worth""if these are your two options then the job market for that skill is really bad if these are your two options then the job market for that skill is really bad 
reply

 
reply

"
21,,"Ask HN: Freelancers, how do you get work?",https://news.ycombinator.com/item?id=40695679,Comments,2024-06-16T09:00:32Z,"2. (Hard - Better Pay) Personal Networked Connections, if you have one from prior jobs, etc. Otherwise, start building this up - a long-tail game that pays off as time passes.3. (Harder - Awesome Pay) A long-term play is to start building up a following in the niche you are good at. Try to be very good in the sector you want to work. I once started a company and supported it for many years just by the work that came from my blog and public presence. I was focusing only on writing ActionScript topped with the ability to design. If Macromedia (Adobe) had to pick and introduce big clients to a bunch of people doing that, I was one of the ones in the line. I had the opportunity to work with the likes of STARZ, Disney, Pearson, etc. because I was there helping people on forums asking any questions about the topic. 3. (Harder - Awesome Pay) A long-term play is to start building up a following in the niche you are good at. Try to be very good in the sector you want to work. I once started a company and supported it for many years just by the work that came from my blog and public presence. I was focusing only on writing ActionScript topped with the ability to design. If Macromedia (Adobe) had to pick and introduce big clients to a bunch of people doing that, I was one of the ones in the line. I had the opportunity to work with the likes of STARZ, Disney, Pearson, etc. because I was there helping people on forums asking any questions about the topic. 
reply

 UpWork is a race to the bottom, but only if you are unknown and have no reviews. Once you get a reputation, it gets better. It takes a lot of time, and for me, it's still the process. In the beginning, I focused only on getting good reviews without paying attention to the earnings.I am based in Germany, and as you can guess, the money I earned couldn't even cover the electricity bills. But I got a few good reviews, and suddenly, one great client found me with a lot of work. Not only did he provide me with a lot of work, but he also referred me to other people, and I got more clients.So, as someone said in the comments ""Sometimes its just a matter of being in the right place at the right time or dumb luck."" I am based in Germany, and as you can guess, the money I earned couldn't even cover the electricity bills. But I got a few good reviews, and suddenly, one great client found me with a lot of work. Not only did he provide me with a lot of work, but he also referred me to other people, and I got more clients.So, as someone said in the comments ""Sometimes its just a matter of being in the right place at the right time or dumb luck."" So, as someone said in the comments ""Sometimes its just a matter of being in the right place at the right time or dumb luck."" 
reply

 But do preserve. We would hire at twice the rate when we can for a better more reliable set of reviews. 
reply

 
reply

 Happened to me years ago. After struggling to get clients on Upwork I finally got gigs and good reviews. Put in a lot of hard work and earned some sort of „trusted freelancer“ badge (don’t know what it was called) that helped me to promote my profile.I was very happy… only to find out a few days later that Upwork suddenly terminated my account for a (supposed) breach of their rules. They didn’t want to tell me the actual reason but said that I have mentioned „PayPal“ in a message to my clients (and accusing me of wanting to move my clients away from Upwork).Never did I wanted to do that. I don’t know if I ever mentioned PayPal—and if so then only to talk about payment processor integrations on clients websites.I messaged back and forth for days with them. In the end it wasn’t worth my energy.Just be careful and get control of your income streams and diversify as much as possible. I was very happy… only to find out a few days later that Upwork suddenly terminated my account for a (supposed) breach of their rules. They didn’t want to tell me the actual reason but said that I have mentioned „PayPal“ in a message to my clients (and accusing me of wanting to move my clients away from Upwork).Never did I wanted to do that. I don’t know if I ever mentioned PayPal—and if so then only to talk about payment processor integrations on clients websites.I messaged back and forth for days with them. In the end it wasn’t worth my energy.Just be careful and get control of your income streams and diversify as much as possible. Never did I wanted to do that. I don’t know if I ever mentioned PayPal—and if so then only to talk about payment processor integrations on clients websites.I messaged back and forth for days with them. In the end it wasn’t worth my energy.Just be careful and get control of your income streams and diversify as much as possible. I messaged back and forth for days with them. In the end it wasn’t worth my energy.Just be careful and get control of your income streams and diversify as much as possible. Just be careful and get control of your income streams and diversify as much as possible. 
reply

 
reply

 
reply

 
reply

 
reply

 I know some people make some money there and it might be lucrative if you are located in a developing country. But I wouldn't touch Upwork if you have a tiny bit of self-respect. It is just a race to the bottom there... 
reply

 I'm a western expat in an asian developing nation, and so get lumped in with 'compatriots' as far as salary requirements go, but it's actually more expensive to live here than in many western nations once you factor in education, medical, basic western living standards, etc. And of course timezone is a factor, but I'm willing to work nightshift at this point.Not getting any love from the freelance sites, in fact most proposals are not even read. Not getting any love from the freelance sites, in fact most proposals are not even read. 
reply

 Cold email... 2/10Cold phone calls... 4/10Replying to job ads and offering to freelance instead... 5/10 Cold phone calls... 4/10Replying to job ads and offering to freelance instead... 5/10 Replying to job ads and offering to freelance instead... 5/10 
reply

 
reply

 Sounds obvious, but I had never thought of doing this. How did it work out? How keen were the companies on such an arrangement? Perhaps it could also be a way to work for some cool small US companies that are otherwise hiring in the US only. 
reply

 Depends on location. In germany for example there is the concept of ""Scheinselbstständigkeit"" meaning when you have only 1 client, you do not count as a freelancer and then it gets expensive for the company. Companies do not like that threat and they rather pay a bit more and are safe than having extra risk.In general, if the company is desperate for workers, they are more willing to go out of their way, otherwise most do not like complications. And freelancer instead of normal workers is a complication unless they are used to it. In general, if the company is desperate for workers, they are more willing to go out of their way, otherwise most do not like complications. And freelancer instead of normal workers is a complication unless they are used to it. 
reply

 
reply

 
reply

 
reply

 I run my own business and would pay 10% commission in exchange for qualified opportunities all day long. 
reply

 Not all work on transparent commissions, at least here in the UK that's rare.They are, by and large, talentless liars and cheats with a false narrative and harmful practice.Seeing them as anything other than hostile to your interests is a quick way to get ripped off by these hacks.Source: I consult for them on technical screening processes. They are, by and large, talentless liars and cheats with a false narrative and harmful practice.Seeing them as anything other than hostile to your interests is a quick way to get ripped off by these hacks.Source: I consult for them on technical screening processes. Seeing them as anything other than hostile to your interests is a quick way to get ripped off by these hacks.Source: I consult for them on technical screening processes. Source: I consult for them on technical screening processes. 
reply

 the worst that can happen is that the recruiter misrepresents your skills and experience. that can easily be solved by sharing your CV directly with the hiring company. if the recruiter doesn't allow you to do that, then it's a red flag. 
reply

 Ive seen people work for a year at a lowish rate, then be denied a rate increase.Only to find out later the increase was authorised but the recruiter took it and lied to the worker about it be accepted.This, sadly, isn't at all uncommon. I see it constantly.They'll risk your security, reputation and income for quick results to hit their quotas for bonuses. Only to find out later the increase was authorised but the recruiter took it and lied to the worker about it be accepted.This, sadly, isn't at all uncommon. I see it constantly.They'll risk your security, reputation and income for quick results to hit their quotas for bonuses. This, sadly, isn't at all uncommon. I see it constantly.They'll risk your security, reputation and income for quick results to hit their quotas for bonuses. They'll risk your security, reputation and income for quick results to hit their quotas for bonuses. 
reply

 If an increase was requested by the worker and authorised by the client and then the recruiter just plain lied about it and took the money - how is that not plain old fraud? 
reply

 Note, they did conspire... Eventually. Next rate increase, I was in the room when client and contractor alternately took calls from the recruiter on speaker phone.Everyone was shocked at the outcome.The client ended up buying the contractor out of the recruiters exclusivity. Everyone was shocked at the outcome.The client ended up buying the contractor out of the recruiters exclusivity. The client ended up buying the contractor out of the recruiters exclusivity. 
reply

 
reply

 
reply

 i guess the important part for any job seeker is to know the distinction and be aware of the benefits and downsides of each. and when talking to a recruiter to make clear which one this is.staffing agencies have their place and can be an advantage in some situations. depending on what you are looking for. in the US in particular they may be able to provide continuous insurance (just a guess, i don't actually know). another advantage may be permanent employment with the agency. (again, i don't know how this is in the US, but due to stronger labor protection it is more likely in germany.)when you are employed with a staffing agency, it is clear that they are responsible for your salary, and whatever they may be able to negotiate with the client is only incidentally related. you have to consider that they take a risk. if the client defaults  or they don't have work for you they may still pay you (again at least in germany they have to).when i hire that is the way i'd like to operate, but mainly because i want to build my own team and only offer staffing services only as an alternative to doing projects as an agency.the above example seems to be the result of a misunderstanding of what the role of the recruiter here is. (and it may well be the recruiters fault for misrepresenting that)so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. staffing agencies have their place and can be an advantage in some situations. depending on what you are looking for. in the US in particular they may be able to provide continuous insurance (just a guess, i don't actually know). another advantage may be permanent employment with the agency. (again, i don't know how this is in the US, but due to stronger labor protection it is more likely in germany.)when you are employed with a staffing agency, it is clear that they are responsible for your salary, and whatever they may be able to negotiate with the client is only incidentally related. you have to consider that they take a risk. if the client defaults  or they don't have work for you they may still pay you (again at least in germany they have to).when i hire that is the way i'd like to operate, but mainly because i want to build my own team and only offer staffing services only as an alternative to doing projects as an agency.the above example seems to be the result of a misunderstanding of what the role of the recruiter here is. (and it may well be the recruiters fault for misrepresenting that)so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. when you are employed with a staffing agency, it is clear that they are responsible for your salary, and whatever they may be able to negotiate with the client is only incidentally related. you have to consider that they take a risk. if the client defaults  or they don't have work for you they may still pay you (again at least in germany they have to).when i hire that is the way i'd like to operate, but mainly because i want to build my own team and only offer staffing services only as an alternative to doing projects as an agency.the above example seems to be the result of a misunderstanding of what the role of the recruiter here is. (and it may well be the recruiters fault for misrepresenting that)so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. when i hire that is the way i'd like to operate, but mainly because i want to build my own team and only offer staffing services only as an alternative to doing projects as an agency.the above example seems to be the result of a misunderstanding of what the role of the recruiter here is. (and it may well be the recruiters fault for misrepresenting that)so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. the above example seems to be the result of a misunderstanding of what the role of the recruiter here is. (and it may well be the recruiters fault for misrepresenting that)so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. so again, when talking to a recruiter, make that relationship clear up front and get it in writing if need be, or bail out if the contract is not with who you expect it to be. 
reply

 
reply

 
reply

 (disclaimer, even if obvious: sure, there are some honest good independent recruiters there, I met them as well) 
reply

 
reply

 
reply

 That meant you could find a great client and have a deal lined up with all the key terms agreed and everyone ready to go and then at the last minute the recruitment agency could send you a terrible contract and refuse to negotiate. Then you'd not only have wasted your time going through possibly quite a long process with the recruiter but you'd also be blocked from working with a client who also wanted to work with you for a long time, which makes no business or economic sense at all.This had been less of a problem a few years earlier when more contracts were direct with clients but the whole software contracting industry was becoming increasingly toxic here in the UK thanks to IR35 and the like. As a result many contracts - particularly with the larger clients who tend to be slightly more reliable about actually starting the work and having the budget for it - have only been available through the client's preferred suppler/recruiter list for some time.I think if the whole contract recruitment industry got regulated almost out of existence it would probably be a huge boon to the sector. Or just declare that if intermediaries offer contracts in bad faith and won't negotiate - maybe with a list of specific hostile practices that are automatically considered bad faith - then any non-compete terms with either the worker or the client become unenforceable. In fact it might be better just to make the intermediaries generally liable if they act in bad faith because then the ones who waste your time with roles that are never really there and do shady things just to harvest CVs for their database could also be sued for the wasted time at the contractor's normal rate. This had been less of a problem a few years earlier when more contracts were direct with clients but the whole software contracting industry was becoming increasingly toxic here in the UK thanks to IR35 and the like. As a result many contracts - particularly with the larger clients who tend to be slightly more reliable about actually starting the work and having the budget for it - have only been available through the client's preferred suppler/recruiter list for some time.I think if the whole contract recruitment industry got regulated almost out of existence it would probably be a huge boon to the sector. Or just declare that if intermediaries offer contracts in bad faith and won't negotiate - maybe with a list of specific hostile practices that are automatically considered bad faith - then any non-compete terms with either the worker or the client become unenforceable. In fact it might be better just to make the intermediaries generally liable if they act in bad faith because then the ones who waste your time with roles that are never really there and do shady things just to harvest CVs for their database could also be sued for the wasted time at the contractor's normal rate. I think if the whole contract recruitment industry got regulated almost out of existence it would probably be a huge boon to the sector. Or just declare that if intermediaries offer contracts in bad faith and won't negotiate - maybe with a list of specific hostile practices that are automatically considered bad faith - then any non-compete terms with either the worker or the client become unenforceable. In fact it might be better just to make the intermediaries generally liable if they act in bad faith because then the ones who waste your time with roles that are never really there and do shady things just to harvest CVs for their database could also be sued for the wasted time at the contractor's normal rate. 
reply

 Even if you’re looking for short-term work, I recommend following the Fractional scene because it’s getting more traction among companies right now - so it’s getting more jobs. I have hired four fractional so far this year.I run a free community for fractional workers, which has a bunch of tips and resources: https://frctnl.xyzOne big takeaway there is to market yourself and post on the monthly HN freelancer thread. I run a free community for fractional workers, which has a bunch of tips and resources: https://frctnl.xyzOne big takeaway there is to market yourself and post on the monthly HN freelancer thread. One big takeaway there is to market yourself and post on the monthly HN freelancer thread. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Put another way, freelancing means your job is part your vocation and part sales and marketing. You generally need to be proficient at both in order to be successful.For me, personally, while I was an employee I went to monthly tech meetups—ideally cross-functional, not just programming language user groups—and travel to conferences on my own dime.Things have changed in the last 20 years, but the principles of what worked for me still apply. I met people from around the world at conferences like sxsw interactive and kept in touch on a nascent pre-celebrity twitter. When I decided to go freelance, I had over 100 acquaintances to reach out to, whether they might want to work with me or to keep me in mind if they eventually had someone to refer. Obviously, the communities and platforms would be different today.It helps to specialize, so when someone encounters a need for $skill or $domain they think of you. For me, that was data visualization. I also built a portfolio with a lot of automotive work, which begat more work in that industry. For me, personally, while I was an employee I went to monthly tech meetups—ideally cross-functional, not just programming language user groups—and travel to conferences on my own dime.Things have changed in the last 20 years, but the principles of what worked for me still apply. I met people from around the world at conferences like sxsw interactive and kept in touch on a nascent pre-celebrity twitter. When I decided to go freelance, I had over 100 acquaintances to reach out to, whether they might want to work with me or to keep me in mind if they eventually had someone to refer. Obviously, the communities and platforms would be different today.It helps to specialize, so when someone encounters a need for $skill or $domain they think of you. For me, that was data visualization. I also built a portfolio with a lot of automotive work, which begat more work in that industry. Things have changed in the last 20 years, but the principles of what worked for me still apply. I met people from around the world at conferences like sxsw interactive and kept in touch on a nascent pre-celebrity twitter. When I decided to go freelance, I had over 100 acquaintances to reach out to, whether they might want to work with me or to keep me in mind if they eventually had someone to refer. Obviously, the communities and platforms would be different today.It helps to specialize, so when someone encounters a need for $skill or $domain they think of you. For me, that was data visualization. I also built a portfolio with a lot of automotive work, which begat more work in that industry. It helps to specialize, so when someone encounters a need for $skill or $domain they think of you. For me, that was data visualization. I also built a portfolio with a lot of automotive work, which begat more work in that industry. 
reply

 It's been a while since I've needed to do this, but regarding the 'personal network' - back when I started freelancing I'd go to meetups that weren't directly related to my set of skills, but my skillset could be somewhat needed. If you're a dev and you go to developer meetups, there's a strong chance a lot of the room is doing what you're doing and looking for what you're looking for. Instead, attend meetups where people are likely to need your skillset but won't have it - agency owners, startups, SEO events, whatever.It's kind of obvious in hindsight, but you have to fish where the fish are. If you're a guy looking to pick up girls, a sports bar filled with guys is probably a terrible choice of a night out. If you're a girl looking to pick up guys, maybe it's a great choice.Be brave about conversation (you have nothing to lose!), introduce yourself to people, then just listen and ask questions. People love to talk about themselves, listen to their work and problems (of course talk about you, be natural, just talk less than they do!). Thank them for being really interesting to talk to, get their contact details. If you think there's work there, email them the next day: ""It was really lovely meeting to you and chatting. I've been thinking about your problem with X, I'd probably approach it like Y. If you want to grab a drink and chat it through, we absolutely should.""There's little worse/more off-putting than meeting someone at an event and they immediately trying to sell themselves. Establish a rapport and follow up after. Even if you have nothing to offer you can contact them and say it was lovely to meet them. Some of the best people in your network will be the ones you meet like this, stay in touch with, then remember you when the timing is right (and vice versa).Just my 2c! Good luck! It's kind of obvious in hindsight, but you have to fish where the fish are. If you're a guy looking to pick up girls, a sports bar filled with guys is probably a terrible choice of a night out. If you're a girl looking to pick up guys, maybe it's a great choice.Be brave about conversation (you have nothing to lose!), introduce yourself to people, then just listen and ask questions. People love to talk about themselves, listen to their work and problems (of course talk about you, be natural, just talk less than they do!). Thank them for being really interesting to talk to, get their contact details. If you think there's work there, email them the next day: ""It was really lovely meeting to you and chatting. I've been thinking about your problem with X, I'd probably approach it like Y. If you want to grab a drink and chat it through, we absolutely should.""There's little worse/more off-putting than meeting someone at an event and they immediately trying to sell themselves. Establish a rapport and follow up after. Even if you have nothing to offer you can contact them and say it was lovely to meet them. Some of the best people in your network will be the ones you meet like this, stay in touch with, then remember you when the timing is right (and vice versa).Just my 2c! Good luck! Be brave about conversation (you have nothing to lose!), introduce yourself to people, then just listen and ask questions. People love to talk about themselves, listen to their work and problems (of course talk about you, be natural, just talk less than they do!). Thank them for being really interesting to talk to, get their contact details. If you think there's work there, email them the next day: ""It was really lovely meeting to you and chatting. I've been thinking about your problem with X, I'd probably approach it like Y. If you want to grab a drink and chat it through, we absolutely should.""There's little worse/more off-putting than meeting someone at an event and they immediately trying to sell themselves. Establish a rapport and follow up after. Even if you have nothing to offer you can contact them and say it was lovely to meet them. Some of the best people in your network will be the ones you meet like this, stay in touch with, then remember you when the timing is right (and vice versa).Just my 2c! Good luck! There's little worse/more off-putting than meeting someone at an event and they immediately trying to sell themselves. Establish a rapport and follow up after. Even if you have nothing to offer you can contact them and say it was lovely to meet them. Some of the best people in your network will be the ones you meet like this, stay in touch with, then remember you when the timing is right (and vice versa).Just my 2c! Good luck! Just my 2c! Good luck! 
reply

 
reply

 
reply

 
reply

 
reply

 It's hard to find these kinds of people in the first place, but do things well and the connections will come. 
reply

 
reply

 
reply

 The idea of creating a personal ""brand"" makes me nearly physically sick I hate the idea so much.I am very risk averse. I love the predictability of what shows up in my bank account.""Freelance"" for me would just be a euphemism for being unemployed. The situation would just make me depressed and I would end up just getting a new job.It seems to me the type of person who would thrive at freelancing doesn't need to read this thread or ask these questions to start with. I am very risk averse. I love the predictability of what shows up in my bank account.""Freelance"" for me would just be a euphemism for being unemployed. The situation would just make me depressed and I would end up just getting a new job.It seems to me the type of person who would thrive at freelancing doesn't need to read this thread or ask these questions to start with. ""Freelance"" for me would just be a euphemism for being unemployed. The situation would just make me depressed and I would end up just getting a new job.It seems to me the type of person who would thrive at freelancing doesn't need to read this thread or ask these questions to start with. It seems to me the type of person who would thrive at freelancing doesn't need to read this thread or ask these questions to start with. 
reply

 actually, there is a difference. if i have services, i can market those as products. if i look for jobs then i have to market myself. so in fact, as a job hunter the personal brand is even more important than when selling services.i get the risk aversion, that's a different issue. i get the risk aversion, that's a different issue. 
reply

 Of course adding there to your profile skills, portfolio etc, sending your CV and website can really helpOnce you have a website like this or a few, always keep hunting for work.
You can fail to get one for 2 weeks but then find one that will last you few months of workNormally as a ""freelancer"" you get make much more money with the same time of work, if you work fast try to always get a fixed price project and finish it ASAP.
If not you can use a client or a few hourly and over the time to look for those fixed priceIf you new to this, you gonna make a lot of mistakes estimating costs on those fixed price projects, we all do. We learn over time :) Once you have a website like this or a few, always keep hunting for work.
You can fail to get one for 2 weeks but then find one that will last you few months of workNormally as a ""freelancer"" you get make much more money with the same time of work, if you work fast try to always get a fixed price project and finish it ASAP.
If not you can use a client or a few hourly and over the time to look for those fixed priceIf you new to this, you gonna make a lot of mistakes estimating costs on those fixed price projects, we all do. We learn over time :) Normally as a ""freelancer"" you get make much more money with the same time of work, if you work fast try to always get a fixed price project and finish it ASAP.
If not you can use a client or a few hourly and over the time to look for those fixed priceIf you new to this, you gonna make a lot of mistakes estimating costs on those fixed price projects, we all do. We learn over time :) If you new to this, you gonna make a lot of mistakes estimating costs on those fixed price projects, we all do. We learn over time :) 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Do a good job for people in the past and they will hire you again when they can.But there isn’t much good work out there right now. Tech is going through a rough patch for sure. But there isn’t much good work out there right now. Tech is going through a rough patch for sure. 
reply

 
reply

 Or organize your own.Then underpromise and overfullfill.Use then these contacts fora) more talks
b) new clientsrepeat.Also set up a newsletter / mailing list. Start collecting emailadresses immediately. Then underpromise and overfullfill.Use then these contacts fora) more talks
b) new clientsrepeat.Also set up a newsletter / mailing list. Start collecting emailadresses immediately. Use then these contacts fora) more talks
b) new clientsrepeat.Also set up a newsletter / mailing list. Start collecting emailadresses immediately. a) more talks
b) new clientsrepeat.Also set up a newsletter / mailing list. Start collecting emailadresses immediately. repeat.Also set up a newsletter / mailing list. Start collecting emailadresses immediately. Also set up a newsletter / mailing list. Start collecting emailadresses immediately. 
reply

 I don’t know how it is these days but I used to get a huge amount of work through the monthly “seeking freelancers” threads. I’d just post my ad and get a bunch of enquires every month. You can probably find some of those ads if you look back through my post history.Having a website can help especially if you do something that’s currently hot. I got loads of work by being on the first or second page of google (not even top of the page!) for “[technology] programmer in [town]”. React Native was definitely one of those technologies for a little bit around here, but that changes so it’ll be a little bit luck and a little bit judgement in making sure you describe your self the right way.Even sites like upwork (rentacoder was the site that was current last time I did this) have worked for me in the past. My strategy then was to be amongst the most expensive for any project and wait for the people frustrated with low quality cheap workers wanting to try the other end.Do keep in mind that a large part of the “job” of being a freelancer is networking and marketing yourself. It requires constant attention even when you do start to get work (a common pitfall is to get some work and stop looking, then it ends and your back to square one). If you’re not willing to make that as much a part of skill set as the stuff you’re hoping to get paid to do then I wouldn’t recommend freelancing. But if you are happy with that it can be fun and varied and not a bad way to work! Having a website can help especially if you do something that’s currently hot. I got loads of work by being on the first or second page of google (not even top of the page!) for “[technology] programmer in [town]”. React Native was definitely one of those technologies for a little bit around here, but that changes so it’ll be a little bit luck and a little bit judgement in making sure you describe your self the right way.Even sites like upwork (rentacoder was the site that was current last time I did this) have worked for me in the past. My strategy then was to be amongst the most expensive for any project and wait for the people frustrated with low quality cheap workers wanting to try the other end.Do keep in mind that a large part of the “job” of being a freelancer is networking and marketing yourself. It requires constant attention even when you do start to get work (a common pitfall is to get some work and stop looking, then it ends and your back to square one). If you’re not willing to make that as much a part of skill set as the stuff you’re hoping to get paid to do then I wouldn’t recommend freelancing. But if you are happy with that it can be fun and varied and not a bad way to work! Even sites like upwork (rentacoder was the site that was current last time I did this) have worked for me in the past. My strategy then was to be amongst the most expensive for any project and wait for the people frustrated with low quality cheap workers wanting to try the other end.Do keep in mind that a large part of the “job” of being a freelancer is networking and marketing yourself. It requires constant attention even when you do start to get work (a common pitfall is to get some work and stop looking, then it ends and your back to square one). If you’re not willing to make that as much a part of skill set as the stuff you’re hoping to get paid to do then I wouldn’t recommend freelancing. But if you are happy with that it can be fun and varied and not a bad way to work! Do keep in mind that a large part of the “job” of being a freelancer is networking and marketing yourself. It requires constant attention even when you do start to get work (a common pitfall is to get some work and stop looking, then it ends and your back to square one). If you’re not willing to make that as much a part of skill set as the stuff you’re hoping to get paid to do then I wouldn’t recommend freelancing. But if you are happy with that it can be fun and varied and not a bad way to work! 
reply

 
reply

 
reply

 
reply

 What is the difference?1. If seeking freelance work you get put at the bottom of the pay stack!
2. If you research the target buyers and create a buyable sellable service then the pay lever is back in your hands.Look even Setty states this implied in all the books he has authored.Now the third point:3. Product as a service means you have recurring revenue which means less searching for work or in short words. Yes, at first you have a lot of marketing work resulting in 80 hour weeks...but over time that decreases as you get more recurring service contracts... 1. If seeking freelance work you get put at the bottom of the pay stack!
2. If you research the target buyers and create a buyable sellable service then the pay lever is back in your hands.Look even Setty states this implied in all the books he has authored.Now the third point:3. Product as a service means you have recurring revenue which means less searching for work or in short words. Yes, at first you have a lot of marketing work resulting in 80 hour weeks...but over time that decreases as you get more recurring service contracts... Look even Setty states this implied in all the books he has authored.Now the third point:3. Product as a service means you have recurring revenue which means less searching for work or in short words. Yes, at first you have a lot of marketing work resulting in 80 hour weeks...but over time that decreases as you get more recurring service contracts... Now the third point:3. Product as a service means you have recurring revenue which means less searching for work or in short words. Yes, at first you have a lot of marketing work resulting in 80 hour weeks...but over time that decreases as you get more recurring service contracts... 3. Product as a service means you have recurring revenue which means less searching for work or in short words. Yes, at first you have a lot of marketing work resulting in 80 hour weeks...but over time that decreases as you get more recurring service contracts... 
reply

 
reply

 
reply

"
22,Greg Kumparak,Dissecting the past to predict the future: Tracy Young on building TigerEye,https://www.ycombinator.com/blog/tracy-young-tigereye-interview/,"In 2018, Tracy Young and her co-founders sold PlanGrid for $875 million. By 2021, she was ready to jump back in and do it all over again with a brand new startup. I chatted with Tracy about what drives her and some of what she's learned along the way.",2024-06-12T18:00:00Z,"by Greg Kumparak6/12/2024 Tracy Young is unstoppable. In 2018, Tracy and her co-founders sold their company PlanGrid for $875 million. By 2021, she was ready to jump back in and do it all over again with a brand new startup: TigerEye. TigerEye builds AI-powered planning and revenue management software for businesses, combining AI and machine learning with a company’s own historical data to help them predict their future. It’s “Moneyball but for business,” as Tracy puts it.  I recently sat down with Tracy to find out more about her, what drives her, and some of what she has learned along the way. We talked about: Find our conversation below, lightly edited for clarity and length. You had a massive exit with PlanGrid. You took a couple of years and then jumped right back in to do it again with TigerEye. What drives you? That’s a really good question. I think my kids drive me. I always need a project to work on; I’m a busybody that way.  I like working, and I like working with really smart, talented people. But I also have a lot of energy and intensity, and my kids don’t need me all over them all the time. They have their own life, they don’t need founder-mom on top of them — because then I’m nitpicking every little thing. “Why are your toys out? Go pick that up!” [laugh] They don’t need that energy on them 24/7. So I output it into a startup. But more than anything, I watched my parents work incredibly hard to give my siblings and me the life we have. They were refugees of the Vietnam War. They worked seven days a week for many years; they worked two jobs a piece just to make things work for our family. It absolutely made me who I am today, and I want my kids to see that you can dream, you can work hard, and you can do whatever you want as long as you’re passionate about it. What came first: the idea for TigerEye or the desire to keep building [after PlanGrid]? The desire to keep building. [My co-founder] Ralph and I were actually working at YC in between PlanGrid and TigerEye — we were both Visiting Group Partners. We saw a lot of really cool technology come through during interviews, and while reading thousands of applications from all of these ambitious, talented founders. It was really clear to us there was so much low-hanging fruit in enterprise, but the only people who would build solutions there… let me tell you a quick story: I remember interviewing a really, really talented engineer. He must’ve been only 18 years old, and he was building.. I don’t even remember, some kind of vague thing around video. We were looking at him and asked: you can build anything! Why don’t you solve real problems for real people’s jobs? He looked at us and said: enterprise software is for old people.  Oh jeez. What was your response? I laughed, but it got me thinking that the only people who would build great solutions in the enterprise world are the people who saw it firsthand.  We had this unfair advantage of having built a startup for almost 10 years, seeing it grow the whole time, and deploying every solution under the sun to make our company scale and work. Then we got the privilege to be acquired into a public company, and to form a new construction business unit [within that company], where we then replaced all of our startup tools with the [big brand] winners — we were paying millions of dollars to buy the software each year, and then another several hundred thousand to deploy it and administer it. It was so clear to us: we could take any category [of Enterprise software] between CRMs and ERPs and there were ten good startup ideas in there, right? But the only people who would build that type of software are people who saw it fail them for years. For those who don’t know, can you explain what TigerEye does? What was the pitch? When Ralph pitched me the idea of TigerEye, he said, “Remember all of those spreadsheets we’d have people make [when building PlanGrid], and they’d never actually answer our questions? I think I can build a business simulator — and automatically generate that data through simulation theory.” In a past life he worked at Johns Hopkins University Applied Physics Laboratory using simulation theory and he felt strongly that it could be applied to business. That was really interesting to me. Can you give me examples of what TigerEye is simulating, and what it bases its simulations on? Something that’s interesting about, say, Salesforce, is that it’s a flat database. When a sales rep hits save on an opportunity, it overrides the history. There’s no version control. But that history is interesting! Especially if you have a lot of it, because now we can understand rep behavior over time. So we go into the CRM and snapshot everything every 15 minutes. We pick up every minor change that’s happening over time and use a bunch of AI, machine learning, and advanced statistics to use their historical [data] to predict their future. We’re like Moneyball but for business. It gets even more important at public companies, where you’re trying to figure out: where are we going to clock out this quarter, or this month? Where’s our business going to be?  You constantly have really smart people munging numbers on a spreadsheet to try to predict the future, and these spreadsheets don’t work. What was it like for you to go from running your own startup for 10 years, moving at your own pace, to being within a larger corporate environment? It really sucked for me. I think everyone knew this. Startups move at such a velocity. To get inserted into a 40+ year old public company… there’s a cultural difference. There’s definitely decision-making differences, and I think that was the hardest part. I felt like I couldn’t sneeze without asking permission from five head-of-somethings. Between your experiences with PlanGrid and then at a bigger company — how retrospective did you get about all of this before diving back in? We left Autodesk in March 2020 — and then, as you recall, went right into a worldwide lockdown.  I’m married to my co-founder [Ralph], so we ended up spending most of shelter-in-place and that COVID period dissecting the past. We suddenly didn’t have a job, we’d left Autodesk, we’re used to moving at such a velocity, and then we came to a complete standstill.  What we ended up doing is dissecting everything we felt we did wrong, and everything we did right. Everyone we thought we wanted to work with again, and everyone we for sure were not going to work with again. We mapped out the differences between those that we’d want to work with again, and those we didn’t. The first 24 or 25 people [at TigerEye] were people we’d worked with before. What determined whether or not you wanted to work with someone again? It was the people we thought were incredibly talented, and that we had a fun time building with. It’s as simple as that: looking back, yes, I would love to work with that person again. We had that core value in place before we even narrowed in on a product idea. Can you tell me a bit about what you’re doing differently as a founder this time, day-to-day? It’s a little bit different this time around; when I first started PlanGrid, I was in my mid-to-late 20s. I’m approaching 40 this year, and I have 3 young kids. Getting the luxury of doing it a second time around, I know the things that are a higher value — the things that only I can do as a CEO and founder. There are certain decisions only I can make, and there are decisions that are better off made by someone else at the company. I think in my 20s, as a founder and a first-time CEO, I honestly didn’t know what my job was. I always jumped onto support tickets; if customers had an issue, I’d be the first one to jump in. Companies get to a point where that’s not the best use of your time. We had really great support people on the team — and it feels really bad when the CEO is jumping in to do your job! It makes people feel like they suck at their job when the CEO jumps in and does it for them. So this time I’m really deliberate in how I spend my time. What does that look like? These days it’s mostly product and sales. But it’s also about having really heavily protected family time, and really heavily protected work time. That dedicated family time… I generally don’t ask questions about founders being married to each other because it feels too personal, but since you mentioned it earlier: does that make it easier or harder to separate life and work? Easier because your partner already understands the things that are going on in your life, or harder because, in some way, work is always in the air? We’ve been doing this together for so long that it’s hard for me to even know what it’s like on the other side. We worked together [on PlanGrid] starting in 2011; we got married in 2013. With three kids, and now two startups — yeah, it’s hard. It’s funny, but we often get founders who are thinking about starting a company with their partners, and the advice we give is: don’t do it. And the reason for that is that startups are hard. And marriage is hard. And having children is hard! So it’s this combinatorial explosion of problems that could come up. But we’re also a good example that it can work, but we’ve done a lot of work on personal growth, and practicing patience, and practicing forgiveness to be able to do what we do.  Last question here, but: you have an incredibly rare perspective on YC. You went through it as a founder multiple times, you were a Visiting Group Partner... for anyone going through the incoming YC batch, or applying in the future, what would you tell them to really maximize their time? It’s easy to get a bit obsessive — the goal is to make as much progress as you can in three months, so that you have a great Demo Day with as much revenue and progress as you can. But I would encourage everyone to look at the people around them [in the batch], and the startups around them, and put in the effort to get to know them. Learn what they’re building. I think back to YC Winter 2012 and Summer 2022, and it’s the people that really are the best part of YC. It’s the friendships I made; the partners that I got to work with. It’s really easy to be 100% heads down and obsessive over your thing — of course, talk to customers, make something people want! — but don’t forget that you are getting an incredible opportunity to meet people who are going through the exact same journey you are. Find out more about TigerEye here, and find Tracy's newsletter ""Predictable Growth"" here. Categories Founder StoriesAdvice Companies Mentioned PlanGrid (W12) Mobile applications for the construction industry. TigerEye (S22) Modern enterprise software for sales leaders Other Posts YC Firesides and a new book by Surbhi Sarna January 26, 2023 by Kat Mañalac Same, Same but Different with Vanta and Zapier July 7, 2022 by Y Combinator Startups For Students Guide January 18, 2022 by Tamanna Khemani, Kat Mañalac Greg oversees editorial content at Y Combinator. He was previously an editor at TechCrunch for nearly 15 years. © 2024 Y Combinator"
23,iofusion,AeroSpace is an i3-like tiling window manager for macOS | Hacker News,https://news.ycombinator.com/item?id=40596689,,2024-06-08T05:47:01Z,"
reply

 Given this layout:    h_tiles
    ├── window1 (focused)
    ├── window2
    └── window3

`move left` will produce this layout:    h_tiles
    ├── window1 (focused)
    └── v_tiles
        ├── window2
        └── window3     h_tiles
    ├── window1 (focused)
    ├── window2
    └── window3

`move left` will produce this layout:    h_tiles
    ├── window1 (focused)
    └── v_tiles
        ├── window2
        └── window3     h_tiles
    ├── window1 (focused)
    └── v_tiles
        ├── window2
        └── window3 
reply

 
reply

 
reply

 I did not even know it was possible to drag windows. I do that by selecting the window I want to split, then setting a ""vertical"" split with ""Command + v"", then creating the new window (usually a terminal).Or I move the window with ""Command + Shift + [hjkl]"". Or I move the window with ""Command + Shift + [hjkl]"". 
reply

 Every time it wakes from boots, the desktop has complete amnesia with 3 screens.Ideally I'd be able to drive my own workspaces, and it can use the laptop screen only, or 2 or 3 external monitors at different desks (work and home). Ideally I'd be able to drive my own workspaces, and it can use the laptop screen only, or 2 or 3 external monitors at different desks (work and home). 
reply

 displayplacer ""id:... res:2048x1330 hz:120 color_depth:8 enabled:true scaling:off origin:(0,0) degree:0"" ""id:... res:3840x2160 hz:30 color_depth:8 enabled:true scaling:off origin:(-918,-2160) degree:0""displayplacer is very easy to set up and also gives you access to modes that you can't access with System Preferences. displayplacer is very easy to set up and also gives you access to modes that you can't access with System Preferences. 
reply

 The script detects the connected screen UUID and applies the appropriate layout[1] http://www.hammerspoon.org/ [1] http://www.hammerspoon.org/ 
reply

 It's a little baffling how MacOS hasn't been able to get this to work.  If a Matrox TripleHead2Go could hit a high enough resolution for multiple monitors it might be a possibility.It did improve with a few tweaks but every so often it forgets.First I thought it was a Macbook Pro thing.  But a Mac Studio, with 3 separate monitors plugged into it, was just as confused.I'm not sure how Windows and Ubuntu can handle it just fine from my experience. It did improve with a few tweaks but every so often it forgets.First I thought it was a Macbook Pro thing.  But a Mac Studio, with 3 separate monitors plugged into it, was just as confused.I'm not sure how Windows and Ubuntu can handle it just fine from my experience. First I thought it was a Macbook Pro thing.  But a Mac Studio, with 3 separate monitors plugged into it, was just as confused.I'm not sure how Windows and Ubuntu can handle it just fine from my experience. I'm not sure how Windows and Ubuntu can handle it just fine from my experience. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 https://github.com/peterklijn/hammerspoon-shiftit 
reply

 
reply

 
reply

 
reply

 That's very interesting! I've been hesitant to use similar WMs as basically all required disabling SIP. Anyone knows what AeroSpace is doing differently that it can work alongside SIP?Edit: found this in the README:> AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai requires you to disable SIP to use some of its features. AeroSpace will either find another way (such as emulation of workspaces) or will not implement this feature at all (window transparency and window shadowing are not practical features) Edit: found this in the README:> AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai requires you to disable SIP to use some of its features. AeroSpace will either find another way (such as emulation of workspaces) or will not implement this feature at all (window transparency and window shadowing are not practical features) > AeroSpace will never require you to disable SIP (System Integrity Protection). For example, yabai requires you to disable SIP to use some of its features. AeroSpace will either find another way (such as emulation of workspaces) or will not implement this feature at all (window transparency and window shadowing are not practical features) 
reply

 
reply

 
reply

 Would love to see your yabairc if you can share. 
reply

 yabairc - https://github.com/SxC97/dotfiles/blob/main/.yabaircskhdrc - https://github.com/SxC97/dotfiles/blob/5db5e13f894f767722758...If it's still not working, make sure SIP is disabled and the Scripting Addition is installed and loaded. Here's a link to the instructions as it's a little complicated: https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(... skhdrc - https://github.com/SxC97/dotfiles/blob/5db5e13f894f767722758...If it's still not working, make sure SIP is disabled and the Scripting Addition is installed and loaded. Here's a link to the instructions as it's a little complicated: https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(... If it's still not working, make sure SIP is disabled and the Scripting Addition is installed and loaded. Here's a link to the instructions as it's a little complicated: https://github.com/koekeishiya/yabai/wiki/Installing-yabai-(... 
reply

 Looking through it I don't see a setting for instant space switching... I think maybe it's provided by default when you install the scripting addition? https://github.com/koekeishiya/yabai/issues/1527I have keybindings in my skhd for focusing spaces: https://github.com/kcrwfrd/dotfiles/blob/master/skhd/spaceI usually just keep 10 spaces at all times rather than creating new ones on demand. I have keybindings in my skhd for focusing spaces: https://github.com/kcrwfrd/dotfiles/blob/master/skhd/spaceI usually just keep 10 spaces at all times rather than creating new ones on demand. I usually just keep 10 spaces at all times rather than creating new ones on demand. 
reply

 
reply

 Example. Mousing over another window on the way to the menubar.https://github.com/sbmpost/AutoRaise https://github.com/sbmpost/AutoRaise 
reply

 If you had it, and tried to mouse to the menu, the menu would switch out from under you.I have some notes in a file somewhere about how a Mac-native focus-follows-mouse could even work, because I want it. It would end up being a rather different implementation than the X Windows style. I have some notes in a file somewhere about how a Mac-native focus-follows-mouse could even work, because I want it. It would end up being a rather different implementation than the X Windows style. 
reply

 
reply

 
reply

 https://www.hammerspoon.org/docs/hs.mouse.htmlhttps://www.hammerspoon.org/docs/hs.window.html https://www.hammerspoon.org/docs/hs.window.html 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 https://github.com/synappser/AutoFocus 
reply

 (I couldn't use yabai on my work computer as it requires disabling SIP, which the author of Aerospace explicitly argues against, which I find reasonable.)Actually, in my Linux days I moved from i3 (which Aerospace is based on) to xmonad (which Amethyst is based on), but on MacOS Aerospace just feels quite better. None of the 3 WMs on MacOS comes close to what a true WM on Linux can offer, but I guess Aerospace is as good as it can get. Actually, in my Linux days I moved from i3 (which Aerospace is based on) to xmonad (which Amethyst is based on), but on MacOS Aerospace just feels quite better. None of the 3 WMs on MacOS comes close to what a true WM on Linux can offer, but I guess Aerospace is as good as it can get. 
reply

 
reply

 I have considered trying that by minimizing windows, but would never get around to it.Tiling is doomed to sadness on macOS, because of lack of APIs. But this is probably the most performant approach.Have used yabai, but only for moving windows and focus-follows-mouse. Not for tiling. Because flaky (not yabai’s fault).Thanks nikitabobko.Looking forward to trying it as soon as I figure out how to mod alt-tab to ignore all the windows (from every fake workspace) in the corner.Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders Tiling is doomed to sadness on macOS, because of lack of APIs. But this is probably the most performant approach.Have used yabai, but only for moving windows and focus-follows-mouse. Not for tiling. Because flaky (not yabai’s fault).Thanks nikitabobko.Looking forward to trying it as soon as I figure out how to mod alt-tab to ignore all the windows (from every fake workspace) in the corner.Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders Have used yabai, but only for moving windows and focus-follows-mouse. Not for tiling. Because flaky (not yabai’s fault).Thanks nikitabobko.Looking forward to trying it as soon as I figure out how to mod alt-tab to ignore all the windows (from every fake workspace) in the corner.Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders Thanks nikitabobko.Looking forward to trying it as soon as I figure out how to mod alt-tab to ignore all the windows (from every fake workspace) in the corner.Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders Looking forward to trying it as soon as I figure out how to mod alt-tab to ignore all the windows (from every fake workspace) in the corner.Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders Also, linked in the docs, JankyBorders. Nice.https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders https://github.com/koekeishiya/yabai
https://github.com/lwouis/alt-tab-macos
https://github.com/FelixKratz/JankyBorders 
reply

 Command+Tab is global window switch. The ones above are for ""local"" switching in the context of the workspace. 
reply

 Not linux-primary right now.I can remember my linux-style stacking commands in order to try it.But I would want to fix my alt-tab at some point.Note: my sway (or mac) usage is basically two vertical windows or stacks of panes on a laptop screen. So a pretty simple setup. I can remember my linux-style stacking commands in order to try it.But I would want to fix my alt-tab at some point.Note: my sway (or mac) usage is basically two vertical windows or stacks of panes on a laptop screen. So a pretty simple setup. But I would want to fix my alt-tab at some point.Note: my sway (or mac) usage is basically two vertical windows or stacks of panes on a laptop screen. So a pretty simple setup. Note: my sway (or mac) usage is basically two vertical windows or stacks of panes on a laptop screen. So a pretty simple setup. 
reply

 
reply

 But it won’t work with AeroSpace.I mean, it will work, but it won’t work with all windows from _visible spaces_.Because ever window from _every space_ will be in the current space (tucked in the lower right corner). I mean, it will work, but it won’t work with all windows from _visible spaces_.Because ever window from _every space_ will be in the current space (tucked in the lower right corner). Because ever window from _every space_ will be in the current space (tucked in the lower right corner). 
reply

 
reply

 For example, with Raycast I can resize and float a window using ""reasonable size"" option, which also puts it in the middle. I can use left half and right half to create a split, or I can maximise a window or even use quarters or thirds. With AeroSpace, trrying to move the windows in the tiles using left half, right half, or left two thirds or using reasonable size to float the windows, it doesn't work.Also, there are bugs associated with moving apps to ""next desktop"" and ""previous desktop"". AeroSpace seems to have its own implementation of Mac's multiple desktops called workspaces, so the video guide actually doesn't show transitioning between different desktops, but different workspaces. As a result, using ""next desktop"" and ""previous desktop"" completely breaks the tiling. I would've liked Workspaces to just be associated directly with the different Mac desktops so that the movement between workspaces just moves to the different desktops so there is some compatibility with Raycast and native MacOS. Also, there are bugs associated with moving apps to ""next desktop"" and ""previous desktop"". AeroSpace seems to have its own implementation of Mac's multiple desktops called workspaces, so the video guide actually doesn't show transitioning between different desktops, but different workspaces. As a result, using ""next desktop"" and ""previous desktop"" completely breaks the tiling. I would've liked Workspaces to just be associated directly with the different Mac desktops so that the movement between workspaces just moves to the different desktops so there is some compatibility with Raycast and native MacOS. 
reply

 I think it’s going to become a standard app on Macs for powerusers in the futureI really need to deepdive into it because it does so much useful stuff. I use the Linear.app integration the most. I really need to deepdive into it because it does so much useful stuff. I use the Linear.app integration the most. 
reply

 So I find it really pretty reliable and pretty great. Multimonitor is hard and I don't use it much, but having stacks and fast 'full-screen' to minimize is so greatOn some version upgrades, work antivirus thinks it's a virus so disables it for 24 hours, and I hate using my computer those days, it feels so clunky and sad On some version upgrades, work antivirus thinks it's a virus so disables it for 24 hours, and I hate using my computer those days, it feels so clunky and sad 
reply

 I have not found anything better though, but I will install Linux when it’s working well on Apple Silicon. Only i3 is at least for me enough reason to use Linux as Mac OS X, again imho, is terrible window manager wise. 
reply

 
reply

 
reply

 
reply

 Aerospace goes bongers when i have native full screen. It will get confused on what to focus. My case:Workspace 1: terminal
Workspace 2: slack app
Open chrome in native full screenNow try to switch to workspace 1.Will give it more time without native fullscreen apps for a while. Hopefully it works better. Workspace 1: terminal
Workspace 2: slack app
Open chrome in native full screenNow try to switch to workspace 1.Will give it more time without native fullscreen apps for a while. Hopefully it works better. Now try to switch to workspace 1.Will give it more time without native fullscreen apps for a while. Hopefully it works better. Will give it more time without native fullscreen apps for a while. Hopefully it works better. 
reply

 Is the i3 stuff the difference?Personally I use a utility that allows resizing and moving windows with the mouse from anywhere on the window when holding a modifier combination, like Fluxbox. Not as automatic, but also never flaky - more like making floating much easier with less mouse movement than moving to a totally managed style. Personally I use a utility that allows resizing and moving windows with the mouse from anywhere on the window when holding a modifier combination, like Fluxbox. Not as automatic, but also never flaky - more like making floating much easier with less mouse movement than moving to a totally managed style. 
reply

 Multi monitor support is the killer for me, but there are other small wins.When you move a workspace in Yabai to a new monitor, it changes it's ID so you can't keep using keyboard shortcuts to access it (alt+2 breaks because it is no longer workspace 2, it becomes 11 or another number). I can move workspaces between monitors easily with alt+m and alt+shift+m.The other feature is that windows snap instantly without any Mission Control animations. That is a big one that really irks me.Those are the two features that I need most days and I find Yabai completely unusable because of the lack of workspace support When you move a workspace in Yabai to a new monitor, it changes it's ID so you can't keep using keyboard shortcuts to access it (alt+2 breaks because it is no longer workspace 2, it becomes 11 or another number). I can move workspaces between monitors easily with alt+m and alt+shift+m.The other feature is that windows snap instantly without any Mission Control animations. That is a big one that really irks me.Those are the two features that I need most days and I find Yabai completely unusable because of the lack of workspace support The other feature is that windows snap instantly without any Mission Control animations. That is a big one that really irks me.Those are the two features that I need most days and I find Yabai completely unusable because of the lack of workspace support Those are the two features that I need most days and I find Yabai completely unusable because of the lack of workspace support 
reply

 [0] https://github.com/koekeishiya/yabai/wiki/Disabling-System-I... 
reply

 
reply

 Actually, in my Linux days I moved from i3 (which Aerospace is based on) to xmonad (which Amethyst is based on), but on MacOS Aerospace just feels quite better. None of the 3 WMs on MacOS comes close to what a true WM on Linux can offer, but I guess Aerospace is as good as it can get. 
reply

 there are a few oddities, and I need to file a couple of bug reports, but it has made macos so much more tolerable than amethyst. 
reply

 As an Amethyst user, I'm approaching this comparison from the other direction: is there one compelling reason to switch?The improvement I'd most like to see in Amethyst is more stable window placement when I remove a monitor then add it again (I do that a lot with my laptop).It would be fantastic to have integration between Amethyst-managed spaces, Firefox windows, and Proton Pass vaults.  As in Space 1 knows that new windows should use the Google account in my Work vault, and Space 2 knows that new windows should log out from Google because there is no Google account in my Personal vault.  I doubt that's an imminent prospect, though.In general, I prefer the Amethyst approach of extending the builtin OSX window management to the Aerospace approach of replacing it.  Clearly the Amethyst developers weren't convinced that it's impossible to move windows between spaces with hotkeys, because they went ahead and implemented that.Overall, I'm really happy that these window managers are being written.  I use a 42 inch monitor, which would be awkward without them. The improvement I'd most like to see in Amethyst is more stable window placement when I remove a monitor then add it again (I do that a lot with my laptop).It would be fantastic to have integration between Amethyst-managed spaces, Firefox windows, and Proton Pass vaults.  As in Space 1 knows that new windows should use the Google account in my Work vault, and Space 2 knows that new windows should log out from Google because there is no Google account in my Personal vault.  I doubt that's an imminent prospect, though.In general, I prefer the Amethyst approach of extending the builtin OSX window management to the Aerospace approach of replacing it.  Clearly the Amethyst developers weren't convinced that it's impossible to move windows between spaces with hotkeys, because they went ahead and implemented that.Overall, I'm really happy that these window managers are being written.  I use a 42 inch monitor, which would be awkward without them. It would be fantastic to have integration between Amethyst-managed spaces, Firefox windows, and Proton Pass vaults.  As in Space 1 knows that new windows should use the Google account in my Work vault, and Space 2 knows that new windows should log out from Google because there is no Google account in my Personal vault.  I doubt that's an imminent prospect, though.In general, I prefer the Amethyst approach of extending the builtin OSX window management to the Aerospace approach of replacing it.  Clearly the Amethyst developers weren't convinced that it's impossible to move windows between spaces with hotkeys, because they went ahead and implemented that.Overall, I'm really happy that these window managers are being written.  I use a 42 inch monitor, which would be awkward without them. In general, I prefer the Amethyst approach of extending the builtin OSX window management to the Aerospace approach of replacing it.  Clearly the Amethyst developers weren't convinced that it's impossible to move windows between spaces with hotkeys, because they went ahead and implemented that.Overall, I'm really happy that these window managers are being written.  I use a 42 inch monitor, which would be awkward without them. Overall, I'm really happy that these window managers are being written.  I use a 42 inch monitor, which would be awkward without them. 
reply

 https://github.com/ianyh/Amethyst/blob/development/docs/conf... 
reply

 One issue: If an app uses native Mac tabs, Aerospace treats each tab as a window, which completely breaks the full screen functionality. Alacritty is one example. It’s really odd.Edit: there’s an open issue for this:
https://github.com/nikitabobko/AeroSpace/issues/68 Edit: there’s an open issue for this:
https://github.com/nikitabobko/AeroSpace/issues/68 
reply

 
reply

 Somehow over the past few years Windows became the more vibrant platform for twms (vs macOS) with developers (including myself) trying to push the envelope and introduce many quality of life features you still won't find even in Linux twms today.https://github.com/LGUG2Z/komorebihttps://github.com/glzr-io/glazewmhttps://github.com/dalyIsaac/WhimHopefully this new entrant will drive even more innovation in this space on macOS. https://github.com/LGUG2Z/komorebihttps://github.com/glzr-io/glazewmhttps://github.com/dalyIsaac/WhimHopefully this new entrant will drive even more innovation in this space on macOS. https://github.com/glzr-io/glazewmhttps://github.com/dalyIsaac/WhimHopefully this new entrant will drive even more innovation in this space on macOS. https://github.com/dalyIsaac/WhimHopefully this new entrant will drive even more innovation in this space on macOS. Hopefully this new entrant will drive even more innovation in this space on macOS. 
reply

 
reply

 
reply

 https://shortcat.app/ 
reply

 StumpWM has this and it's a beautiful thing (default binding: prefix+""). I got in the habit of titling terminal and browser windows with the topic name of whatever I was working on. Made for very fast switching to find what I wanted among many windows/topics.Sadly I've needed to switch to Wayland and StumpWM is X11 only but it has a successor called Mahogany[1] that's being worked on.Oh, and both are written in Common Lisp if you like tweaking your WM from the REPL.[1]: https://github.com/stumpwm/mahogany Sadly I've needed to switch to Wayland and StumpWM is X11 only but it has a successor called Mahogany[1] that's being worked on.Oh, and both are written in Common Lisp if you like tweaking your WM from the REPL.[1]: https://github.com/stumpwm/mahogany Oh, and both are written in Common Lisp if you like tweaking your WM from the REPL.[1]: https://github.com/stumpwm/mahogany [1]: https://github.com/stumpwm/mahogany 
reply

 I think this should be possible in linux with a bit of work (erm, famous last words?) especially because the whole desktop environment is fundamentally open and you don't need to depend on this providing an API.But I think an even better approach is to have build this functionality using screen parsers backed by recent AI advances. That way, you decouple the source / rendering of content from the sink / consumption of content, and can have more flexible behavior on behalf of the end user. I anticipate (hope) such tools to pop up over the next few years. But I think an even better approach is to have build this functionality using screen parsers backed by recent AI advances. That way, you decouple the source / rendering of content from the sink / consumption of content, and can have more flexible behavior on behalf of the end user. I anticipate (hope) such tools to pop up over the next few years. 
reply

 Compare basic multi-monitor commands in something like bspwm[1] or yabai[2][3] to twms on Windows where this is typically handled transparently by directional `move` and `focus` commands understanding monitor boundaries.Besides this, Whim has implemented a very functional ctrl+p style command palette which provides a great interface for more advanced on-the-fly/one-time window manager interactions.With komorebi I think that having different border colours to indicate different types of containers is very helpful (one colour for single window stacks, a different colour for monocle containers, a different colour for stacks with multiple windows), as well as custom window-based work area offsets[4] (so if you have an ultrawide monitor with only a single window on a workspace, you can add offsets to the sides so it doesn't stretch across the whole width and give poor usability).It's not really any one ""big thing"" but rather a difference in approach which adds up over many small design decisions.[1]: https://github.com/baskerville/bspwm/issues/563[2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 Besides this, Whim has implemented a very functional ctrl+p style command palette which provides a great interface for more advanced on-the-fly/one-time window manager interactions.With komorebi I think that having different border colours to indicate different types of containers is very helpful (one colour for single window stacks, a different colour for monocle containers, a different colour for stacks with multiple windows), as well as custom window-based work area offsets[4] (so if you have an ultrawide monitor with only a single window on a workspace, you can add offsets to the sides so it doesn't stretch across the whole width and give poor usability).It's not really any one ""big thing"" but rather a difference in approach which adds up over many small design decisions.[1]: https://github.com/baskerville/bspwm/issues/563[2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 With komorebi I think that having different border colours to indicate different types of containers is very helpful (one colour for single window stacks, a different colour for monocle containers, a different colour for stacks with multiple windows), as well as custom window-based work area offsets[4] (so if you have an ultrawide monitor with only a single window on a workspace, you can add offsets to the sides so it doesn't stretch across the whole width and give poor usability).It's not really any one ""big thing"" but rather a difference in approach which adds up over many small design decisions.[1]: https://github.com/baskerville/bspwm/issues/563[2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 It's not really any one ""big thing"" but rather a difference in approach which adds up over many small design decisions.[1]: https://github.com/baskerville/bspwm/issues/563[2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 [1]: https://github.com/baskerville/bspwm/issues/563[2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 [2]: https://github.com/koekeishiya/yabai/issues/505[3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 [3]: from my own personal yabai config - imo this is not really acceptable for a user facing API, especially for basic commands like focusing and moving:```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 ```    # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318     # focus window
    alt - h : yabai -m window --focus west || yabai -m display --focus west
    alt - j : yabai -m window --focus south || yabai -m display --focus south
    alt - k : yabai -m window --focus north || yabai -m display --focus north
    alt - l : yabai -m window --focus east || yabai -m display --focus east

    # swap window
    alt + shift - h : yabai -m window --swap west  || yabai -m window --display west && yabai -m display --focus west
    alt + shift - j : yabai -m window --swap south || yabai -m window --display south && yabai -m display --focus south
    alt + shift - k : yabai -m window --swap north || yabai -m window --display north && yabai -m display --focus north
    alt + shift - l : yabai -m window --swap east  || yabai -m window --display east && yabai -m display --focus east
```[4]: https://hachyderm.io/@LGUG2Z/112493589633823318 [4]: https://hachyderm.io/@LGUG2Z/112493589633823318 
reply

 
reply

 Does anyone have experience with this particular one and does it resolve these sorts of issues? 
reply

 > Windows get repositioned by normal interactions and the window manager is not able to wrangle themI'm certainly biased, but no, I don't face issues like that> and connecting external monitors is a disasterConnecting and disconnecting external monitors is an important use case for me as well. I dedicated my time to support specifically this case, so hopefully it works correctly for other users as well I'm certainly biased, but no, I don't face issues like that> and connecting external monitors is a disasterConnecting and disconnecting external monitors is an important use case for me as well. I dedicated my time to support specifically this case, so hopefully it works correctly for other users as well > and connecting external monitors is a disasterConnecting and disconnecting external monitors is an important use case for me as well. I dedicated my time to support specifically this case, so hopefully it works correctly for other users as well Connecting and disconnecting external monitors is an important use case for me as well. I dedicated my time to support specifically this case, so hopefully it works correctly for other users as well 
reply

 Based on the documentation the toml syntax is stretched quite a bit to implement some logic and callbacks. Have you considered some scripting language to make it easier to do, or is the need for this kind of advanced use so little that it's not really a problem? 
reply

 The complexity of the config has grown since then, with the bigest (and, actually, the only) problem being on-window-detected callback as you mentioned.I've been thinking about using a scripting language like Lua, but I haven't made my mind yet whether it's worth it I've been thinking about using a scripting language like Lua, but I haven't made my mind yet whether it's worth it 
reply

 
reply

 [0] https://github.com/cmacrae/spacebar 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I just tried this. I love it. No SPI and no transitions, just fast switching of apps. I will probably switch to this.Thank you for your work!! Thank you for your work!! 
reply

 
reply

 I specifically don't like how painfull Apple does it. (Google for ""notarization hell macos"")This is my pet project that I do for fun and for free. Bowing my head to Apple every time I want to release a new version is not fun. 
Waking up in the middle of the night, because Apple revoked the app (https://github.com/nikitabobko/AeroSpace/issues/167) is not fun.AeroSpace is a tool for developers by developers. Developers can audit the code and install the app from sources This is my pet project that I do for fun and for free. Bowing my head to Apple every time I want to release a new version is not fun. 
Waking up in the middle of the night, because Apple revoked the app (https://github.com/nikitabobko/AeroSpace/issues/167) is not fun.AeroSpace is a tool for developers by developers. Developers can audit the code and install the app from sources AeroSpace is a tool for developers by developers. Developers can audit the code and install the app from sources 
reply

 [1] https://github.com/nikitabobko/homebrew-tap/blob/main/Casks/... 
reply

 
reply

 
reply

 
reply

 
reply

 The experience is better than Amethyst or Yabai, but there is a learning curve. I think it would help if the documentation was one single searchable page, instead of several subpages.The default keybindings interfere with macOS's special characters, so I would recommend changing the modifier keys away from option+ and option+shift+.One thing I couldn't figure out. My setup is as follows:    h_tiles
    └── v_accordion
        ├── window1
        └── window2
    └── v_accordion
        ├── window1
        └── window2

I would like to limit the total number of horizontal tiles--more than two is too many--but I can't figure out how to make new windows automatically go into either accordion stack instead of a new horizontal tile. Is there a way to set mins and maxes per tree level? This is one of those features that Amethyst has that seems like a no-brainer. The default keybindings interfere with macOS's special characters, so I would recommend changing the modifier keys away from option+ and option+shift+.One thing I couldn't figure out. My setup is as follows:    h_tiles
    └── v_accordion
        ├── window1
        └── window2
    └── v_accordion
        ├── window1
        └── window2

I would like to limit the total number of horizontal tiles--more than two is too many--but I can't figure out how to make new windows automatically go into either accordion stack instead of a new horizontal tile. Is there a way to set mins and maxes per tree level? This is one of those features that Amethyst has that seems like a no-brainer. One thing I couldn't figure out. My setup is as follows:    h_tiles
    └── v_accordion
        ├── window1
        └── window2
    └── v_accordion
        ├── window1
        └── window2

I would like to limit the total number of horizontal tiles--more than two is too many--but I can't figure out how to make new windows automatically go into either accordion stack instead of a new horizontal tile. Is there a way to set mins and maxes per tree level? This is one of those features that Amethyst has that seems like a no-brainer.     h_tiles
    └── v_accordion
        ├── window1
        └── window2
    └── v_accordion
        ├── window1
        └── window2

I would like to limit the total number of horizontal tiles--more than two is too many--but I can't figure out how to make new windows automatically go into either accordion stack instead of a new horizontal tile. Is there a way to set mins and maxes per tree level? This is one of those features that Amethyst has that seems like a no-brainer. 
reply

 I had to unfortunately stop using aerospace due to some bugs. If I switch from workspace a to workspace b, sometimes aerospace keeps switching back to workspace a. It is annoying when you are trying to press the unmute button in the middle of a call but aerospace keeps taking you away from that workspace. The root cause could be that the apps that I use (internal tools) are misbehaving. I'll file a bug report if I can reproduce it on my personal mac. 
reply

 In terms of desktop layout, mind I don't use one, the Oberon vision comes to mind. A single, large pane, with all(?) of the others stacked to one side.My friend didn't use a tiling window manager, but had this desktop laid out as such, but all of those windows were terminal windows that he kept an eye on (he was our ops guy).But are folks using these layouts with their web browsers, word processors, IDEs, etc.? My friend didn't use a tiling window manager, but had this desktop laid out as such, but all of those windows were terminal windows that he kept an eye on (he was our ops guy).But are folks using these layouts with their web browsers, word processors, IDEs, etc.? But are folks using these layouts with their web browsers, word processors, IDEs, etc.? 
reply

 1. Emacs. Coding and other stuff2. Browser. Either the web application I'm working on and other searches3. Terminal. For long standing actions and other system stuff.4 . Documentation. Mostly another browser windows.5. Utilities. Mostly GUI related to the current project I'm working on (Database, API Tests,...I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. 2. Browser. Either the web application I'm working on and other searches3. Terminal. For long standing actions and other system stuff.4 . Documentation. Mostly another browser windows.5. Utilities. Mostly GUI related to the current project I'm working on (Database, API Tests,...I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. 3. Terminal. For long standing actions and other system stuff.4 . Documentation. Mostly another browser windows.5. Utilities. Mostly GUI related to the current project I'm working on (Database, API Tests,...I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. 4 . Documentation. Mostly another browser windows.5. Utilities. Mostly GUI related to the current project I'm working on (Database, API Tests,...I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. 5. Utilities. Mostly GUI related to the current project I'm working on (Database, API Tests,...I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. I'm working inside a VM (macOS hosts) so I use the host software for other things. But if it bare-metal, I'd add a workspace for media, and another for communication.As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. As you may guess, it's almost one maximized application for each workspace. This way I can quickly switch to it with the keybindings. The only time I have a proper tiling structure is when I need the information from both windows at once (Taking notes and reading a document,...). Tiling is mostly about not thinking about where the windows will be, not to have everything there at once.macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. macOS has Spaces, but the ergonomics are bad. Especially the animations if you use them a lot. 
reply

 One typical case is navigating a file manager to grab files that I need to drag and drop on a web UI, or folder/URI slug names I need to keep copying back and forth to use on a workflow.Another is watching stdout/stderr of a running script and a log tail at the same time.Sometimes I have tabs of web, file manager and some other app on one side and a terminal on the other as terminal commands are the glue of a workflow.Or I'll be screening a video on the left and doing edits on the right. Or keeping notes open on the side during a conference call.Sometimes I'll only have one window in a virtual desktop and ultrawide is too much, so I just have an idle terminal window as padding.Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. Another is watching stdout/stderr of a running script and a log tail at the same time.Sometimes I have tabs of web, file manager and some other app on one side and a terminal on the other as terminal commands are the glue of a workflow.Or I'll be screening a video on the left and doing edits on the right. Or keeping notes open on the side during a conference call.Sometimes I'll only have one window in a virtual desktop and ultrawide is too much, so I just have an idle terminal window as padding.Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. Sometimes I have tabs of web, file manager and some other app on one side and a terminal on the other as terminal commands are the glue of a workflow.Or I'll be screening a video on the left and doing edits on the right. Or keeping notes open on the side during a conference call.Sometimes I'll only have one window in a virtual desktop and ultrawide is too much, so I just have an idle terminal window as padding.Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. Or I'll be screening a video on the left and doing edits on the right. Or keeping notes open on the side during a conference call.Sometimes I'll only have one window in a virtual desktop and ultrawide is too much, so I just have an idle terminal window as padding.Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. Sometimes I'll only have one window in a virtual desktop and ultrawide is too much, so I just have an idle terminal window as padding.Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. Not having to hunt around for windows then hunting for their edges helps when I'm constantly opening, closing and sizing terminals, file managers and so on and so forth. It simply is faster with tiles. 
reply

 I have one of the ""drive in theater"" iMacs, and I prefer the windows in the center. It's big enough that if things were on either side, I'd have to crane my neck to focus on either side. I'd hate to have to do that all the time.I guess if I were to do anything ""tile"" wize it would be two smaller columns, one on the left, and one on the right, and then the big center as the main focus. I guess if I were to do anything ""tile"" wize it would be two smaller columns, one on the left, and one on the right, and then the big center as the main focus. 
reply

 
reply

 
reply

 
reply

 
reply

 It's not clear to me from the example configs, either default or i3-inspired. I've never used i3, though I did use AwesomeWM extensively about a decade ago.Edit: ah, the `join-with` command which is a superset of the `split` command. In the default config, alt-shift-semicolon to enter Service mode, then alt-shift-h/j/k/l for neighbor selection. Edit: ah, the `join-with` command which is a superset of the `split` command. In the default config, alt-shift-semicolon to enter Service mode, then alt-shift-h/j/k/l for neighbor selection. 
reply

 
reply

 
reply

   printf 'one\ntwo\nthree' | dmenu -l 3 -p ""Which one? ""

I use that in so many scripts on my main machines and would love to share them with macOS folks. I'm really surprised its not in something like Alfred.Maybe it exits and I don't know about it?? If not, maybe someone will add it to this open source Spotlight replacement I found: https://github.com/techrisdev/Snap Maybe it exits and I don't know about it?? If not, maybe someone will add it to this open source Spotlight replacement I found: https://github.com/techrisdev/Snap 
reply

 
reply

 I honestly think Apple would be half keen to do it themselves, they just probably haven't seen the idea to steal it yet 
reply

 [0] https://github.com/irth/dmenu_raycast[1] https://akko-cdn.hackrc.dev/media/e34cdc7683fece5260124ef47c... [1] https://akko-cdn.hackrc.dev/media/e34cdc7683fece5260124ef47c... 
reply

 
reply

 
reply

 Extremely thankful for both projects.https://github.com/synappser/AutoFocus https://github.com/synappser/AutoFocus 
reply

 
reply

 
reply

 As I'm learning to use this, I'm having trouble conceptualizing how my windows are organized in the tree, and how I'm affecting it. 
reply

 
reply

 [1]: https://nikitabobko.github.io/AeroSpace/commands#workspace-b... 
reply

 
reply

 Can someone ELI5 what this does? Does it impact AeroSpace only, or something globally on my Mac? Thanks! 
reply

 I frequently need to run a command like the following before running a downloaded program, which I'm guessing is exactly what the install script does:xattr -d com.apple.quarantine some-program.app xattr -d com.apple.quarantine some-program.app 
reply

 The README links to the Homebrew install script, relevant lines highlighted here: https://github.com/nikitabobko/homebrew-tap/blob/main/Casks/... 
reply

 
reply

 If you are actually using tiling WM on mac, could you share which one and why? 
reply

 You can check out my configs here [0] if you are so inclined, but it's not super polished.[0] https://github.com/Cu3PO42/gleaming-glacier/tree/next [0] https://github.com/Cu3PO42/gleaming-glacier/tree/next 
reply

 You're better off just sucking it up and using the native UI until you get sufficiently familiar with it that it rarely gets in your way too much. Meanwhile keep lobbying your employer (assuming that you are being forced into this by your job) to support Linux for development workstations. 
reply

 No matter how sophisticated these Mac Window Managers get, MacOS will always mess with the windows because it knows better than you. That's why people buy Macs, and it's not going to change. If you don't like this, then you actually don't like Macs.It's opinionated, and it's opinions do not match yours. I would have liked window snapping, but instead we have 1/2 baked split screen virtual desktops.I simply don't understand why people use them for development environments, the ""Unix underneath"" doesn't help enough in enough scenarios when it's hostile in so many others. It's opinionated, and it's opinions do not match yours. I would have liked window snapping, but instead we have 1/2 baked split screen virtual desktops.I simply don't understand why people use them for development environments, the ""Unix underneath"" doesn't help enough in enough scenarios when it's hostile in so many others. I simply don't understand why people use them for development environments, the ""Unix underneath"" doesn't help enough in enough scenarios when it's hostile in so many others. 
reply

 There’s at least non-fullscreen tiling available now if you hold down Option/Alt when hovering over the green traffic light (which also changes the corresponding Window menu items to “Move Window to (Left|Right) Side of Screen). There should probably be a toggle somewhere that makes this the default.> I simply don't understand why people use them for development environments, the ""Unix underneath"" doesn't help enough in enough scenarios when it's hostile in so many others.A lot of it is that the hardware is well-rounded and not as riddled with gambles/compromises as most other laptops are. Usually non-Apple laptops have at least one or two things that suck about them, with the most frequent being battery life, fan noise, and poor thermal design but include mediocre screen, bad keyboard, bad trackpad, bad power management, bad unplugged performance, bad port placement, and chintzy build among other things.Some percentage of users also just like macOS as it is, though. > I simply don't understand why people use them for development environments, the ""Unix underneath"" doesn't help enough in enough scenarios when it's hostile in so many others.A lot of it is that the hardware is well-rounded and not as riddled with gambles/compromises as most other laptops are. Usually non-Apple laptops have at least one or two things that suck about them, with the most frequent being battery life, fan noise, and poor thermal design but include mediocre screen, bad keyboard, bad trackpad, bad power management, bad unplugged performance, bad port placement, and chintzy build among other things.Some percentage of users also just like macOS as it is, though. A lot of it is that the hardware is well-rounded and not as riddled with gambles/compromises as most other laptops are. Usually non-Apple laptops have at least one or two things that suck about them, with the most frequent being battery life, fan noise, and poor thermal design but include mediocre screen, bad keyboard, bad trackpad, bad power management, bad unplugged performance, bad port placement, and chintzy build among other things.Some percentage of users also just like macOS as it is, though. Some percentage of users also just like macOS as it is, though. 
reply

 - it’s generally smooth and stable from a UI standpoint- it has mostly sane defaults- it has great font rendering- the video and audio subsystems are rock solid- it has access to every development tool I need daily via homebrewIt seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - it has mostly sane defaults- it has great font rendering- the video and audio subsystems are rock solid- it has access to every development tool I need daily via homebrewIt seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - it has great font rendering- the video and audio subsystems are rock solid- it has access to every development tool I need daily via homebrewIt seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - the video and audio subsystems are rock solid- it has access to every development tool I need daily via homebrewIt seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - it has access to every development tool I need daily via homebrewIt seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. It seems like there are generally two perspectives:- “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - “I shouldn’t have to change the way I want to do things”- “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. - “I don’t mind changing to another way of doing things”The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. The first group I think has a harder time with macOS.A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. A while back I decided to experiment with only using the default first-party apps for macOS for everything, and it greatly changed the amount of OS customization I did from that point on. I still live in iTerm for most of the day, but I don’t really feel hindered by the OS in any way anymore.From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. From my experience Windows actively attempts to subvert my clear, authoritative commands, second guesses every admin instruction, interrupts me with focus changes and dialog boxes instead of giving the active window absolute priority (this happens sometimes with macOS, too), and comes with bloat right out of the box. When this developer thinks about a hostile OS, Windows 11 is rhe first thing that comes to mind. 
reply

 
reply

 Why bring up whataboutism? I honestly don't care that Windows is also hostile. It also has the worst implementation of virtual desktops. What has that got to do with MacOS also being generally terrible.The rest of your comment adds nothing, as it just repeats what I said. The rest of your comment adds nothing, as it just repeats what I said. 
reply

 Used Yabai at first last time I was forced to use a Mac. Hated it with a passion. It was ""close"", but not close enough, and so I felt I was fighting it all the time.Ended up running most applications full-screen instead, and relying on tiling in iTerm2 or the applications most of the time instead. It helped that I was connected to a second monitor most of the time. Ended up running most applications full-screen instead, and relying on tiling in iTerm2 or the applications most of the time instead. It helped that I was connected to a second monitor most of the time. 
reply

 That said, Rectangle works - in my experience - flawlessly and is an essential addition to Mac window management. It’s not as ambitious as a full TWM, but what it does provide (snapping, hotkeys, etc) is essential. 
reply

 
reply

 So like if I have windows in four corners, and focus is in the bottom left, I want something like ?-k ?-l to move focus up and then right.  Now focus should be in the upper right window.  Have I missed it?  Does rectangle make this possible?Amethyst (xmonad inspired) gets close, but I want directionality, not cycles within cycles.So far my solution is to just use i3 on my desktop and have a bunch of ssh sessions into my macbook, which is fine until I do a clipboard-yank through the ssh session and wonder why I can't paste the contents into the browser on the linux side. Amethyst (xmonad inspired) gets close, but I want directionality, not cycles within cycles.So far my solution is to just use i3 on my desktop and have a bunch of ssh sessions into my macbook, which is fine until I do a clipboard-yank through the ssh session and wonder why I can't paste the contents into the browser on the linux side. So far my solution is to just use i3 on my desktop and have a bunch of ssh sessions into my macbook, which is fine until I do a clipboard-yank through the ssh session and wonder why I can't paste the contents into the browser on the linux side. 
reply

 
reply

 
reply

 
reply

 I tried both Yabai and Amethyst and, frankly, neither provide a clean experience.Yabai requires disabling some OS security feature iirc, which may or may not be an issue for you.
I seem to recall having issues with it, and switching to Amethyst pretty soon after.
It might also only support BSP layout, which I dislike - stacks all the way.Amethyst feels a little half baked. It works well enough, but configuration is through a GUI and saved in some non text format, making it not difficult friendly.
It also doesn't support things like moving windows between workspaces, meaning you need to have additional bindings for that through the MacOS command center or whatever it's called.Overall, I managed with Amethyst for close to 2 years, so that's the one I'd recommend of the two.
Luckily I'm back on a Linux machine and can use river now. :)Good luck! Yabai requires disabling some OS security feature iirc, which may or may not be an issue for you.
I seem to recall having issues with it, and switching to Amethyst pretty soon after.
It might also only support BSP layout, which I dislike - stacks all the way.Amethyst feels a little half baked. It works well enough, but configuration is through a GUI and saved in some non text format, making it not difficult friendly.
It also doesn't support things like moving windows between workspaces, meaning you need to have additional bindings for that through the MacOS command center or whatever it's called.Overall, I managed with Amethyst for close to 2 years, so that's the one I'd recommend of the two.
Luckily I'm back on a Linux machine and can use river now. :)Good luck! Amethyst feels a little half baked. It works well enough, but configuration is through a GUI and saved in some non text format, making it not difficult friendly.
It also doesn't support things like moving windows between workspaces, meaning you need to have additional bindings for that through the MacOS command center or whatever it's called.Overall, I managed with Amethyst for close to 2 years, so that's the one I'd recommend of the two.
Luckily I'm back on a Linux machine and can use river now. :)Good luck! Overall, I managed with Amethyst for close to 2 years, so that's the one I'd recommend of the two.
Luckily I'm back on a Linux machine and can use river now. :)Good luck! Good luck! 
reply

 It's been a while since I used Amethyst as the Mac is now on complete corporate lockdown, but I remember that being the biggest feature I used on Amethyst. MacOS doesn't support it, but Amethyst did. 
reply

 
reply

 
reply

 The good thing about RCMD is I can specify which specific key, consuming only 1 OPT or CMD key while saving the other key for the OS shortcuts 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 However, it does get more complicated with multiple monitors and I don’t know of the solution here. You’re right that the UX falls when you’re trying to work with menus across multiple monitors.Perhaps the right mix is doing something like the Chrome extras menu or if you’ve used VS Code on the web, where you have a small hamburger or (…) button that opens a context menu. Then you still have a menu for the application, but it’s hidden until you need it. Perhaps the right mix is doing something like the Chrome extras menu or if you’ve used VS Code on the web, where you have a small hamburger or (…) button that opens a context menu. Then you still have a menu for the application, but it’s hidden until you need it. 
reply

 
reply

 These days the menubar is always on all displays, not just the main one?(unless maybe you have ""Displays use separate Spaces"" unchecked?) (unless maybe you have ""Displays use separate Spaces"" unchecked?) 
reply

 
reply

 
reply

 
reply

 
reply

 Product looks amazing. I use Divvy but will definitely try out AeroSpace. Great name too. 
reply

 
reply

 I started it when I already had my usual number (many) of windows open across my usual number of spaces (lots) on my usual number of displays (3). First it spent 30 seconds trying to give me a seizure, and when it had finished I'm left with a total mess of a layout. Some windows 30px wide. Some windows not-quite-fullscreen. Some windows just randomly floating without any kind of recognisable pattern.Now I can't navigate around because dragging a window sends it flying off to the corner of a different display. None of the default keybindings seem to do what they say they should. The focussed window disappeared entirely when I tried resize mode, and I can't find the way out of it because that was the window with the instructions.I think I'll try something else. Now I can't navigate around because dragging a window sends it flying off to the corner of a different display. None of the default keybindings seem to do what they say they should. The focussed window disappeared entirely when I tried resize mode, and I can't find the way out of it because that was the window with the instructions.I think I'll try something else. I think I'll try something else. 
reply

 
reply

 
reply

 
reply

 As a tiling wm user (Hyprland now) I always wonder how OSX users claim they're that productive with all those alt+tabbin' I meant cmd+tabbin'. Welcome to the 2010s guys! 
reply

 I internalized the swipe gestures (3 fingers left/right) early on with OS X 10.6 snow leopard and then with the Mission Control update (3 fingers up) I am basically always faster with a trackpad than any keyboard “workspace” navigation. 
reply

 So my tip for being productive in a tiling window manager is to get a linux machine and use sway. 
reply

 
reply

 2. I myself consider the virtual emulation of workspaces to be the strongest feature of the AeroSpace. If I could disable the workspace switching animation in yabai or Amethyst (with SIP enabled, of course), I'd probably not bother myself creating AeroSpace. That's what the ""space"" part in the app name means. It resembles the strongest feature of AeroSpace - workspaces 
reply

 I also tried implementing an i3 like workspace numbering/creating on top of yabai - it was an uphill battle due to how limited native macOS space management is and I never finished, so thank you for creating AeroSpace :)I actually use it in tandem with yabai now - I added an ""exec-on-window-hide""[0]  option similar to ""exec-on-workspace-change"", and use it to make the hidden windows transparent (and to make them visible again)[1].I wonder if hooks like that would be a good way to have a nice middle-ground to let people who don't care as much about SIP to extend upon AeroSpace's model?I'll probably send over a pull request for your consideration soon.[0] https://github.com/irth/AeroSpace/commit/54b48aa0edf9817031c...[1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... I actually use it in tandem with yabai now - I added an ""exec-on-window-hide""[0]  option similar to ""exec-on-workspace-change"", and use it to make the hidden windows transparent (and to make them visible again)[1].I wonder if hooks like that would be a good way to have a nice middle-ground to let people who don't care as much about SIP to extend upon AeroSpace's model?I'll probably send over a pull request for your consideration soon.[0] https://github.com/irth/AeroSpace/commit/54b48aa0edf9817031c...[1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... I wonder if hooks like that would be a good way to have a nice middle-ground to let people who don't care as much about SIP to extend upon AeroSpace's model?I'll probably send over a pull request for your consideration soon.[0] https://github.com/irth/AeroSpace/commit/54b48aa0edf9817031c...[1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... I'll probably send over a pull request for your consideration soon.[0] https://github.com/irth/AeroSpace/commit/54b48aa0edf9817031c...[1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... [0] https://github.com/irth/AeroSpace/commit/54b48aa0edf9817031c...[1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... [1] https://gist.github.com/irth/0bc96778c6073c756d3bb657f1bfe8b... 
reply

 
reply

"
24,espillar,Own a weather station? We want your data | Hacker News,https://news.ycombinator.com/item?id=40589172,,2024-06-11T05:47:01Z,"For context:The governments of the world provides these big weather companies (weather.com (cough IBM), Accuweather (cough IBM cough), etc) a metric shit ton of their data completely for free (by law) including data transfer. These are things like radar, satellite, ground station data, forecasts, composite models, etc. These companies profit substantially on it, as in billions of dollars. You as citizens also can get this data completely for free as well! MADIS is a system the government is working on to make that data access easier by bringing together many of these systems together and removing the bureaucratic redundancy and abstracting out the aging infrastructure. This is literally terabytes of data per day you can grab with almost no questions asked. That data is then processed privately and resold and repackaged to the end user, and you probably interact with this privatized data the most.The frustration I have much of the additional ""value"" these weather data brokers provide is by linking up with each other with data contracts. These private companies have a much much higher detail on the ground than the government by being able to partner with companies that make common internet-connected personal radar stations and reselling that data to each other. The government doesn't have that privilege to buy limitless data. NOAA/NWS, for example, is extremely underfunded so if they had to privilege to buy it they probably couldn't come to an agreement to buy it. As a result, they can't use that data to improve the accuracy of alerts/warnings/forcasts, the same exact tools that the big weather companies make all their money from. It's a shit cycle and totally unfair IMO.So please contribute if you can!!Sidebar: I'm a founder of a self-bootstrapped startup to build a better weather data broker that doesn't cost an arm and a leg. If that's something you are passionate about solving, feel free to reach out :) The governments of the world provides these big weather companies (weather.com (cough IBM), Accuweather (cough IBM cough), etc) a metric shit ton of their data completely for free (by law) including data transfer. These are things like radar, satellite, ground station data, forecasts, composite models, etc. These companies profit substantially on it, as in billions of dollars. You as citizens also can get this data completely for free as well! MADIS is a system the government is working on to make that data access easier by bringing together many of these systems together and removing the bureaucratic redundancy and abstracting out the aging infrastructure. This is literally terabytes of data per day you can grab with almost no questions asked. That data is then processed privately and resold and repackaged to the end user, and you probably interact with this privatized data the most.The frustration I have much of the additional ""value"" these weather data brokers provide is by linking up with each other with data contracts. These private companies have a much much higher detail on the ground than the government by being able to partner with companies that make common internet-connected personal radar stations and reselling that data to each other. The government doesn't have that privilege to buy limitless data. NOAA/NWS, for example, is extremely underfunded so if they had to privilege to buy it they probably couldn't come to an agreement to buy it. As a result, they can't use that data to improve the accuracy of alerts/warnings/forcasts, the same exact tools that the big weather companies make all their money from. It's a shit cycle and totally unfair IMO.So please contribute if you can!!Sidebar: I'm a founder of a self-bootstrapped startup to build a better weather data broker that doesn't cost an arm and a leg. If that's something you are passionate about solving, feel free to reach out :) The frustration I have much of the additional ""value"" these weather data brokers provide is by linking up with each other with data contracts. These private companies have a much much higher detail on the ground than the government by being able to partner with companies that make common internet-connected personal radar stations and reselling that data to each other. The government doesn't have that privilege to buy limitless data. NOAA/NWS, for example, is extremely underfunded so if they had to privilege to buy it they probably couldn't come to an agreement to buy it. As a result, they can't use that data to improve the accuracy of alerts/warnings/forcasts, the same exact tools that the big weather companies make all their money from. It's a shit cycle and totally unfair IMO.So please contribute if you can!!Sidebar: I'm a founder of a self-bootstrapped startup to build a better weather data broker that doesn't cost an arm and a leg. If that's something you are passionate about solving, feel free to reach out :) So please contribute if you can!!Sidebar: I'm a founder of a self-bootstrapped startup to build a better weather data broker that doesn't cost an arm and a leg. If that's something you are passionate about solving, feel free to reach out :) Sidebar: I'm a founder of a self-bootstrapped startup to build a better weather data broker that doesn't cost an arm and a leg. If that's something you are passionate about solving, feel free to reach out :) 
reply

 
reply

 [1]: https://f-droid.org/en/packages/org.breezyweather/ 
reply

 If I may ask a question, do you have historical air quality data? 
reply

 
reply

 
reply

 
reply

 As my own sidebar, I spent many years at a national lab working with distributed sensor networks (primarily ATC and other radar for detecting non-weather stuff :) ). I thought about using ADS-B as input for weather state and forecasts, but never got around to trying it. Now that I am working on my own startup (self-funded and without revenue so far), so this again will likely languish in my todo list. If someone wants to try it, great, and feel free to reach out as I can probably save you some time selecting and interpreting the right ADS-B fields:We have a lot of aircraft blasting ADS-B reports whenever they fly. Most reports contain (1) accurate 3D position, including altitude and (2) barometric altitude measurements, which gives you (after some minimal work) air pressure. So you have millions freely available pressure reports not just on the ground, but throughout 0-40000 ft altitude band.You also get measured airspeed and groundspeed, so in addition to pressure you get wind vectors at thousands of points in the air, updating in real time. I suspect this can provide some non-trivial information and I am not aware of anyone actually using it for this purpose. We have a lot of aircraft blasting ADS-B reports whenever they fly. Most reports contain (1) accurate 3D position, including altitude and (2) barometric altitude measurements, which gives you (after some minimal work) air pressure. So you have millions freely available pressure reports not just on the ground, but throughout 0-40000 ft altitude band.You also get measured airspeed and groundspeed, so in addition to pressure you get wind vectors at thousands of points in the air, updating in real time. I suspect this can provide some non-trivial information and I am not aware of anyone actually using it for this purpose. You also get measured airspeed and groundspeed, so in addition to pressure you get wind vectors at thousands of points in the air, updating in real time. I suspect this can provide some non-trivial information and I am not aware of anyone actually using it for this purpose. 
reply

 These data are a very important input for operational weather forecasting. On a global basis, we've seen how losing these data during the pandemic due to reductions in air travel decreased forecast model skill [2]. Furthermore, ACARS profiles derived from aircraft landing at airports where severe weather is expected are regularly used to complement SPECI weather balloon launches.[1]: https://community.wmo.int/en/activity-areas/aircraft-based-o...
[2]: https://journals.ametsoc.org/view/journals/apme/59/11/JAMC-D... [1]: https://community.wmo.int/en/activity-areas/aircraft-based-o...
[2]: https://journals.ametsoc.org/view/journals/apme/59/11/JAMC-D... 
reply

 
reply

 
reply

 For specific ADS-B fields, ADS-B exchange used to have a great data fields overview. ICAO should have a spec, too. 
reply

 [2] https://www.youtube.com/watch?v=UTby_e4-Rhg 
reply

 
reply

 
reply

 Unbelievable. 
reply

 
reply

 I think someone spilled idiot juice in the water. 
reply

 
reply

 This is the Norwegian government weather service. It's global and free for everyone. Also has fully open apis 
reply

 It is incredibly fast, no bloat, no ads.Just not as accurate as a local service as their main focus is - norway. Just not as accurate as a local service as their main focus is - norway. 
reply

 
reply

 Didn't IBM sell weather.com (and all of the assets) to a private equity? The deal was announced last year and closed in Feb 2024https://finance.yahoo.com/news/francisco-partners-completes-... https://finance.yahoo.com/news/francisco-partners-completes-... 
reply

 
reply

 Just opening weather.com will send almost 1000 requests , transfer 10.3MB. Every 30 seconds or so it will make about 300 requests + 2MB of transfer for new ads. It's... insane 
reply

 
reply

 AccuWeather, a corporation like any other is made of people.  These shortsighted decisions and shitty behavior are directly attributable to people who do them for selfish reasons.So let's start talking about these people in the first person, not in the abstract.Who is directly responsible for these atrocious actions and why do they stand to benefit from them? So let's start talking about these people in the first person, not in the abstract.Who is directly responsible for these atrocious actions and why do they stand to benefit from them? Who is directly responsible for these atrocious actions and why do they stand to benefit from them? 
reply

 Here are two: Rick Santorum and Jim Bridenstine.https://www.washingtonpost.com/news/capital-weather-gang/wp/... https://www.washingtonpost.com/news/capital-weather-gang/wp/... 
reply

 https://weather.gc.ca/city/pages/on-118_metric_e.htmland any info from Environment Canada, being packaged in a way that might compete, with the very same people using Environment Canada's free data for-profit.Cries of ""How can the Government compete with the private sector"" are thrown around, always glossing over how that very data is often sourced from the Government.  Pathetic.  Leeches of the worst kind. and any info from Environment Canada, being packaged in a way that might compete, with the very same people using Environment Canada's free data for-profit.Cries of ""How can the Government compete with the private sector"" are thrown around, always glossing over how that very data is often sourced from the Government.  Pathetic.  Leeches of the worst kind. Cries of ""How can the Government compete with the private sector"" are thrown around, always glossing over how that very data is often sourced from the Government.  Pathetic.  Leeches of the worst kind. 
reply

 
reply

 
reply

 [1] https://youtube.com/watch?v=qMGn9T37eR8 
reply

 
reply

 I haven't heard of personal radar stations, and wasn't hitting anything in a quick web search. Are you able to provide an example of these systems? 
reply

 For reference, a weather radar operates in Doppler mode with return signal coming from Rayleigh scattering of raindrops, so it's on the 3cm - 10cm wavelength. You are talking about something like a 5 meter diameter antenna dish that weighs half a tonne, which is on an elevation-azimuth motorized mount, in a 7 meter diameter radome, with peak transmit power of 250 000 W.Of course you can buy one yourself, if you have the space, electrical power and money for it - ballpark 1.5 mill. USD. Of course you can buy one yourself, if you have the space, electrical power and money for it - ballpark 1.5 mill. USD. 
reply

 C-band weather radars existed since forever, first using magnetron transmitters and now solid-state amplifiers, though there are still a lot of new magnetron-based systems being installed, with the downside that magnetron pulses are practically impossible to modulate to perform advanced radar techniques that improve different aspects performance. There are also X-band weather radars, which operate on higher frequencies and use more modestly sized antennas (but still larger than you'd like to have on your house roof). They are more limited in range (100km-ish max) due to high attenuation and mostly used at airports, offshore oil rigs and windfarms and similar installations that mostly interested in precise local weather. They are still several hundred thousand bucks. 
reply

 https://www.furuno.com/files/Brochure/448/upload/WR110_EN.pd... 
reply

 That said, I'd guess $10,000 US < price < $50,000 US for that product given the pricing of $8K US for smaller commercial fishing radars from the same company.More on the two compact weather radar systems: https://www.furuno.com/en/systems/meteorological-monitoring/ More on the two compact weather radar systems: https://www.furuno.com/en/systems/meteorological-monitoring/ 
reply

 
reply

 There's another recent peer comment that confirms 1.5 million US for a large 250kW is a pulse power for a C-band stationary radar system with 300 km of range.This is a small doppler with modest power and 70 km range max.If cost is proportional to the 3D volume of space scanned (as the power requirements likely are) Then this small mini radar might well be less than 100K.TBH I have no specific knowledge here although I have worked in other sensing domains and seen a wide spread on cost of equipment related to volume and quality of data.I'd be interested in the flat cost price of the mini system, I suspect that's not going to appear without some inside knowledge or working a dealer, it appears to be a rare bespoke kinf of thing, not like the commercial fishing radars. This is a small doppler with modest power and 70 km range max.If cost is proportional to the 3D volume of space scanned (as the power requirements likely are) Then this small mini radar might well be less than 100K.TBH I have no specific knowledge here although I have worked in other sensing domains and seen a wide spread on cost of equipment related to volume and quality of data.I'd be interested in the flat cost price of the mini system, I suspect that's not going to appear without some inside knowledge or working a dealer, it appears to be a rare bespoke kinf of thing, not like the commercial fishing radars. If cost is proportional to the 3D volume of space scanned (as the power requirements likely are) Then this small mini radar might well be less than 100K.TBH I have no specific knowledge here although I have worked in other sensing domains and seen a wide spread on cost of equipment related to volume and quality of data.I'd be interested in the flat cost price of the mini system, I suspect that's not going to appear without some inside knowledge or working a dealer, it appears to be a rare bespoke kinf of thing, not like the commercial fishing radars. TBH I have no specific knowledge here although I have worked in other sensing domains and seen a wide spread on cost of equipment related to volume and quality of data.I'd be interested in the flat cost price of the mini system, I suspect that's not going to appear without some inside knowledge or working a dealer, it appears to be a rare bespoke kinf of thing, not like the commercial fishing radars. I'd be interested in the flat cost price of the mini system, I suspect that's not going to appear without some inside knowledge or working a dealer, it appears to be a rare bespoke kinf of thing, not like the commercial fishing radars. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 NOAA has already made some contracts with Spire [1] and Saildrone [2]. I am sure there are more but these are the ones most familiar to me.Your weather data broker startup sounds very interesting![1]: https://spire.com/press-release/spire-global-awarded-nationa...
[2]: https://research.noaa.gov/2022/08/03/noaa-and-saildrone-team... Your weather data broker startup sounds very interesting![1]: https://spire.com/press-release/spire-global-awarded-nationa...
[2]: https://research.noaa.gov/2022/08/03/noaa-and-saildrone-team... [1]: https://spire.com/press-release/spire-global-awarded-nationa...
[2]: https://research.noaa.gov/2022/08/03/noaa-and-saildrone-team... 
reply

 The private sector has really embellished its capabilities to the detriment of the CDP and other programs. I think too many industry players saw NOAA's expansion here as a potential slush fund to fully subsidize their R&D, but again the TRL of planned observation systems was too low and so the system didn't really work efficiently. Classic policy failure - would make a fantastic case study or Master's thesis for someone studying weather in an STS program![1]: https://www.space.commerce.gov/business-with-noaa/commercial... [1]: https://www.space.commerce.gov/business-with-noaa/commercial... 
reply

 Would love to hear more about this. I’m a researcher and a lot of my work revolves around machine learning applications to building energy modeling, and one of my projects actually revolves around the difference between using TMY vs AMY EPW files in automatic calibration of models.  Would be great to chat more. What’s the name of your startup? I can shoot you an email at the official email. 
reply

 Is there a Foss server around that I can set up on my own ? 
reply

 
reply

 
reply

 
reply

 [0] https://aprs.fi/page/api 
reply

 [0]: <http://www.findu.com/> 
reply

 There, selecting 'Weather Prediction Center' goes to https://www.wpc.ncep.noaa.gov/#page=ovwThere I searched in 'Local forecast' for cities and see most of what 'weather com' delivers, with 3 domains in Noscript instead of the couple-dozen from weather.com There I searched in 'Local forecast' for cities and see most of what 'weather com' delivers, with 3 domains in Noscript instead of the couple-dozen from weather.com 
reply

 My hobby will include a C band antenna this fall, and I’m on the hunt for radar data sources in which to create my own mosaics. 
reply

 
reply

 They get input from e.g. NOAA (US), DWD (DE), YR (NO) and so on.I'm not affiliated, just needed some historical data and (finally!) discovered them. I'm not affiliated, just needed some historical data and (finally!) discovered them. 
reply

 Thanks!P.S.: I'm passionate about air quality, given I have alergies and was an active member of the bicycle activism movement for about 10 years. P.S.: I'm passionate about air quality, given I have alergies and was an active member of the bicycle activism movement for about 10 years. 
reply

 https://www.nasa.gov/missions/tempo/nasa-releases-new-high-q...https://news.ycombinator.com/item?id=40530798https://news.ycombinator.com/item?id=40534632 https://news.ycombinator.com/item?id=40530798https://news.ycombinator.com/item?id=40534632 https://news.ycombinator.com/item?id=40534632 
reply

 
reply

 Huh? This is kind of an odd take for a few reasons. For starters, NOAA isn't ""extremely underfunded""; with the possible exception of the current budgeting cycle, NOAA generally does pretty well and has strong bipartisan support. It could always use more money, but I wouldn't call it ""underfunded.The reason NOAA doesn't buy more data is because most of the available data has limited value. Personal weather stations have substantial quality issues and add almost no value in areas where we already have high-quality surface observations. We thin out and throw away a ton of surface observations already during the data assimilation process to initialize our forecast models anyways - data from aloft is far more valuable and impactful from a forecast impact perspective.For what it's worth, few if any companies use proprietary observations to improve their forecasts. It's an open secret that the vast majority of companies out there are just applying proprietary statistical modeling / bias correction on top of publicly available data. Only a handful of companies actually have novel observations, and there's limited evidence it makes a significant difference in the forecast. At best, it can result in the way that those statistical corrections are applied to existing forecasts and ensembles - you can count on one hand the number of companies that actually run a vertically-integrated stack including data assimilation of proprietary observations and end-to-end numerical modeling.That isn't to say there isn't unique value in the observations. It's just that the industry flagrantly misleads about how they use them. The reason NOAA doesn't buy more data is because most of the available data has limited value. Personal weather stations have substantial quality issues and add almost no value in areas where we already have high-quality surface observations. We thin out and throw away a ton of surface observations already during the data assimilation process to initialize our forecast models anyways - data from aloft is far more valuable and impactful from a forecast impact perspective.For what it's worth, few if any companies use proprietary observations to improve their forecasts. It's an open secret that the vast majority of companies out there are just applying proprietary statistical modeling / bias correction on top of publicly available data. Only a handful of companies actually have novel observations, and there's limited evidence it makes a significant difference in the forecast. At best, it can result in the way that those statistical corrections are applied to existing forecasts and ensembles - you can count on one hand the number of companies that actually run a vertically-integrated stack including data assimilation of proprietary observations and end-to-end numerical modeling.That isn't to say there isn't unique value in the observations. It's just that the industry flagrantly misleads about how they use them. For what it's worth, few if any companies use proprietary observations to improve their forecasts. It's an open secret that the vast majority of companies out there are just applying proprietary statistical modeling / bias correction on top of publicly available data. Only a handful of companies actually have novel observations, and there's limited evidence it makes a significant difference in the forecast. At best, it can result in the way that those statistical corrections are applied to existing forecasts and ensembles - you can count on one hand the number of companies that actually run a vertically-integrated stack including data assimilation of proprietary observations and end-to-end numerical modeling.That isn't to say there isn't unique value in the observations. It's just that the industry flagrantly misleads about how they use them. That isn't to say there isn't unique value in the observations. It's just that the industry flagrantly misleads about how they use them. 
reply

 I regularly notice that the NWS forecasts, even in the very short term, get the surface conditions rather wrong. (This is by comparison to a an inadvertent but, I think, quite accurate surface temperature and humidity measurement that I have.)I fully believe that the measurements aloft do a great job of predicting the conditions aloft, but I wonder whether the results would be further improved by even a fairly simple model to map the forecast results back to detailed surface conditions.  After all, many of consumers of weather forecasts, e.g. people caring about personal comfort, climate control energy predictions and pre-heating/pre-cooling of buildings, etc. care about surface conditions more than they care about conditions aloft. I fully believe that the measurements aloft do a great job of predicting the conditions aloft, but I wonder whether the results would be further improved by even a fairly simple model to map the forecast results back to detailed surface conditions.  After all, many of consumers of weather forecasts, e.g. people caring about personal comfort, climate control energy predictions and pre-heating/pre-cooling of buildings, etc. care about surface conditions more than they care about conditions aloft. 
reply

 Observations for the surface don't have this effect for two reasons: (1) they can be dominated by local influences (like local topography) that poorly constrain the background atmospheric state, and (2) the majority of numerical weather models do not directly model the planetary boundary layer (the layer of the atmosphere closest to the ground), and instead parameterize processes that occur here. What this means, practically, is that the information content of surface observations is low (1), and even when it isn't, there isn't a mechanism to effectively propagate this information outside of a single grid cell or even column in the actual forecast model (2).That's why observations are typically used to bias-correct forecast models - it's a form of localization or downscaling. That's why observations are typically used to bias-correct forecast models - it's a form of localization or downscaling. 
reply

 I'm very interested to see how the ML modeling revolution changes this. The ability to perform global forecasts on a single GPU should make it cost competitive for more companies. I know several companies are already deriving their own weights for the forecasting component so that they can sell them. Google appears to be working on the next piece of the puzzle too with using ML for the data assimilation step, or skipping that altogether and using observations to go directly to forecasts. 
reply

 
reply

 
reply

 More importantly, NOAA explicitly funds the National Mesonet Program [1] to actively identify, acquire, consume, and ingest data from a wide variety of state and federal agencies across the country. The NMP itself partners with a major private sector company, Synoptic Data PBC [2] to perform the engineering necessary to acquire all this data. Synoptic actively maintains the infrastructure which consumes and publishes this data to MADIS for use by NOAA and any other stakeholder.[1]: https://nationalmesonet.us/
[2]: https://synopticdata.com/ [1]: https://nationalmesonet.us/
[2]: https://synopticdata.com/ 
reply

 
reply

 As consumers and creators of plenty of weather data you might see a fair bit of traction there! 
reply

 
reply

 I use this and love it. 
reply

 or
https://www.davisinstruments.com/products/sonic-anemometer 
reply

 
reply

 Michael Lewis' book The Fifth Risk goes IN DEPTH into how Accuweather/Weather.com and the government were interacting (particularly during the Trump administration).I highly recommend the book in general and for this particular story in particular. I highly recommend the book in general and for this particular story in particular. 
reply

 
reply

 Weather Company was sold for $2B to IBM in 2015 (and recently sold to private equity for undisclosed amount). Tomorrow.IO has a $1B+ valuation pre-IPO SPAC.https://www.forbes.com/sites/johnkoetsier/2021/04/08/ibms-we... https://www.forbes.com/sites/johnkoetsier/2021/04/08/ibms-we... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 P.S. It's easy find online versions of the reports that pilots get over the radio. Here's an example with explanation for Boston Logan International, USA: https://aviationweather.gov/data/metar/?id=KBOS&hours=0&deco... 
reply

 So they do provide a public service, even if maybe they get too much money from it. 
reply

 
reply

 It's ""free"" in the worst sense of the word. 
reply

 All the plots and features seemed nice so I paid for a year of subscription (after Dark Sky was discontinued ugh), but if they do that I’ll just stick to the default apple Weather app. 
reply

 These companies are already receiving government data for free. And then enriching it with private weather station data (and ads). So your taxes are already funding some part of it.As computing power being used for forecasting increases (14.5 petaflops each for both Dogwood and Cactus NOAA supercomputers), having more granular data is going to be useful in improving their models.https://www.noaa.gov/news-release/noaa-completes-upgrade-to-... As computing power being used for forecasting increases (14.5 petaflops each for both Dogwood and Cactus NOAA supercomputers), having more granular data is going to be useful in improving their models.https://www.noaa.gov/news-release/noaa-completes-upgrade-to-... https://www.noaa.gov/news-release/noaa-completes-upgrade-to-... 
reply

 
reply

 Nobody wants the data, sadly - there used to be a national monitoring system on rivers up and down the country, but after 2008 it was abandoned, and now there’s only limited monitoring of major rivers, and none of tributaries. The IPMA and APA eventually responded and said thanks for your interest, but we have no means to ingest third party data.I wish it could be useful for someone other than myself - but short of building my own platform and ingesting the APA’s copyrighted data, it ain’t happening. I wish it could be useful for someone other than myself - but short of building my own platform and ingesting the APA’s copyrighted data, it ain’t happening. 
reply

 It's scary how easily this happens. Even America briefly reduced funding to the USGS during the Trump years, among other agencies that saw budgets cut for anything that collects data on the environment. The impact was immediate and now certain important time series including stream gauges and ground water levels have years of missing data because those programs were shut down. 
reply

 
reply

 I want your API to not return 500 errors for hours at a time, multiple times a day...Today it was down from 9AM to 2PM, and then from 9:30PM to 11PM.Yesterday was even worse.It isn't rate throttling because I only try to retrieve current conditions every 30 minutes.Also, the load of the API might be a lot lower if it were possible to retrieve just the current measurements, but the response you get back for observations is insanely bloated with 12 hours back of each measurement, plus a bunch of station information that is heavily duplicative of information provided about the station.Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. Today it was down from 9AM to 2PM, and then from 9:30PM to 11PM.Yesterday was even worse.It isn't rate throttling because I only try to retrieve current conditions every 30 minutes.Also, the load of the API might be a lot lower if it were possible to retrieve just the current measurements, but the response you get back for observations is insanely bloated with 12 hours back of each measurement, plus a bunch of station information that is heavily duplicative of information provided about the station.Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. Yesterday was even worse.It isn't rate throttling because I only try to retrieve current conditions every 30 minutes.Also, the load of the API might be a lot lower if it were possible to retrieve just the current measurements, but the response you get back for observations is insanely bloated with 12 hours back of each measurement, plus a bunch of station information that is heavily duplicative of information provided about the station.Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. It isn't rate throttling because I only try to retrieve current conditions every 30 minutes.Also, the load of the API might be a lot lower if it were possible to retrieve just the current measurements, but the response you get back for observations is insanely bloated with 12 hours back of each measurement, plus a bunch of station information that is heavily duplicative of information provided about the station.Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. Also, the load of the API might be a lot lower if it were possible to retrieve just the current measurements, but the response you get back for observations is insanely bloated with 12 hours back of each measurement, plus a bunch of station information that is heavily duplicative of information provided about the station.Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. Nothing about the station should be returned when you ask for the station's measurements should be returned except a link to API call for the station's information. 
reply

 Normally those would be posted on https://www.weather.gov/notification/ but that’s having hiccups, but the email list for announcements still works.A few of the recent announcements:
- https://www.weather.gov/media/notification/pdf_2023_24/scn24...
- https://www.weather.gov/media/notification/pdf_2023_24/scn24...
- https://www.weather.gov/media/notification/pdf_2023_24/scn24... A few of the recent announcements:
- https://www.weather.gov/media/notification/pdf_2023_24/scn24...
- https://www.weather.gov/media/notification/pdf_2023_24/scn24...
- https://www.weather.gov/media/notification/pdf_2023_24/scn24... 
reply

 EDIT: sorry, I misread your commend. If it's only once every 30 secs, that may be a bit overkill for your needs. You may be able to get the appropriate text product directly and parse it out. Unfortunately probably the most stable, yet clunkiest, way 
reply

 
reply

 /stations/{stationId}/observations/latest ? 
reply

 Strange that they have outage information via radio. What endpoints were failing? I'll email and see if they'll accept some help. 
reply

 * First, take an excellent Government service and under-fund it by reducing its budget or hobbling it in some capacity* Ensure that the prior does not cut the budget in half, or something so overt.  If you do that, your political adversaries will surely drum up support to stop you.  Instead just never increase the budget.  Let aging infrastructure go unfunded for upgrades and improvements, etc.  Small, non-apparent cuts.* Next, put someone in charge who ensures that the service is eating money, yet its output is useless for most tasks, and unreliable.* Later, complain how the service is clearly not useful, yet ""look at all this money the taxpayer pays!!"", and suggest changing its scope so that it better aligns with ""others providing the same service"".  Key to this is that you didn't cut the budget extensively, so the service is indeed very expensive without value.* Either dismantle the service entirely, or turn it into a shadow of its former selfThis is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. * Ensure that the prior does not cut the budget in half, or something so overt.  If you do that, your political adversaries will surely drum up support to stop you.  Instead just never increase the budget.  Let aging infrastructure go unfunded for upgrades and improvements, etc.  Small, non-apparent cuts.* Next, put someone in charge who ensures that the service is eating money, yet its output is useless for most tasks, and unreliable.* Later, complain how the service is clearly not useful, yet ""look at all this money the taxpayer pays!!"", and suggest changing its scope so that it better aligns with ""others providing the same service"".  Key to this is that you didn't cut the budget extensively, so the service is indeed very expensive without value.* Either dismantle the service entirely, or turn it into a shadow of its former selfThis is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. * Next, put someone in charge who ensures that the service is eating money, yet its output is useless for most tasks, and unreliable.* Later, complain how the service is clearly not useful, yet ""look at all this money the taxpayer pays!!"", and suggest changing its scope so that it better aligns with ""others providing the same service"".  Key to this is that you didn't cut the budget extensively, so the service is indeed very expensive without value.* Either dismantle the service entirely, or turn it into a shadow of its former selfThis is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. * Later, complain how the service is clearly not useful, yet ""look at all this money the taxpayer pays!!"", and suggest changing its scope so that it better aligns with ""others providing the same service"".  Key to this is that you didn't cut the budget extensively, so the service is indeed very expensive without value.* Either dismantle the service entirely, or turn it into a shadow of its former selfThis is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. * Either dismantle the service entirely, or turn it into a shadow of its former selfThis is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. This is an ongoing game.  There are those that literally go bananas, at the idea of anything, anything at all being done by Government.It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. It is ridiculously easy to keep services up, if you're even mildly competent, and just handle things with the correct process.  Process is vital here, key, how you develop services, and how you deploy and monitor and maintain them, is key.The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. The fact that stuff ""just goes down"" repeatedly means that they literally have no idea what they're doing.And I suspect that's on purpose. And I suspect that's on purpose. 
reply

 
reply

 The problem however, is the 500 or target station readings returning null. 
reply

 But like so many they turned commercial and kicked off all the hobbyists that made them big. It was a really nasty move. I have never found a suitable replacement. I don't know what it is about weather that gives people so much greed. 
reply

 The only ""bad"" thing Weather Underground did was they ended their free API for non-contributors. [1]I believe personal weather station contributors still get free access to a different API that wunderground moved to. [2][3][1] https://archive.md/xe9B1[2] https://docs.google.com/document/d/1eKCnKXI9xnoMGRRzOL1xPCBi...[3] https://github.com/cytech/Home-Assistant-wundergroundpws/?ta... I believe personal weather station contributors still get free access to a different API that wunderground moved to. [2][3][1] https://archive.md/xe9B1[2] https://docs.google.com/document/d/1eKCnKXI9xnoMGRRzOL1xPCBi...[3] https://github.com/cytech/Home-Assistant-wundergroundpws/?ta... [1] https://archive.md/xe9B1[2] https://docs.google.com/document/d/1eKCnKXI9xnoMGRRzOL1xPCBi...[3] https://github.com/cytech/Home-Assistant-wundergroundpws/?ta... [2] https://docs.google.com/document/d/1eKCnKXI9xnoMGRRzOL1xPCBi...[3] https://github.com/cytech/Home-Assistant-wundergroundpws/?ta... [3] https://github.com/cytech/Home-Assistant-wundergroundpws/?ta... 
reply

 It was a wonderful community-driven service and they basically canned the whole community, and moved to focus on commercial users. I think that's very bad. Even the site is totally useless now. Only crap news and some basic weather reports but it's very hard to find anything community generated.What's worst though is that no alternative emerged. I had expected that to happen. It's sad that community alternatives always end up selling out. The same with ADS-B Explorer. What's worst though is that no alternative emerged. I had expected that to happen. It's sad that community alternatives always end up selling out. The same with ADS-B Explorer. 
reply

 
reply

 Yes, their acquisition by IBM really messed things up. I went from totally loving the app to uninstalling it and never looking back.Definitely going to feed my local data to weather.gov. Definitely going to feed my local data to weather.gov. 
reply

 
reply

 
reply

 
reply

 * https://ambientweather.com/ws-5000-ultrasonic-smart-weather-...There are much cheaper options than that one if you're interested in hosting a weather station. I decided to install it since I live in a relatively rural area and there is a fairly large gap in coverage where I live. Now I can get more local data and my neighbors can benefit as well.  If you live in an urban area odds are a lot of the stations you see on the coverage map are just like this. When I lived in Austin I had a lot nearby readings and if you dig into the info tab for each one you'll see they're personal stations people are sharing. There are much cheaper options than that one if you're interested in hosting a weather station. I decided to install it since I live in a relatively rural area and there is a fairly large gap in coverage where I live. Now I can get more local data and my neighbors can benefit as well.  If you live in an urban area odds are a lot of the stations you see on the coverage map are just like this. When I lived in Austin I had a lot nearby readings and if you dig into the info tab for each one you'll see they're personal stations people are sharing. 
reply

 With the Ambient Weather WS-5000, the little console panel is also the hub, so you'll have to have it within signal range.  You can put their new ""Weather Window"" elsewhere in the home:https://ambientweather.com/awn-weather-windowIt also supports indoor and outdoor sensors for room, soil, lightning, etc.:https://ambientweather.com/wh31e-wireless-temperature-humidi...As a simpler device but remarkably rich start, I'd recommend people try the Tempest to get started:https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://ambientweather.com/awn-weather-windowIt also supports indoor and outdoor sensors for room, soil, lightning, etc.:https://ambientweather.com/wh31e-wireless-temperature-humidi...As a simpler device but remarkably rich start, I'd recommend people try the Tempest to get started:https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ It also supports indoor and outdoor sensors for room, soil, lightning, etc.:https://ambientweather.com/wh31e-wireless-temperature-humidi...As a simpler device but remarkably rich start, I'd recommend people try the Tempest to get started:https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://ambientweather.com/wh31e-wireless-temperature-humidi...As a simpler device but remarkably rich start, I'd recommend people try the Tempest to get started:https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ As a simpler device but remarkably rich start, I'd recommend people try the Tempest to get started:https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://shop.tempest.earth/products/tempestThe API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ The API is incredibly easy to work with, both as local devices and as a station:https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://weatherflow.github.io/Tempest/api/I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ I'm using both brands in a hostile environment, and find the Tempests last better.I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ I'm also very interested in Weatherflow's network:https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://business.tempest.earth/tempest-networkAnd as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ And as discussed here, Weatherflow Networks collabs with unis and NOAA:http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ http://weatherflownetworks.com/noaa-national-mesonet-programOn Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ On Android and iOS, you can use an app called SmartMixin to commingle and compare readings across multiple brands of weather device.https://smartmixin.io/ https://smartmixin.io/ 
reply

 I've been stuck on what to purchase, especially since there's no dedicated power or network connections (the site does have cellular access).The biggest hurdle I have is ""here's the full kit of shit you need to buy in that case"", any suggestions? The biggest hurdle I have is ""here's the full kit of shit you need to buy in that case"", any suggestions? 
reply

 
reply

 
reply

 
reply

 I picked this platform because it has a lot of out-of-the-box functionality as I'm just getting started. It looked like I can still play around outside their walled garden as I do more home automation stuff. Beyond the outdoor weather data a site like WU wants, it has sensors for indoor temp and air quality so I can set up some HVAC routines or monitor if my chest freezer for getting too warm. It has a soil moisture sensor and one day I'd like to set up an automatic irrigation system for my garden. I can expand the connected sensors as I think of more things I want to try.I think I could have accomplished a lot of the same with bare sensors like you're suggesting but I wasn't ready to take that on. That was too much learning curve for me right now. I think I could have accomplished a lot of the same with bare sensors like you're suggesting but I wasn't ready to take that on. That was too much learning curve for me right now. 
reply

 
reply

 
reply

 
reply

 [1] https://tempest.earth/ 
reply

 https://github.com/willglynn/tempest_exporterTheir central web API is nice too (and the tool above can extract metrics from it) but the local, offline data access is what got me in the door. Tempest could shut down their services tomorrow without breaking my setup. Their central web API is nice too (and the tool above can extract metrics from it) but the local, offline data access is what got me in the door. Tempest could shut down their services tomorrow without breaking my setup. 
reply

 
reply

 
reply

 
reply

 
reply

 Edit: Nevermind. It looks like Tempest themselves sends the data to NOAA, so it's already taken care of. Nice. 
reply

 
reply

 I wish more home technology was so painless. 
reply

 
reply

 
reply

 Cyclonic (Hurricanes), baking heat, extended sub zero cold .. ?I have an interest in stations that can last a long time in bad weather. I have an interest in stations that can last a long time in bad weather. 
reply

 
reply

 It can get a little warmer here: http://www.bom.gov.au/climate/dwo/202402/html/IDCJDW6136.202... and even more so in other parts of the state: http://www.bom.gov.au/climate/dwo/202402/html/IDCJDW6079.202...( 100F == 37.7C , 109F == 42.7C ) ( 100F == 37.7C , 109F == 42.7C ) 
reply

 
reply

 I’m not sure about ran sensors.But moving parts are generally bad for reliability. But moving parts are generally bad for reliability. 
reply

 weewx[1] software supports sending data to CWOP and has drivers for the Davis station among others.Bonus: you can also send data to CWOP over the ham bands via aprs, and all your data shows up on aprs.fi[2][0]: <https://www.wxforum.net/>[1]: <https://weewx.com/>[2]: <https://aprs.fi/> Bonus: you can also send data to CWOP over the ham bands via aprs, and all your data shows up on aprs.fi[2][0]: <https://www.wxforum.net/>[1]: <https://weewx.com/>[2]: <https://aprs.fi/> [0]: <https://www.wxforum.net/>[1]: <https://weewx.com/>[2]: <https://aprs.fi/> [1]: <https://weewx.com/>[2]: <https://aprs.fi/> [2]: <https://aprs.fi/> 
reply

 
reply

 The Vantage Vue hardware is solid; much better than the cheaper kits out there. 
reply

 [0]: <https://www.wxforum.net/index.php?topic=10721.275> 
reply

 Citizen Weather Observer Program (CWOP) Information: http://www.wxqa.com/cwop_info.htmIf you're going digital, there are several suggested backbones, eg:Legacy (oops): https://controlbyweb.com/legacy/x320m/Current model ($450 US): https://controlbyweb.com/accessories/davis-suite-controllerwhich is a hub that uploads data from attached sensors, which in turn has details of compatable sensors:Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. If you're going digital, there are several suggested backbones, eg:Legacy (oops): https://controlbyweb.com/legacy/x320m/Current model ($450 US): https://controlbyweb.com/accessories/davis-suite-controllerwhich is a hub that uploads data from attached sensors, which in turn has details of compatable sensors:Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. Legacy (oops): https://controlbyweb.com/legacy/x320m/Current model ($450 US): https://controlbyweb.com/accessories/davis-suite-controllerwhich is a hub that uploads data from attached sensors, which in turn has details of compatable sensors:Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. Current model ($450 US): https://controlbyweb.com/accessories/davis-suite-controllerwhich is a hub that uploads data from attached sensors, which in turn has details of compatable sensors:Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. which is a hub that uploads data from attached sensors, which in turn has details of compatable sensors:Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. Legacy manual: https://controlbyweb.com/wp-content/uploads/2024/01/X-320_um...Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. Current Integrated bunch of sensors on a stick ( $595 US ): https://controlbyweb.com/accessories/sensor-suiteThe CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. The CWOP community likely has forums and users experienced in matching suggestions to new member questions.Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. Depends a lot on your skill | interest levels - the controlbyweb path is one option, and that's $450 pluse extra for sensors ( tempreture, wind speed | direction ), air pressure, etc.All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. All in ~ $1,100 (US) - controller + base sensors + shipping + some wiring and fitting at your site.There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. There are likely other products and various levels of kit build, solder your own, etc.The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. The Complete Tempest Weather System https://shop.tempest.earth/collections/featured/products/tem...comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. comes in at $339 (US) which is cheaper to get started and promises much - build quality, robustness, etc would have to be compared | asked about. 
reply

 1. https://www.sandiegorowing.org/weather/2. https://www.sandiegorowing.org/weather/tech/ 2. https://www.sandiegorowing.org/weather/tech/ 
reply

 
reply

 https://www.davisinstruments.com/pages/vantage-pro2His has been working for 20 years now with no problems. There are cheaper ones no doubt, but the ability to add senors like a UV and solar wattage are nice. They also have sensors for soil moisture, and leaf transpiration, but it doesn't rain enough in norcal for those.At some point, Davis changed the data logger, so I had to buy some USB adapter from some guy in Australia to unlock it, but it works fine. I don't remember the guy's name, or if it's still needed.I use weewx and a raspberry pi to log everything. Integrated my PurpleAir into weewx and calculate AQIs as well.http://weewx.com/ His has been working for 20 years now with no problems. There are cheaper ones no doubt, but the ability to add senors like a UV and solar wattage are nice. They also have sensors for soil moisture, and leaf transpiration, but it doesn't rain enough in norcal for those.At some point, Davis changed the data logger, so I had to buy some USB adapter from some guy in Australia to unlock it, but it works fine. I don't remember the guy's name, or if it's still needed.I use weewx and a raspberry pi to log everything. Integrated my PurpleAir into weewx and calculate AQIs as well.http://weewx.com/ At some point, Davis changed the data logger, so I had to buy some USB adapter from some guy in Australia to unlock it, but it works fine. I don't remember the guy's name, or if it's still needed.I use weewx and a raspberry pi to log everything. Integrated my PurpleAir into weewx and calculate AQIs as well.http://weewx.com/ I use weewx and a raspberry pi to log everything. Integrated my PurpleAir into weewx and calculate AQIs as well.http://weewx.com/ http://weewx.com/ 
reply

 Inside its esp8266 based. Currently sells for less than $200. 
reply

 
reply

 https://ambientweather.com/support/ws-2902-weather-station-s... 
reply

 
reply

 
reply

 [1] https://ambientweather.com/support/ws-2902-weather-station-s... 
reply

 
reply

 
reply

 
reply

 There are some platforms for air pollution like OpenAQ [1] or sensor.community [2] but as far as I know none really has such an open API like weather.gov and allows individual contributions.[1] https://openaq.org/[2] https://sensor.community/en/ [1] https://openaq.org/[2] https://sensor.community/en/ [2] https://sensor.community/en/ 
reply

 
reply

 
reply

 I built my own using sensors from Sparkfun (also available elsewhere, it’s a pretty standard kit). It uses an ESP32 to read the sensors and submit the data to MQTT, then Node Red on a Pi to push the data to InfluxDB, and finally Grafana for visualization. I love having direct control over everything, and since I built the whole system I can easily expand it with other sensors like the Geiger counter in my garage (luckily that’s a boring sensor to watch) and simple displays:https://imgur.com/a/FiygpoS https://imgur.com/a/FiygpoS 
reply

 
reply

 
reply

 
reply

 
reply

 One thing I didn't see anybody else mention, is your local Air Force unit does an expert job at delivering daily commercial-free weather reports. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Unfortunately it's too remote to have any sort of internet signal beyond cellular at the moment.I'd appreciate any and all ideas folks have, assuming I'm willing to drop a few grand without blinking.Additionally, it's in an area with wildfire smoke part of the year and id love to have AQI monitoring. I'd appreciate any and all ideas folks have, assuming I'm willing to drop a few grand without blinking.Additionally, it's in an area with wildfire smoke part of the year and id love to have AQI monitoring. Additionally, it's in an area with wildfire smoke part of the year and id love to have AQI monitoring. 
reply

 
reply

 I'm sure there are people here working at funds that leverage weather data to do exactly that. It would be a really cool job. 
reply

 
reply

 https://beta.weather.gov/ 
reply

 
reply

 Most participants are located in Arizona (project is run by University of Arizona), and kind of makes sense because rain is important in the desert. 
reply

 One thing I didn't see discussed – your local Air Force unit does a very, very detailed and commercial-free weather reports daily. 
reply

 I’ll often read 41c outside, 35c in shade, but the weather says it’s currently 29c. 
reply

 
reply

 
reply

 
reply

 [1] What You May Not Know About GALAXY S4 Innovative Technology:https://news.samsung.com/global/what-you-may-not-know-about-... https://news.samsung.com/global/what-you-may-not-know-about-... 
reply

 https://www.wunderground.com/pws/installation-guide 
reply

 
reply

 https://www.weatherunion.com/ 
reply

 
reply

 
reply

 [1] https://www.ecmwf.int/en/forecasts/dataset/ecmwf-reanalysis-... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 http://stations.windy.com/ 
reply

 
reply

 
reply

"
25,cothrun,"Flameshot – Powerful, yet simple to use open-source screenshot software | Hacker News",https://news.ycombinator.com/item?id=40650844,,2024-06-14T05:47:02Z,"For example, I have `bash -c 'flameshot gui -s -r | tesseract - - | gxmessage -title ""Decoded Data"" -fn ""Consolas 12"" -wrap -geometry 640x480 -file -'`  mapped to Super+O, so I can just press the key combo, select a region of the screen, and have the OCRed text immediately displayed in a dialog box from gxmessage (which accounts for most of the command line).  Replace 'tesseract' with 'zbarimg' and you have a barcode scanner. 
reply

     #!/bin/bash

    screenshot=$(mktemp)
    decoded_data=$(mktemp)
    processed_data=$(mktemp)

    cleanup() {
        rm ""$screenshot"" ""$decoded_data"" ""$processed_data""
    }

    trap cleanup EXIT

    flameshot gui -s -r > ""$screenshot""

    convert ""$screenshot"" \
        -colorspace Gray \
        -scale 1191x2000 \
        -unsharp 6.8x2.69+0 \
            -resize 500% \
        ""$screenshot""

    tesseract \
        --dpi 300 \
        --oem 1 ""$screenshot"" - > ""$decoded_data""

    grep -v '^\s*$' ""$decoded_data"" > ""$processed_data""

    cat ""$processed_data"" | \
        xclip -selection clipboard

    yad --text-info --title=""Decoded Data"" \
        --width=940 \
        --height=580 \
        --wrap \
        --fontname=""Iosevka 14"" \
        --editable \
        --filename=""$processed_data"" 
reply

     bash -c 'flameshot gui -s -r | convert - -colorspace Gray -scale 1191x2000 -unsharp 6.8x2.69+0 -resize 500% png:- | tesseract - - | gxmessage -title ""Decoded Data"" -fn ""Consolas 12"" -wrap -geometry 640x480 -file -' 
reply

 
reply

 So I spent some time added the OCR function into flameshot. I didn't choose to compile tesseract into flameshot, but using the rest api way to call a server running remotely. The reason for this way is I also added llama.cpp translation feature after OCR.Here're github repositories for my fork of flameshot and the OCR and translation server which is written causually in Rust.https://github.com/jason-ni/flameshot
https://github.com/jason-ni/flameshot-ocr-server Here're github repositories for my fork of flameshot and the OCR and translation server which is written causually in Rust.https://github.com/jason-ni/flameshot
https://github.com/jason-ni/flameshot-ocr-server https://github.com/jason-ni/flameshot
https://github.com/jason-ni/flameshot-ocr-server 
reply

   /opt/homebrew/Caskroom/flameshot/12.1.0/flameshot.app/Contents/MacOS/flameshot gui -s -r | tesseract - - | (text=$(cat) && osascript -e ""display dialog \""$text\"" with title \""OCR Result\"" buttons {\""OK\""} default button \""OK\"""") 
reply

 For Linux users who also use Google Photos already, you may not realize this but the Google Photos web app accepts paste from system clipboard via Ctrl+V in the browser. Thus, my workflow if I want to save a screenshot for later is to call up flameshot in rectangular selection mode (I bind it to the PrtScn key), select my screenshot area, Ctrl+C to copy it to clipboard, navigate to GPhotos web app via address bar / bookmark bar shortcut, and Ctrl+V to upload there.The nice thing about this is that GPhotos recognizes it as a screenshot (so I can find it on my phone later, too, for example). And, GPhotos also automatically indexes any text within the screenshot, so free text search can often find it, too.If I need the screenshot as a file for some other purpose, I'll navigate to it in GPhotos and use Shift+D to download it.I can also use GPhotos to privately share the screenshot with someone via their email address, or get a tokenized link for it.Just sharing this tip because I notice a lot of people hunt around for cloud storage for desktop screenshots. But Google Photos works pretty well for this purpose already, if you use the paste-to-upload trick! The nice thing about this is that GPhotos recognizes it as a screenshot (so I can find it on my phone later, too, for example). And, GPhotos also automatically indexes any text within the screenshot, so free text search can often find it, too.If I need the screenshot as a file for some other purpose, I'll navigate to it in GPhotos and use Shift+D to download it.I can also use GPhotos to privately share the screenshot with someone via their email address, or get a tokenized link for it.Just sharing this tip because I notice a lot of people hunt around for cloud storage for desktop screenshots. But Google Photos works pretty well for this purpose already, if you use the paste-to-upload trick! If I need the screenshot as a file for some other purpose, I'll navigate to it in GPhotos and use Shift+D to download it.I can also use GPhotos to privately share the screenshot with someone via their email address, or get a tokenized link for it.Just sharing this tip because I notice a lot of people hunt around for cloud storage for desktop screenshots. But Google Photos works pretty well for this purpose already, if you use the paste-to-upload trick! I can also use GPhotos to privately share the screenshot with someone via their email address, or get a tokenized link for it.Just sharing this tip because I notice a lot of people hunt around for cloud storage for desktop screenshots. But Google Photos works pretty well for this purpose already, if you use the paste-to-upload trick! Just sharing this tip because I notice a lot of people hunt around for cloud storage for desktop screenshots. But Google Photos works pretty well for this purpose already, if you use the paste-to-upload trick! 
reply

 https://developers.google.com/photos 
reply

 
reply

 
reply

   #!/bin/bash
  set -e
  dbus-update-activation-environment DISPLAY XAUTHORITY
  FNAME=`cat /dev/urandom | tr -cd 'a-f0-9' | head -c 32`.png
  flameshot gui --raw > /tmp/$FNAME
  ~/go/bin/mc -q cp --attr x-amz-acl=public-read /tmp/$FNAME s3/your.s3.bucket/dir/$FNAME
  echo -n https://s3-us-west-2.amazonaws.com/your.s3.bucket/dir/$FNAME | xsel

[0] https://min.io/docs/minio/linux/reference/minio-mc.html 
reply

 
reply

   $ publish example.png
  https://example.com/+umk3cm5cah5akbqeueq8914zimfktoih

And for when it matters, the filename can optionally be attached:  $ publish --named example.png
  https://example.com/+umk3cm5cah5akbqeueq8914zimfktoih
  $ http --headers 'https://example.com/+umk3cm5cah5akbqeueq8914zimfktoih' | grep 'Content-Disposition'
  Content-Disposition: inline; filename=""example.png""   $ publish --named example.png
  https://example.com/+umk3cm5cah5akbqeueq8914zimfktoih
  $ http --headers 'https://example.com/+umk3cm5cah5akbqeueq8914zimfktoih' | grep 'Content-Disposition'
  Content-Disposition: inline; filename=""example.png"" 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Another commenter asks why it's not possible to trigger with the PrtScn key and I would also think that is an essential feature. 
reply

 Flameshot has key bindings just like any other screenshot program. If the shortcut is already bound by another program, then it will not let you bind it to Flameshot, I believe.I have been using Flameshot portable for years and it isn't without missing features but I keep coming back to it. I generally use the copy function, sometimes save to location. It would be good to have a built in editor that can be loaded after the action. I have been using Flameshot portable for years and it isn't without missing features but I keep coming back to it. I generally use the copy function, sometimes save to location. It would be good to have a built in editor that can be loaded after the action. 
reply

 ShareX can pop up an editor after a screenshot which I do use a lot. 
reply

 Thank you for pointing out that ShareX has an editor. I was aware that it has that feature but I do not remember the specifics on why I went back to Flameshot.The lacking features of Flameshot is that once you move away from the editor, you can not go back and make alterations. Not that I am aware of anyway. The lacking features of Flameshot is that once you move away from the editor, you can not go back and make alterations. Not that I am aware of anyway. 
reply

 Also, Greenshot is lighter and snappier than every other Windows screenshot application I've tried. 
reply

 
reply

 And configuring it to a the print screen button just involves assigning it, and in the case of Ubuntu, overriding system defaults. 
reply

 Perhaps it's harder on Windows? 
reply

 I use it nearly everyday for something e.g. posting snap of a code snippet or anything in slack to putting these clips in docs.EDIT: Just tried Flameshot and loved that I can draw while taking a snap, instead of opening a new window and do the drawing in that. Looks like this is going to replace Win+Shift+S for me. EDIT: Just tried Flameshot and loved that I can draw while taking a snap, instead of opening a new window and do the drawing in that. Looks like this is going to replace Win+Shift+S for me. 
reply

 Nowadays (at least for me on Win11) it's also bound to the PRNTSCRN button, which is a nice way to redeem an otherwise anachronistic key. 
reply

 
reply

 Re Flameshot, I've tried it and it generally works well for me. My only beef is that the layout of the icons around the captured area is dynamic, changing based on the shape and size of the area, requiring me to actively search for an icon instead of finding it in a static, predictable location. 
reply

 They never payed a cent to the developer - shame on them. 
reply

 [1] https://getgreenshot.org/ 
reply

 
reply

 BTW I've never heard of Ksnip before. I gotta try it. 
reply

 
reply

 Flameshot v11.0.0 - https://news.ycombinator.com/item?id=30071766 - Jan 2022 (30 comments)Flameshot – Simple, powerful screenshot tool for all major operating systems - https://news.ycombinator.com/item?id=26446070 - March 2021 (125 comments)Flameshot – Superb Screenshot Tool - https://news.ycombinator.com/item?id=26113753 - Feb 2021 (83 comments) Flameshot – Simple, powerful screenshot tool for all major operating systems - https://news.ycombinator.com/item?id=26446070 - March 2021 (125 comments)Flameshot – Superb Screenshot Tool - https://news.ycombinator.com/item?id=26113753 - Feb 2021 (83 comments) Flameshot – Superb Screenshot Tool - https://news.ycombinator.com/item?id=26113753 - Feb 2021 (83 comments) 
reply

 I know I sound like I am just repeating the title, but that's my honest, user opinion too. Does what it says it does, does it well, and stays out of your way until you want to use it. 
reply

 
reply

 You just resize Peek‘s transparent window over the part of the screen that you want and hit recordhttps://github.com/phw/peek https://github.com/phw/peek 
reply

 https://github.com/phw/peek/issues/1191 
reply

 
reply

 
reply

 
reply

 Flameshot (despite being available on Windows) helped make that transition really pleasant! I mentally put it in the LINUX HAS BEEN GOOD column. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Works well in XFCE, KDE Plasma, and Cinnamon - notso in Gnome because, well, Gnome. I wish it did video too. Until it does, I am using SimpleScreenRecorder - which is okay. 
reply

 
reply

 
reply

 
reply

 
reply

 There was a period where any screenshot/recording app didn't work at all, including Flameshot, due to limitations in Wayland implementations. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Seems very simple to me and avoids browsers, cloud storage, and other potential pitfalls.https://github.com/resurrecting-open-source-projects/scrot https://github.com/resurrecting-open-source-projects/scrot 
reply

 But flameshot is extremely fast and does 95% of what I'd do in gimp anyway, without having to open a whole image editor and saving a picture.
I can directly copy it to the clipboard and paste it somewhere. 
reply

 I'm actually about as likely to just pull out my phone and take a picture of the screen as to use software-based screenshots. 
reply

 
reply

 Having said that, I wish we can select the objects (e.g., text box, arrows) we have created and move them around. Right now, we can only undo and if an arrow is drawn a few steps before and now you want to reorient its head, you are out of luck.In the past (4-5 years ago), I used to use Jing (now called TechSmith Capture) and liked it a lot: https://www.techsmith.com/jing-tool.html and liked it. But I think the company decided to remove some features and/or require some sort of account creation; on top of that, it (if I remember correctly) kind of lost its earlier simplicity, so I stopped using it. In the past (4-5 years ago), I used to use Jing (now called TechSmith Capture) and liked it a lot: https://www.techsmith.com/jing-tool.html and liked it. But I think the company decided to remove some features and/or require some sort of account creation; on top of that, it (if I remember correctly) kind of lost its earlier simplicity, so I stopped using it. 
reply

 On Windows I like to use Greenshot because the editor opens up in a dedicated window and gives me full control over the objects I place (move, resize, change colors, duplicate, cut-copy-paste, reorder, save objects to file for reuse...). It's also open source, but seems unmaintained for some time now (but there is a fork implementing zoom in the editor). 
reply

 
reply

 
reply

 
reply

 Every screenshot tool I've ever come across has a blur tool but no cut tool.  So I just use the OS specific screenshoter and then load it up in an image editor and cut to my hearts content. 
reply

 
reply

 
reply

 But the fascination is easily explained - it looks better as it ""fits"" the rest of your image vs having some jarring black rectangle 
reply

 I've never ever seen that in the wild, but that would def. make it sane to use the blur tool. 
reply

 
reply

 [1] https://cleanshot.com/ 
reply

 
reply

 It's by no means as feature-rich as ShareX for Windows, but it works perfectly for what I need.  It covers the essentials like simple annotations, blocking out areas of screenshots, saving local copies, etc.I made some tweaks to support my own custom image uploader API, and similar to the comment by geoka9, I have it set up to take a screenshot, upload to my app, and copy the URL into my clipboard all behind a single shortcut. I made some tweaks to support my own custom image uploader API, and similar to the comment by geoka9, I have it set up to take a screenshot, upload to my app, and copy the URL into my clipboard all behind a single shortcut. 
reply

 Thank you for sharing. 
reply

 I'll have to have a look at this next time I'm on a Linux desktop, as I found the options lacking compared to ShareX last time I looked. 
reply

 
reply

 I quickly started using it for myself, it's very very convenient. 
reply

 
reply

 I use Windows native screenshot tool because it supports OCR. 
reply

 
reply

 https://www.pcworld.com/article/2070861/windows-snipping-too...I press Win+Shift+S then select the region of the text. I press Win+Shift+S then select the region of the text. 
reply

 
reply

 
reply

 
reply

 
reply

 My only wish is for it to be able to open existing files. I wish I could just open an image, make some edits, and save it. Unfortunately, you can only make edits to screenshots. 
reply

 I want a smoothing slider so I can draw a circle and an arrow with the mouse and not have it look like I have sever palsy with a sclerosis topper.Maybe someday. Maybe someday. 
reply

 
reply

 Bonus, this was a piece of ‘bloatware’ an admin rebuilt my computer with, but I came to love. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Not super cool with aesthetics but it's flawless so yeah. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Also on i3 spectacle is sometimes buggy, it misfires or loses the capture. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Click click click, paste in email and reference the numbers… much more clear than arrows and scribbles all over the place. 
reply

 
reply

 
reply

"
26,iandmetoo,Ice - open source bar manager for macOS | Hacker News,https://news.ycombinator.com/item?id=40605532,,2024-06-08T05:47:01Z,"Ice isn’t as good yet. It’s not nearly so configurable. For example, you can either hide all icons or none. You can’t decide to show some of them all the time. That’s a bummer. I’ll still happily accept that trade off to replace Bartender, which I’d previously purchased several versions of. It’s dead to me.Great job so far, Ice. I hope you keep improving! Great job so far, Ice. I hope you keep improving! 
reply

 As of now, I have zero trust in the old author too. The lack of communication is the fault of both parties. Ben Surtees has caused serious damage to their own reputation. Any new software released under that name will have a hard time gaining trust and traction. 
reply

 
reply

 
reply

 
reply

 A paying customer of Bartender.> to slanderIt is not slander to say you distrust someone.> a named personBen’s name was already public. Bartender was published under “Surtees Studios”, after all. Ben has also appeared in at least one podcast. Trusting Bartender meant trusting Ben, the developer, the person.> for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. > to slanderIt is not slander to say you distrust someone.> a named personBen’s name was already public. Bartender was published under “Surtees Studios”, after all. Ben has also appeared in at least one podcast. Trusting Bartender meant trusting Ben, the developer, the person.> for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. It is not slander to say you distrust someone.> a named personBen’s name was already public. Bartender was published under “Surtees Studios”, after all. Ben has also appeared in at least one podcast. Trusting Bartender meant trusting Ben, the developer, the person.> for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. > a named personBen’s name was already public. Bartender was published under “Surtees Studios”, after all. Ben has also appeared in at least one podcast. Trusting Bartender meant trusting Ben, the developer, the person.> for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. Ben’s name was already public. Bartender was published under “Surtees Studios”, after all. Ben has also appeared in at least one podcast. Trusting Bartender meant trusting Ben, the developer, the person.> for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. > for selling his own business that he createdThat’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. That’s not what’s in question. No one is blaming Ben for selling Bartender, the complaint is that it was done in secret. And it would’ve continue to be a secret were it not for a feature in MacUpdater that someone noticed.> It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. > It is an icon utility.No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. No, it is not. It is an app that requests Screen Recording, Accessibility, and Location permissions to do its job. Thus it is an app which requires a high degree of trust. That the new owners added an analytics framework to, and who knows what else. This case is awfully similar to when a developer sells a browser extension to someone shady because the profit is in the user-base. 
reply

 Of course it is slander to say that somebody's reputation is damaged. Especially when it's not a public figure. Just that somebody's name is public, doesn't make them a public figure. And you even continue. Step out of the mob frenzy for a while and try to look at how you are behaving from a higher perspective. Is it right of you to treat a person like that, because he sold his own business? It matters little you once purchased a product from him. Software change owners all the time.Until there is definite proof of malevolence you should calm down, as should the other hackers. This business has the possibility of becoming a great embarrassment for Hacker News in the future. Until there is definite proof of malevolence you should calm down, as should the other hackers. This business has the possibility of becoming a great embarrassment for Hacker News in the future. 
reply

 
reply

 Of course it is not. Reputations are, by definition, opinions. And opinions are subjective.> because he sold his own business?If you’re not going to engage in good faith and will just keep repeating the exact same argument after its inaccuracy has been pointed out to you, I don’t see the point in continuing the conversation.Engage with the words, not the strawman in your head.> you should calm downI am calm. Again, you’re projecting what you want to see, not the reality. > because he sold his own business?If you’re not going to engage in good faith and will just keep repeating the exact same argument after its inaccuracy has been pointed out to you, I don’t see the point in continuing the conversation.Engage with the words, not the strawman in your head.> you should calm downI am calm. Again, you’re projecting what you want to see, not the reality. If you’re not going to engage in good faith and will just keep repeating the exact same argument after its inaccuracy has been pointed out to you, I don’t see the point in continuing the conversation.Engage with the words, not the strawman in your head.> you should calm downI am calm. Again, you’re projecting what you want to see, not the reality. Engage with the words, not the strawman in your head.> you should calm downI am calm. Again, you’re projecting what you want to see, not the reality. > you should calm downI am calm. Again, you’re projecting what you want to see, not the reality. I am calm. Again, you’re projecting what you want to see, not the reality. 
reply

 And you shouldn't give apps permission to record your screen. That's your responsibility. 
reply

 Clearly, they already know this. They're exercising this responsibility by ceasing to use an app that they no longer trust with their privacy. 
reply

 Why can’t people be reasonable
online 
reply

 
reply

 People saying the original software author is untrustworthy live in a fucking whimsical fairyland. And probably have never built anything worthy of a sale 
reply

 
reply

 
reply

 
reply

 
reply

 It's not shady to sell a business. It's not shady to have screen recording privileges because that's legitimately needed to provide the functionality. It is shady to sell that product to some unknown group without notifying your customers.I trust(ed) Ben Surtees to run his software on my machine with enhanced privileges. I'm not thrilled that someone else controls it now, and that I'd probably never have known that if I didn't follow tech news closely. I trust(ed) Ben Surtees to run his software on my machine with enhanced privileges. I'm not thrilled that someone else controls it now, and that I'd probably never have known that if I didn't follow tech news closely. 
reply

 
reply

 
reply

 Slander is in oral or spoken form.Saying harmful things about someone is neither libel nor slander if those statements are factual. It's only libel or slander if the statements that are made are false.IANAL but... It is my understanding that statements can be considered ""per se"" libel or slander even if they are expressed as opinion as long as they are made negligently or with malice and they cause reputational harm. Saying harmful things about someone is neither libel nor slander if those statements are factual. It's only libel or slander if the statements that are made are false.IANAL but... It is my understanding that statements can be considered ""per se"" libel or slander even if they are expressed as opinion as long as they are made negligently or with malice and they cause reputational harm. IANAL but... It is my understanding that statements can be considered ""per se"" libel or slander even if they are expressed as opinion as long as they are made negligently or with malice and they cause reputational harm. 
reply

 
reply

 
reply

 Would any hacker be proud to explain to their grand parents that they got very upset that their icon hiding app was sold? 
reply

 Good on you for having a grounded take, and realising how feeble minded it is of people to denounce the developer and label them as untrustworthy.I can bet on my life that the majority of these loud complainers have probably never built or contributed anything of value to the world, let alone sold something and gone through a software acquisition.I have basically no faith in people on social media, but please don’t feel like your alone in your thoughts I agree with everything you’ve said hereFurthermore most people probably haven’t built macOS apps and are unfamiliar with the permissions model regarding screen recording - it may be that it is actually required for good functioning to have this permission. I haven’t built macOS apps, but I’ve built plenty of browser extensions and know from experience that permissions are much scarier than what the developer is actually using them for in most cases. Like with most things: people are ignorant. People are arrogant. And people don’t think for themselves. This all gets amplified when they group up. I can bet on my life that the majority of these loud complainers have probably never built or contributed anything of value to the world, let alone sold something and gone through a software acquisition.I have basically no faith in people on social media, but please don’t feel like your alone in your thoughts I agree with everything you’ve said hereFurthermore most people probably haven’t built macOS apps and are unfamiliar with the permissions model regarding screen recording - it may be that it is actually required for good functioning to have this permission. I haven’t built macOS apps, but I’ve built plenty of browser extensions and know from experience that permissions are much scarier than what the developer is actually using them for in most cases. Like with most things: people are ignorant. People are arrogant. And people don’t think for themselves. This all gets amplified when they group up. I have basically no faith in people on social media, but please don’t feel like your alone in your thoughts I agree with everything you’ve said hereFurthermore most people probably haven’t built macOS apps and are unfamiliar with the permissions model regarding screen recording - it may be that it is actually required for good functioning to have this permission. I haven’t built macOS apps, but I’ve built plenty of browser extensions and know from experience that permissions are much scarier than what the developer is actually using them for in most cases. Like with most things: people are ignorant. People are arrogant. And people don’t think for themselves. This all gets amplified when they group up. Furthermore most people probably haven’t built macOS apps and are unfamiliar with the permissions model regarding screen recording - it may be that it is actually required for good functioning to have this permission. I haven’t built macOS apps, but I’ve built plenty of browser extensions and know from experience that permissions are much scarier than what the developer is actually using them for in most cases. Like with most things: people are ignorant. People are arrogant. And people don’t think for themselves. This all gets amplified when they group up. 
reply

 
reply

 
reply

 
reply

 
reply

 I understand that the transition hasn’t been entirely smooth. Recently, there was a change in the signing certificate for the app, and unfortunately, this change wasn’t communicated properly to you, our loyal users. https://www.macbartender.com/b5blog/A-New-Chapter-for-Barten...previous discussion on the hidden sales:https://news.ycombinator.com/item?id=40584606 https://www.macbartender.com/b5blog/A-New-Chapter-for-Barten...previous discussion on the hidden sales:https://news.ycombinator.com/item?id=40584606 previous discussion on the hidden sales:https://news.ycombinator.com/item?id=40584606 https://news.ycombinator.com/item?id=40584606 
reply

 I thought so at first too, but it’s just a confusing UI. The documentation says:> Simply Command + drag your menu bar items to rearrange them.What isn’t said is that this dragging also allows you to keep some of the items permanently showing. Anything you drag to the right of that double arrow icon will stay there. > Simply Command + drag your menu bar items to rearrange them.What isn’t said is that this dragging also allows you to keep some of the items permanently showing. Anything you drag to the right of that double arrow icon will stay there. What isn’t said is that this dragging also allows you to keep some of the items permanently showing. Anything you drag to the right of that double arrow icon will stay there. 
reply

 
reply

 
reply

 
reply

 
reply

 Uninstalled.  What a shame. 
reply

 The issue is we trusted the dev because we knew who he was and he'd have an angry mob after him if he was caught doing something sketchy. Now that it's sold to an unknown third party, there's no one to hold accountable for this software we're trusting with screen recording permissions on our machines. 
reply

 
reply

 
reply

 
reply

 I sent an email to the original author with my feedback. I can understand why, but I got an autoreply that the mailbox was no longer monitored (even though it's still his personal domain).  The things that transpired in the transition are all things I would expect an indie dev to not do.  Ultimately my message to Ben was that it was unfortunate how everything was handled and that customers weren't notified. I was a paying customer of Bartender. I'll never use the software again, nor will I buy anything from the original author.[0] https://www.reddit.com/r/macapps/comments/1d7zjv8/bartender_... [0] https://www.reddit.com/r/macapps/comments/1d7zjv8/bartender_... 
reply

 
reply

 -Difficult to configure unless you don’t have a lot of apps in the top bar. 
-No way to scroll through the list. 
-Does not offer a way to show the extra icons in a bar that displays below. 
-No search functionality. This is something I used frequently. 
-Folders which were recently added to Bartender was a nice option.I do hope the developer is planning on adding more features. I do hope the developer is planning on adding more features. 
reply

 
reply

 
reply

 
reply

 
reply

 This is a non-starter. I hope, with a renewed interest fueled by the Bartender sale and HN, the developers implement this as soon as possible. 
reply

 
reply

 
reply

 https://www.macbartender.com/Bartender5/PermissionInfo/ 
reply

 
reply

 [0] https://github.com/aonez/Dozer/releases/tag/v4.2.1-silicon 
reply

 
reply

 The case for ""I need to see what apps are in the menu bar"" is so rare there's no setting for it -> ""screen recording"" is the closest one. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I stopped using Bartender (because of the recent news) and noticed that Hidden Bar was last updated in Jan 2022 and Dozer in 2019. Neither have a way (or plan to have something) to handle the notch.Ice still lacks some features, but the developer is working on it and eventually it will be able to work around the notch (if you have too many icons, they'll be hidden by the notch... not sure what Apple was thinking). That's why I picked Ice. Ice still lacks some features, but the developer is working on it and eventually it will be able to work around the notch (if you have too many icons, they'll be hidden by the notch... not sure what Apple was thinking). That's why I picked Ice. 
reply

 
reply

 You could just use ""Little Snitch"", block internet for Bartender, and keep using the latest safe version for a while: v5.0.49.Restore it from a backup if you can, and disable updates.
Also, here’s the “v5.0.49” file hash:https://www.virustotal.com/gui/file/0ce40bb5d6f0605c91ae2dc6... Restore it from a backup if you can, and disable updates.
Also, here’s the “v5.0.49” file hash:https://www.virustotal.com/gui/file/0ce40bb5d6f0605c91ae2dc6... https://www.virustotal.com/gui/file/0ce40bb5d6f0605c91ae2dc6... 
reply

 
reply

 https://apple.stackexchange.com/a/465674Perhaps the padding and spacing adjustment could also be brought to Ice?I'm happy to see that alternatives to Bartender exist! I guess this is not the most straightforward thing to do, as there seem to be many apps for this, but most are no longer in development.As an aside, there are options in macOS to move some icons like bluetooth and wifi to the control center away from the status bar, but for some reason they always seem to come back. Perhaps the padding and spacing adjustment could also be brought to Ice?I'm happy to see that alternatives to Bartender exist! I guess this is not the most straightforward thing to do, as there seem to be many apps for this, but most are no longer in development.As an aside, there are options in macOS to move some icons like bluetooth and wifi to the control center away from the status bar, but for some reason they always seem to come back. I'm happy to see that alternatives to Bartender exist! I guess this is not the most straightforward thing to do, as there seem to be many apps for this, but most are no longer in development.As an aside, there are options in macOS to move some icons like bluetooth and wifi to the control center away from the status bar, but for some reason they always seem to come back. As an aside, there are options in macOS to move some icons like bluetooth and wifi to the control center away from the status bar, but for some reason they always seem to come back. 
reply

 The dev is also working on a second bar (like Bartender has) that should fix the problem for macs with notches: https://github.com/jordanbaird/Ice/issues/1 
reply

 
reply

 [0] https://github.com/Mortennn/Dozer 
reply

 
reply

 
reply

 
reply

 You can keep bartender on 5.0.49 as well. 
reply

 
reply

 
reply

 For those who don't want to install a custom status bar, this seems like it would solve similar problems of the status bar getting way too big with all these programs running in the background. 
reply

 
reply

 
reply

 iBar (free at the App Store) so far does what I need. 
reply

 
reply

 If you want the same appearance (and resolution) as a non-notch MacBook Pro, open System Settings, go to the Displays section, click Advanced... and toggle on “Show resolutions as list”, save that change, and then enable “Show all resolutions”.Now select the resolution option just below your current selection. (The y-dimension will be slightly less, which equals the space added by the pixels around the notch.) Now select the resolution option just below your current selection. (The y-dimension will be slightly less, which equals the space added by the pixels around the notch.) 
reply

 As a laptop user, I want to use all available space, so what I do is to use https://topnotch.app/ (or a dark wallpaper) which makes the background of the bar black and until now I was using Bartender, which would display the hidden icons on a second bar under the original one when we clicked the icon. I barely noticed the notch. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Nice to see various customization options, BetterDisplay was also pretty useful when dealing with an external monitor (sadly I never figured out why there's no proper anti-aliasing on the external monitor). 
reply

 They wanted to merge their GPU driver stack across iOS and macOS when they moved to Apple Silicon.This has come with some benefits, like the lightning fast speed that Macs can enable external monitors. This has come with some benefits, like the lightning fast speed that Macs can enable external monitors. 
reply

 I bought a crappy used mac, used it to make the money, then thought it was immoral to not get a new laptop (it wasn't a big project but it paid like 3x the laptop, and i was moonlighting it so it was all bonus money).15 years later i have more macs than x86 boxes in my home office... 15 years later i have more macs than x86 boxes in my home office... 
reply

 
reply

 So far I'm just hoping the BetterTouchTool option pans out. 
reply

 
reply

 For now, I'll support Ice because it's open source. I'll donate more than the $10 Vanilla Pro costs just to have an open source alternative. It's nice to have alternatives though.[0] https://github.com/jordanbaird/Ice/issues/1 [0] https://github.com/jordanbaird/Ice/issues/1 
reply

 
reply

 But HN remains simply unparalleled in finding cool software that makes computers more fun day in, day out.My internal jury is out on whether chatbots ranked through an elaborate mechanism (Instruct) via what amounts to what I wish I had never built on P(click) feed ranking.But the Rust Terminal Renaissance? Nix? Flox? TailScale? Linear and Graphite and the golang community with things like fzf?That shit makes my life better and more fun daily. And HN is where to hear about it first short of being really, really good at GitHub. My internal jury is out on whether chatbots ranked through an elaborate mechanism (Instruct) via what amounts to what I wish I had never built on P(click) feed ranking.But the Rust Terminal Renaissance? Nix? Flox? TailScale? Linear and Graphite and the golang community with things like fzf?That shit makes my life better and more fun daily. And HN is where to hear about it first short of being really, really good at GitHub. But the Rust Terminal Renaissance? Nix? Flox? TailScale? Linear and Graphite and the golang community with things like fzf?That shit makes my life better and more fun daily. And HN is where to hear about it first short of being really, really good at GitHub. That shit makes my life better and more fun daily. And HN is where to hear about it first short of being really, really good at GitHub. 
reply

 The argument goes that it's an easy spot to hit: Just move your mouse to the top.But they forget that in order to use the menu bar you have to activate the app!In other OS's, if you want to pick an item from an inactive app, just click - it will activate the app, and pick the item from the menu bar at the same time.Not so with a mac. If you click on an active area of an inactive window on a mac, the click is eaten, and you have to click a second time to actually do what you are trying to do. Same with the menu bar, first you have to activate the app, then you can click a second time on the menu bar.I do not like it. But they forget that in order to use the menu bar you have to activate the app!In other OS's, if you want to pick an item from an inactive app, just click - it will activate the app, and pick the item from the menu bar at the same time.Not so with a mac. If you click on an active area of an inactive window on a mac, the click is eaten, and you have to click a second time to actually do what you are trying to do. Same with the menu bar, first you have to activate the app, then you can click a second time on the menu bar.I do not like it. In other OS's, if you want to pick an item from an inactive app, just click - it will activate the app, and pick the item from the menu bar at the same time.Not so with a mac. If you click on an active area of an inactive window on a mac, the click is eaten, and you have to click a second time to actually do what you are trying to do. Same with the menu bar, first you have to activate the app, then you can click a second time on the menu bar.I do not like it. Not so with a mac. If you click on an active area of an inactive window on a mac, the click is eaten, and you have to click a second time to actually do what you are trying to do. Same with the menu bar, first you have to activate the app, then you can click a second time on the menu bar.I do not like it. I do not like it. 
reply

 MacBooks are absurdly overpowered as a layman’s computer, but the global menu means they only need to learn the OS once. 
reply

 The omnipresence of the menubar also makes it an excellent hook point for UI enhancement utilities (e.g. a keyboard-driven HUD app) and automation, since it provides a universal interface that covers most of an app’s functions, which is truly rare these days. 
reply

 
reply

 
reply

 
reply

 You might be able find an exception -- there is no approval process for HIG in Mac apps. But you will not find an exception (v1.0.1 or later) in an app that has any meaningful user population, or is of any meaningful quality.Ignoring HIG without good justification is a strong garbage signal. It was a surefire indicator of a crap Windows port back in the 1990s, but I don't think that's even a thing any more. Ignoring HIG without good justification is a strong garbage signal. It was a surefire indicator of a crap Windows port back in the 1990s, but I don't think that's even a thing any more. 
reply

 > and all Mac apps adhere to the convention, or are laughed out of existence.so not all Mac apps adhere> there is no approval processindeed> Ignoring HIG without good justificationOh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s so not all Mac apps adhere> there is no approval processindeed> Ignoring HIG without good justificationOh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s > there is no approval processindeed> Ignoring HIG without good justificationOh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s indeed> Ignoring HIG without good justificationOh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s > Ignoring HIG without good justificationOh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s Oh, but there is a very easy justification - most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80s 
reply

 You do not appear to know what you're talking about here, and I don't know why you're bothering to argue. Show me an example of an even semi-popular Mac app which uses a different convention for Print, and we might have a conversation.Your excerpted quotes are misleading, but I'll respond to one point:> most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80sYou just invented that problem. Show me a more ergonomic design for Print. A large part of design/usability success is consistency and predictability. Your excerpted quotes are misleading, but I'll respond to one point:> most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80sYou just invented that problem. Show me a more ergonomic design for Print. A large part of design/usability success is consistency and predictability. > most of these defaults are poorly (unergonomically) engineered based on design ignorance from the 80sYou just invented that problem. Show me a more ergonomic design for Print. A large part of design/usability success is consistency and predictability. You just invented that problem. Show me a more ergonomic design for Print. A large part of design/usability success is consistency and predictability. 
reply

 Besides, it completely misses the point - ergonomics are often about convenience and knowing what to expect. A zoo of frameworks and UI paradigms is a most terrible outcome with any kind of HIG. Microsoft is not able to keep a consistent UI paradigm for their own software -  what a shining beacon of chaos they are. 
reply

 
reply

 Even if not an inherent property of the system it's an emergent one, something causes it if it's not restricted by the system itself but is still a property that apps developed for macOS are much more homogeneous in their menus UI implementation than the others. 
reply

 
reply

 It's hard to analyse and quantify this ergonomics objectively so I'm just spitballing a potential way that the menus in Mac apps follow much more the convention than Windows apps. I think Apple is also much better at keeping their UIs consistent than what the Windows team is, could also be another nudge to developers to follow them. And no, I'm not saying they're perfect, I hate all their UIs like the App Store, new System Settings (it's frankly stupid, also in responsiveness), Apple Music, etc.Design choices are nudges, Apple's ecosystem has nudged developers much better into keeping some consistency across the system, it's much more jarring on macOS when an app doesn't follow conventions than on Windows. Design choices are nudges, Apple's ecosystem has nudged developers much better into keeping some consistency across the system, it's much more jarring on macOS when an app doesn't follow conventions than on Windows. 
reply

 
reply

 And yet on Windows I often have to do a Where’s Waldo for certain options or even submenus. On macOS it has been crystal clear where to find these options for almost 25 years if we count from Mac OS X, and you can trace some the lineage back all the way to Mac OS 1 which was launched 40 years (!) ago.The thing that has finally started to chip away at this steely adherence to UI conventions is nothing other than poorly made Electron applications, which ironically Linux can actually get nice menu options for via Dbus trickery :) The thing that has finally started to chip away at this steely adherence to UI conventions is nothing other than poorly made Electron applications, which ironically Linux can actually get nice menu options for via Dbus trickery :) 
reply

 Linux, I find to be in the middle.. applications meant for a given DE will usually come together relatively well, others less so. 
reply

 
reply

 Ok so you get more screen space I guess, but IMO it's not worth the trade off. 
reply

 apple should have switched to menu bars in each app when they introduced mac os x. we were all forced to make so many changes at the time, one more wouldn’t have been a big deal. 
reply

 
reply

 
reply

 
reply

 
reply

 > Because your menu bar becomes like ice, allowing your menu bar items to slide away 
reply

 
reply

 
reply

 You have to manage it yourself with one of these tools otherwise they are lost to the void in my experience. 
reply

 
reply

 
reply

 If this tool gets the additional bar feature and some more customisations, it might be a good alternative 
reply

 Can it be added or maybe I just couldn't find this? 
reply

 The license says “you figure it out”:> THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.“Without warranty of any kind” also excludes any warranty wrt your privacy. > THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.“Without warranty of any kind” also excludes any warranty wrt your privacy. “Without warranty of any kind” also excludes any warranty wrt your privacy. 
reply

 
reply

 It's been like 18 years since uTorrent... and that was Windows only, unless I'm crazy. 
reply

 
reply

 The tainted packages installed a ransomware application (a variant of Linux.Encoder.1, but recompiled for Mac, known as KeRanger) that encrypts the user's files and attempts to force users to pay.. The developers were not complicit in the hack that affected their software; but I included it because the point I was trying to make was that hackers are aware and targeting apps popular among developers. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 https://www.reddit.com/r/MacOS/comments/16lpfg5/hidden_prefe...> to change the spacing in the menubar and I found out it changes two preferences:```    defaults -currentHost write -globalDomain NSStatusItemSpacing -int X

    defaults -currentHost write -globalDomain NSStatusItemSelectionPadding -int Y
```> which can be reverted with```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. > to change the spacing in the menubar and I found out it changes two preferences:```    defaults -currentHost write -globalDomain NSStatusItemSpacing -int X

    defaults -currentHost write -globalDomain NSStatusItemSelectionPadding -int Y
```> which can be reverted with```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. ```    defaults -currentHost write -globalDomain NSStatusItemSpacing -int X

    defaults -currentHost write -globalDomain NSStatusItemSelectionPadding -int Y
```> which can be reverted with```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools.     defaults -currentHost write -globalDomain NSStatusItemSpacing -int X

    defaults -currentHost write -globalDomain NSStatusItemSelectionPadding -int Y
```> which can be reverted with```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. > which can be reverted with```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. ```    defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools.     defaults -currentHost delete -globalDomain NSStatusItemSpacing

    defaults -currentHost delete -globalDomain NSStatusItemSelectionPadding
```I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. I learnt about these in a similar topic here. I do not need anything more from a bar app really, so I do not need to install an additional app for sth that I can just handle through a couple of preferences changes in the terminal. For people who do need more functionality, they can get one of these tools. 
reply

 
reply

 
reply

 
reply

 'Simply Command + drag your menu bar items to rearrange them.'... err yes, that's how MacOS works without add-ons ... err yes, that's how MacOS works without add-ons 
reply

 Also worth mentioning that this behaviour is completely undiscoverable, just like most power user interactions on macOS. 
reply

 I feel that today, as a power user/professional, MacOS wouldn't be usable without applications like Bartender, external window manager such as Rectangle/Divvy etc. I feel strong attraction coming from yabai, but disabling SIP is too much for me.Personally I'm reaching the point where I'd migrate to Linux ONLY for the user experience (I live in Emacs most of the time anyway, and there I could get some minimal WM on top of it, I guess). Personally I'm reaching the point where I'd migrate to Linux ONLY for the user experience (I live in Emacs most of the time anyway, and there I could get some minimal WM on top of it, I guess). 
reply

 In terms of the desktop environment, I feel Mac is severely lacking behind. I know there are very mixed opinions on Gnome, but to me the Gnome UX feels extremely well thought out in comparison.The apple ecosystem might be very well integrated, but in terms of the macOS UX it feels the exact opposite. Why can’t I close an app from mission control? Why can’t I launch apps from mission control, but need to e.g. open launchpad first?  In Gnome the activities view unities all of those experiences in a way that is seamless and just clicks for me, but in macOS everything seems to be separate apps/features that don’t play together at all (out of the box at least). Add to that all the other small frustrations that you need to address with third party tools, it is - for me at least - a very unproductive out-of-the-box experience.Of course this is subjective, and might be partially an issue of (my lack of) skill/experience. The apple ecosystem might be very well integrated, but in terms of the macOS UX it feels the exact opposite. Why can’t I close an app from mission control? Why can’t I launch apps from mission control, but need to e.g. open launchpad first?  In Gnome the activities view unities all of those experiences in a way that is seamless and just clicks for me, but in macOS everything seems to be separate apps/features that don’t play together at all (out of the box at least). Add to that all the other small frustrations that you need to address with third party tools, it is - for me at least - a very unproductive out-of-the-box experience.Of course this is subjective, and might be partially an issue of (my lack of) skill/experience. Of course this is subjective, and might be partially an issue of (my lack of) skill/experience. 
reply

 You hit ⌘-Tab, this brings up a list of every app you have open. Keep the thumb on the ⌘. More tabs go right, ` goes left. For every app you want to close, hit Q. When done, release ⌘.My preferred way to launch an app is ⌘-Space and the first few letters of its name. This can have some frustrating delays of a second or two, but it will for the most part remember what you've opened. Other users are much more dock-oriented, I keep it hidden on the side and use it seldom. My preferred way to launch an app is ⌘-Space and the first few letters of its name. This can have some frustrating delays of a second or two, but it will for the most part remember what you've opened. Other users are much more dock-oriented, I keep it hidden on the side and use it seldom. 
reply

 I didn't know about either of these, thanks.Also apparently, up or down brings up a view of all the windows for that app.A while ago I put together some hammerspoon lua for making cmd-tab go by window instead of by app because that's how my brain works, but it's slower than the native cmd-tab.  Are there other similar hidden tricks for Dock.app (which, I presume, is the thing that makes the cmd-tab overlay appear)? Also apparently, up or down brings up a view of all the windows for that app.A while ago I put together some hammerspoon lua for making cmd-tab go by window instead of by app because that's how my brain works, but it's slower than the native cmd-tab.  Are there other similar hidden tricks for Dock.app (which, I presume, is the thing that makes the cmd-tab overlay appear)? A while ago I put together some hammerspoon lua for making cmd-tab go by window instead of by app because that's how my brain works, but it's slower than the native cmd-tab.  Are there other similar hidden tricks for Dock.app (which, I presume, is the thing that makes the cmd-tab overlay appear)? 
reply

 You can also three-finger drag down on the selected app to get Mission Control view for that app, to select a window directly. I do that somewhat more often.Those are the other ones I know. Discoverability of the various affordances in the macOS interface is terrible, but it stays pretty consistent over the years.There should be a manual of a couple hundred pages. I miss the days when that was standard. Those are the other ones I know. Discoverability of the various affordances in the macOS interface is terrible, but it stays pretty consistent over the years.There should be a manual of a couple hundred pages. I miss the days when that was standard. There should be a manual of a couple hundred pages. I miss the days when that was standard. 
reply

 Hence launchpad is only here to shortcut finding your apps in the finder or the dock, mission control just an increment over spaces. Those are not replacement for dock. So quitting app, aside the app shortcut and menu, goes through the dock, either by dock app menu or ⌘+Q on the ⌘+tab app switcher. 
reply

 I, for my part, have configured window placement shortcuts in Hammerspoon (also possible with KM, BTT and a what feels like a million of other apps) and am completely happy. I mostly look at the maximized terminal anyway, the splits do happen in neovim and tmux. 
reply

 
reply

 Since Sonoma, windows regularly are stuck on top of other windows. This has been known since the betas in 2023 [1] and persists till this day. It typically happens during restoring after a reboot, but it can happen at basically any time when a window is created a space that isn't the first one.The workaround is to drag the window from the second space into the first, release the mouse button, and then drag the window back into the second space. This appears to reset whatever the internal state keeps track of window order.[1] https://www.reddit.com/r/MacOS/comments/16bb19g/sonoma_finde... The workaround is to drag the window from the second space into the first, release the mouse button, and then drag the window back into the second space. This appears to reset whatever the internal state keeps track of window order.[1] https://www.reddit.com/r/MacOS/comments/16bb19g/sonoma_finde... [1] https://www.reddit.com/r/MacOS/comments/16bb19g/sonoma_finde... 
reply

 
reply

 
reply

 I don't really use spaces but I've got ""Displays have seperate spaces"" turned on and Rectangle Pro has ""Next Display"" and ""Previous Display"" which moves the foreground app to, unsurprisingly, the next and previous display (which seems to be a space).Are you after something like ""move this window to space Y"" rather than just ""next space""? Are you after something like ""move this window to space Y"" rather than just ""next space""? 
reply

 
reply

 
reply

 
reply

 You hit a keyboard shortcut, you get to the new space with 0 animation/transition. It can work with SIP on but only on macOS older than 10.14.They mention here this is due to some changes they make to the Dock https://totalspaces.binaryage.com/sip-details I'm not sure if the only part I care about (instant Spaces switching) would continue to work without that / if you turn SIP back on. I haven't tried. They mention here this is due to some changes they make to the Dock https://totalspaces.binaryage.com/sip-details I'm not sure if the only part I care about (instant Spaces switching) would continue to work without that / if you turn SIP back on. I haven't tried. 
reply

 
reply

 It still feels wrong, but I can’t argue with the results.[edit] though, I mean, at a certain level wanting to customize your UI in X/Wayland means changing out large portions of your UI stack entirely. Layering on top isn’t really crazier than that. [edit] though, I mean, at a certain level wanting to customize your UI in X/Wayland means changing out large portions of your UI stack entirely. Layering on top isn’t really crazier than that. 
reply

 
reply

 
reply

 https://youtu.be/sFJuAjyWOc4?t=500 
reply

 Yesterday my coworker asked me what neat window manager I’m using and it took me a moment because I’d forgotten about it. 
reply

 
reply

 BetterSnapTool is probably what you are looking for - for normal monitors the keyboard shortcuts for window management (modifier + arrows) are great, and for giant monitors the custom snap zones are great. My favourite feature is the ability to move/resize windows by holding down ctrl/shift while hovering over them.These kinds of things are a big reason I stick with Mac, great ergonomics and automation.Seems a better situation than the alternatives? You need a defensive mindset with Windows with their behaviours over the last 5 years These kinds of things are a big reason I stick with Mac, great ergonomics and automation.Seems a better situation than the alternatives? You need a defensive mindset with Windows with their behaviours over the last 5 years Seems a better situation than the alternatives? You need a defensive mindset with Windows with their behaviours over the last 5 years 
reply

 Linux is on the other side of that spectrum, but then you lose the benefit of a tightly integrated and curated ecosystem. If you're willing to give that up, and don't mind tinkering and frequently dealing with jank, then Linux might be for you. 
reply

 
reply

 Yeah, I know some design principles are different. That doesn't always mean they are better or couldn't be better.In general I feel like UI/UX on MacOS for the most part has stagnated in the past decade or so. Where there has been evolution, it mostly has been things (poorly) ported over from iOS (system preferences for example).This in contrast to other desktop platforms that have kept evolving and experimenting with other ways of working. Granted, not always improving things but often making things much better. Window management on windows 11 for example is just plain awesome imho. Certainly on wider screens or screens in portrait it is extremely powerful.Everything I am working on MacOS I feel very limited in that area. Even with tools like Rectangle it still doesn't work as fluid as it does on windows. In general I feel like UI/UX on MacOS for the most part has stagnated in the past decade or so. Where there has been evolution, it mostly has been things (poorly) ported over from iOS (system preferences for example).This in contrast to other desktop platforms that have kept evolving and experimenting with other ways of working. Granted, not always improving things but often making things much better. Window management on windows 11 for example is just plain awesome imho. Certainly on wider screens or screens in portrait it is extremely powerful.Everything I am working on MacOS I feel very limited in that area. Even with tools like Rectangle it still doesn't work as fluid as it does on windows. This in contrast to other desktop platforms that have kept evolving and experimenting with other ways of working. Granted, not always improving things but often making things much better. Window management on windows 11 for example is just plain awesome imho. Certainly on wider screens or screens in portrait it is extremely powerful.Everything I am working on MacOS I feel very limited in that area. Even with tools like Rectangle it still doesn't work as fluid as it does on windows. Everything I am working on MacOS I feel very limited in that area. Even with tools like Rectangle it still doesn't work as fluid as it does on windows. 
reply

 n=1...I'm one who doesn't care. I didn't like to have a lot of system tray icons when I used Windows, and I don't like having a lot of them in macOS. I turn off the ones I rarely use (when I can).However, I also feel Apple have reduced the usability of the menu bar icons in recent iterations. Their clickable area/spacing has enlarged, which is counter to having small icons in a focused space. The Clock and Control Centre can't be moved around. I didn't use Control Centre at all until I discovered some setting that can only be toggled. Since I toggled it, I've forgotten what it was and haven't touched Control Centre since. I'd turn it off if I could. Maybe I need Bartender after all. I'm one who doesn't care. I didn't like to have a lot of system tray icons when I used Windows, and I don't like having a lot of them in macOS. I turn off the ones I rarely use (when I can).However, I also feel Apple have reduced the usability of the menu bar icons in recent iterations. Their clickable area/spacing has enlarged, which is counter to having small icons in a focused space. The Clock and Control Centre can't be moved around. I didn't use Control Centre at all until I discovered some setting that can only be toggled. Since I toggled it, I've forgotten what it was and haven't touched Control Centre since. I'd turn it off if I could. Maybe I need Bartender after all. However, I also feel Apple have reduced the usability of the menu bar icons in recent iterations. Their clickable area/spacing has enlarged, which is counter to having small icons in a focused space. The Clock and Control Centre can't be moved around. I didn't use Control Centre at all until I discovered some setting that can only be toggled. Since I toggled it, I've forgotten what it was and haven't touched Control Centre since. I'd turn it off if I could. Maybe I need Bartender after all. 
reply

 
reply

 It’s true that Mac desktop evolution has somewhat stagnated and could use some movement, but that movement shouldn’t necessarily be toward the Win9X desktop paradigm. 
reply

 But, that was about 3 years after desktop computing became this niche thing that only GenX/Boomers still do... (T_T) 
reply

 The only thing that macOS is still best at is Exposé. The smoothness, animations, superior Apple touchpads to make the gesture and then ths ease of picking the right window are second to none. 
reply

 KDE 6's new Overview effect works really wellhttps://kde.org/announcements/megarelease/6/ https://kde.org/announcements/megarelease/6/ 
reply

 And macOS still renders only a single desktop for some reason. 
reply

 
reply

 Must be frustrating as a Mac user to be locked into paying lots of money to have a desktop OS that works how you want 
reply

 
reply

 
reply

"
27,cwilkes,An Introduction to ARM64 Assembly on Apple Silicon Macs | Hacker News,https://news.ycombinator.com/item?id=40616930,,2024-06-11T05:47:01Z,"https://github.com/jdshaffer/Apple-Silicon-ASM-Examples 
reply

 
reply

 (the original comment does not mention but, to be specific, this is about this document: https://developer.apple.com/download/apple-silicon-cpu-optim...)Should you want to play with SIMD but are a little intimidated - Swift and C# and offer convenient ""platform-agnostic"" SIMD abstractions, and C# also has NEON/AdvSimd intrinsics in the form of ""plain"" API calls e.g. `AdvSimd.AddPairwiseWidening` for more direct control (I'm biased on this subject as, while I like Swift, using Xcode and surrounding tooling is sad and less convenient, and the support for Linux/Windows is not there yet). Should you want to play with SIMD but are a little intimidated - Swift and C# and offer convenient ""platform-agnostic"" SIMD abstractions, and C# also has NEON/AdvSimd intrinsics in the form of ""plain"" API calls e.g. `AdvSimd.AddPairwiseWidening` for more direct control (I'm biased on this subject as, while I like Swift, using Xcode and surrounding tooling is sad and less convenient, and the support for Linux/Windows is not there yet). 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 This is the same mechanism by which Microsoft has eliminated the competition for Microsoft Office, which used undocumented Windows APIs so that the products of any other vendor could not keep up with it, especially after the launch of any new Windows version.Now one can find some more complete documentation for the Apple CPUs as the result of reverse engineering work done by various people, but after each introduction of a new Apple CPU model the reverse engineering work may need to be done again.Examples:https://github.com/name99-org/AArch64-Explorehttps://github.com/corsix/amx Now one can find some more complete documentation for the Apple CPUs as the result of reverse engineering work done by various people, but after each introduction of a new Apple CPU model the reverse engineering work may need to be done again.Examples:https://github.com/name99-org/AArch64-Explorehttps://github.com/corsix/amx Examples:https://github.com/name99-org/AArch64-Explorehttps://github.com/corsix/amx https://github.com/name99-org/AArch64-Explorehttps://github.com/corsix/amx https://github.com/corsix/amx 
reply

 
reply

 
reply

 
reply

 
reply

 I'm not here to defend other anti-competitive practices by Apple but as far as just their CPUs go, there are none in that area. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 AMD: https://gpuopen.com/amd-gpu-architecture-programming-documen...Intel: https://www.intel.com/content/www/us/en/docs/graphics-for-li... Intel: https://www.intel.com/content/www/us/en/docs/graphics-for-li... 
reply

 
reply

 
reply

 
reply

 These peripherals are accessed with memory-mapped IO using the same instructions any other program uses.Documentation about ARM64 assembly shouldn't and doesn't contain specific peripheral access info. ISA docs contain info common to all CPUs implementing the spec. Documentation about ARM64 assembly shouldn't and doesn't contain specific peripheral access info. ISA docs contain info common to all CPUs implementing the spec. 
reply

 They clearly are helping. Perhaps you've not noticed? 
reply

 In contrast, AMD and Intel publish GPU documentation. 
reply

 
reply

 The original post's point was that by being more open they would encourage more software to be built for their platform. That would create more demand for their products from consumers. 
reply

 
reply

 
reply

 
reply

 
reply

   % gcc --version
  Apple clang version 15.0.0 (clang-1500.0.40.1)
  Target: arm64-apple-darwin23.3.0
  Thread model: posix
  InstalledDir:   /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin 
reply

 
reply

 https://learn.microsoft.com/en-us/cpp/build/arm64-windows-ab... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 You learn arm64, then you can worry about if you need to deal with implementation specific ISA quirks. 
reply

 
reply

 
reply

 In fact the only reasons I’m on a Mac rather than Linux are because 1) they make the best consumer laptops by far and 2) I’m stuck in the ecosystem. 
reply

 This makes zero sense, frankly. Do you also feel this way about an x86 laptop, that x86 isn't worth learning anything about? Because it might run macOS? It's pointless. The main thing tied to the OS is the userspace ABI (e.g. callee/caller saved registers, parameter passing), but this is generally only one important-but-small part of actually using the CPU, or doing low-level optimization, and every major operating system (including macOS!) tends to have quite detailed ABI documentation for all the supported architectures. Actual fundamentals of the ISA, the supported instructions, etc all translate between operating systems cleanly, and for a given microarchitecture the performance characteristics will also broadly translate between operating systems. But I sort of doubt you're talking about low-level Apple Silicon-specific uarch optimizations, because that's not what the original guide is talking about.Like, if you don't already know how to write ARMv8 assembly, macOS is not what's stopping you. You can take most of this knowledge, which is fundamentally generic, and just as easily apply it to an RPi for example, or the new Snapdragon X Elite, etc. macOS is mostly a non-issue in this regard, it just happens to be the operating system ""of choice"" for some of the best client-oriented ARM processors you can buy right now. Like, if you don't already know how to write ARMv8 assembly, macOS is not what's stopping you. You can take most of this knowledge, which is fundamentally generic, and just as easily apply it to an RPi for example, or the new Snapdragon X Elite, etc. macOS is mostly a non-issue in this regard, it just happens to be the operating system ""of choice"" for some of the best client-oriented ARM processors you can buy right now. 
reply

 https://github.com/apple-oss-distributions/distribution-macO... 
reply

 
reply

 Very debatable. That's just your opinion. 
reply

 > Very debatable. That's just your opinion.Sorry, no, I'm not handholding PC manufacturers anymore. When Macbooks were Intel based there were trade-offs, you were buying a laptop that would overheat and underpeform for the spec. The keyboards were iffy to the point where they removed essential keys etc;.Now, there isn't a better laptop that's an all-rounder for 95% of people. They are fast, cool, do not compromise on display quality or audio quality, afaik they're the only laptop manufacturer giving you full 40GB/s out of each and every USB4 port and they optically seal them (and always have) making USB-Killers ineffective.They are stupid expensive for upgrades, this is true, however the comparable systems (XPS/Precision, Elitebook, Thinkpad X) are all within spitting distance of the price and still have significant compromises.PC manufacturers need to do better. Sorry, no, I'm not handholding PC manufacturers anymore. When Macbooks were Intel based there were trade-offs, you were buying a laptop that would overheat and underpeform for the spec. The keyboards were iffy to the point where they removed essential keys etc;.Now, there isn't a better laptop that's an all-rounder for 95% of people. They are fast, cool, do not compromise on display quality or audio quality, afaik they're the only laptop manufacturer giving you full 40GB/s out of each and every USB4 port and they optically seal them (and always have) making USB-Killers ineffective.They are stupid expensive for upgrades, this is true, however the comparable systems (XPS/Precision, Elitebook, Thinkpad X) are all within spitting distance of the price and still have significant compromises.PC manufacturers need to do better. Now, there isn't a better laptop that's an all-rounder for 95% of people. They are fast, cool, do not compromise on display quality or audio quality, afaik they're the only laptop manufacturer giving you full 40GB/s out of each and every USB4 port and they optically seal them (and always have) making USB-Killers ineffective.They are stupid expensive for upgrades, this is true, however the comparable systems (XPS/Precision, Elitebook, Thinkpad X) are all within spitting distance of the price and still have significant compromises.PC manufacturers need to do better. They are stupid expensive for upgrades, this is true, however the comparable systems (XPS/Precision, Elitebook, Thinkpad X) are all within spitting distance of the price and still have significant compromises.PC manufacturers need to do better. PC manufacturers need to do better. 
reply

 
reply

 I will concede that some aspects of the laptop are pretty bad. For instance, the keyboard is subpar compared to even the cheapest mechanical keyboards. The trackpad seems overrated. On desktops, I always use an ergonomic trackball mouse, so trackpads and even ""regular"" mice put my hand in relatively awkward position and I can't keep it stationary. Something that isn't mentioned often is that the mini-LED displays have considerable bloom, especially compared to the previous generation of MacBooks that used IPS displays.Personally speaking, the pros of this machine vastly outweight the cons I've just listed. Personally speaking, the pros of this machine vastly outweight the cons I've just listed. 
reply

 
reply

 As good a trackpad,
As good a battery,
As good speakers.Just to mention a few. Lots of other stupidities like their RAM pricing, OS magick etc, but other companies have rarely come close to the hardware. Just to mention a few. Lots of other stupidities like their RAM pricing, OS magick etc, but other companies have rarely come close to the hardware. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 And for some, things that Apple do are a no go. Like glued parts, limited Linux support, no OLED screens, no post buy upgradability, overpriced RAM upgrades, limited and finicky multimonitor support for most models.So clearly it is debatable and depends on who you ask. So clearly it is debatable and depends on who you ask. 
reply

 
reply

 I’ve never had an issue, and I regularly plug in one or two at a time. Even two that lie and say they are the same monitor with same serial and it still just works. Although, only after m1 and beyond. 
reply

 
reply

 
reply

 I threw them all together in my mind and didn't check the display capabilities of the max MB. 
reply

 
reply

 The company was Apple. 
reply

 Because the reason Apple really dislikes nvidia was because nvidia sort of lied about the thermal spec (much like intel does, except intel could downclock); and it caused a lot of GPUs to kill their motherboards: https://blog.greggant.com/posts/2021/10/13/apple-vs-nvidia-w... 
reply

 Their hardware has got a whole lot better in the past 12 years.My guess is that they learned important quality lessons from that class action lawsuit too. My guess is that they learned important quality lessons from that class action lawsuit too. 
reply

 
reply

 
reply

 
reply

 At least with Apple, its going to stick. They have marketing mind control that will keep people around rain or shine. 
reply

 
reply

 
reply

 >several class leading productsSee.I mean, 'class leading', like Nintendo leads, pick something no one cares about and peer pressure people into caring. See.I mean, 'class leading', like Nintendo leads, pick something no one cares about and peer pressure people into caring. I mean, 'class leading', like Nintendo leads, pick something no one cares about and peer pressure people into caring. 
reply

 
reply

"
28,cothrun,My Thoughts on Python in Excel | Hacker News,https://news.ycombinator.com/item?id=40656125,,2024-06-15T05:47:01Z,"> Integrating the Jupyter notebook cells inside the Excel grid was a mistake. 100% agreed. this seems like the typical Microsoft behavior where the team A was pushing their product and won over team B, even though it's not really what users needed> Python in Excel isn’t suitable for Python beginners nor for interactive data analysis. exactly. it is my humble opinion that Microsoft doesn't really understand how Excel is used IRLalso this bit is gold:> What I find interesting though is the multiline editing experience of PY cells. Why not give the native Excel formula language an upgrade, so I don’t have to write LET expressions such as the following one (that I still find very hard to read):    =LET(x, 1, y, 2, x + y)

> Instead, allow me to write it like so?    let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... > Python in Excel isn’t suitable for Python beginners nor for interactive data analysis. exactly. it is my humble opinion that Microsoft doesn't really understand how Excel is used IRLalso this bit is gold:> What I find interesting though is the multiline editing experience of PY cells. Why not give the native Excel formula language an upgrade, so I don’t have to write LET expressions such as the following one (that I still find very hard to read):    =LET(x, 1, y, 2, x + y)

> Instead, allow me to write it like so?    let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... also this bit is gold:> What I find interesting though is the multiline editing experience of PY cells. Why not give the native Excel formula language an upgrade, so I don’t have to write LET expressions such as the following one (that I still find very hard to read):    =LET(x, 1, y, 2, x + y)

> Instead, allow me to write it like so?    let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... > What I find interesting though is the multiline editing experience of PY cells. Why not give the native Excel formula language an upgrade, so I don’t have to write LET expressions such as the following one (that I still find very hard to read):    =LET(x, 1, y, 2, x + y)

> Instead, allow me to write it like so?    let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed.....     =LET(x, 1, y, 2, x + y)

> Instead, allow me to write it like so?    let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed.....     let x = 1
    let y = 2
    x + y

and we haven't even talked about =LAMBDA()!> Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... > Also, why not turn Excel tables into a native Excel DataFrame? Give them attributes instead of sticking to the functional approach and you’d be looking at something like this:> =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... > =MyTable[#All].GROUPBY(...)> Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... > Lot’s of possibilities to integrate the pandas functionality in a way that feels more native to Excel!Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... Jackpot. I'm literally building this formula language in a new spreadsheet app (it's early days but I'm eager to share it on HN when the MVP is ready!) and am writing a paper on dataframes vs. spreadsheets, so reading this has warmed my heart on this rainy afternoonalso as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... also as a former Django lover (I still love it, i just don't use it as much), `=MyTable[#All].GROUPBY(...)` reminds me of its ORM...""hmm emoji"" indeed..... ""hmm emoji"" indeed..... 
reply

 =LET(    x,1, // assign 1 to y

    y,2, // assign 2 to y

    x+y  // add x and y

)Same with LAMBDAs     x,1, // assign 1 to y

    y,2, // assign 2 to y

    x+y  // add x and y

)Same with LAMBDAs Same with LAMBDAs 
reply

 [0] https://www.ablebits.com/office-addins-blog/formula-bar-exce... 
reply

 I'd love to read your paper when it's ready. 
reply

 > We wanted an alternative to VBA, but got an alternative to the Excel formula languageOptimistically, I would guess that the powers that be inside MSFT wanted to show they ""integrated"" Python into Excel but didn't really want to mess too much with a product that has stabilized over the past 30 years. Cynically, I would say that they've messed up the implementation on purpose so they can put a bullet through the ""Python in Excel"" idea without actually doing anything useful.A much better way to add Python (or any modern scripting language really) to Excel is to 
1. Make a special library that can be called from the language and which only works with Excel.
2. Bundle a minimal interpreter so that the scripts can be run locally without pushing everything to some godforsaken Azure datacenter. Make this a downloadable plugin for all currently supported versions to ensure backwards-compatibility.This is a much better way to ensure that Python becomes the glue language for Excel. There are so many applications where reporting, analysis and visualization can be better achieved through automation using scripting languages. VBA is old, limited and is yet another thing for someone to learn if they want to script any Office product. All of these are hurdles that can be easily removed. I guess though that the  part that really sucks is that these are all things that the MSFT of the 80s/early 90s would have done in a heart beat if it meant more people would use Excel (they built in bugs from Lotus 1-2-3 for God's sake) but I guess it's a different story today when everybody does use Excel. Optimistically, I would guess that the powers that be inside MSFT wanted to show they ""integrated"" Python into Excel but didn't really want to mess too much with a product that has stabilized over the past 30 years. Cynically, I would say that they've messed up the implementation on purpose so they can put a bullet through the ""Python in Excel"" idea without actually doing anything useful.A much better way to add Python (or any modern scripting language really) to Excel is to 
1. Make a special library that can be called from the language and which only works with Excel.
2. Bundle a minimal interpreter so that the scripts can be run locally without pushing everything to some godforsaken Azure datacenter. Make this a downloadable plugin for all currently supported versions to ensure backwards-compatibility.This is a much better way to ensure that Python becomes the glue language for Excel. There are so many applications where reporting, analysis and visualization can be better achieved through automation using scripting languages. VBA is old, limited and is yet another thing for someone to learn if they want to script any Office product. All of these are hurdles that can be easily removed. I guess though that the  part that really sucks is that these are all things that the MSFT of the 80s/early 90s would have done in a heart beat if it meant more people would use Excel (they built in bugs from Lotus 1-2-3 for God's sake) but I guess it's a different story today when everybody does use Excel. A much better way to add Python (or any modern scripting language really) to Excel is to 
1. Make a special library that can be called from the language and which only works with Excel.
2. Bundle a minimal interpreter so that the scripts can be run locally without pushing everything to some godforsaken Azure datacenter. Make this a downloadable plugin for all currently supported versions to ensure backwards-compatibility.This is a much better way to ensure that Python becomes the glue language for Excel. There are so many applications where reporting, analysis and visualization can be better achieved through automation using scripting languages. VBA is old, limited and is yet another thing for someone to learn if they want to script any Office product. All of these are hurdles that can be easily removed. I guess though that the  part that really sucks is that these are all things that the MSFT of the 80s/early 90s would have done in a heart beat if it meant more people would use Excel (they built in bugs from Lotus 1-2-3 for God's sake) but I guess it's a different story today when everybody does use Excel. This is a much better way to ensure that Python becomes the glue language for Excel. There are so many applications where reporting, analysis and visualization can be better achieved through automation using scripting languages. VBA is old, limited and is yet another thing for someone to learn if they want to script any Office product. All of these are hurdles that can be easily removed. I guess though that the  part that really sucks is that these are all things that the MSFT of the 80s/early 90s would have done in a heart beat if it meant more people would use Excel (they built in bugs from Lotus 1-2-3 for God's sake) but I guess it's a different story today when everybody does use Excel. 
reply

 This describes the feeling of all major features added to the native app incumbents that built their foundations in the 90s: Office, Creative Cloud, etcYou really get the feeling the core dev teams of these apps have a poor understanding of their own foundations and even adding a button is an ordeal for them. You really get the feeling the core dev teams of these apps have a poor understanding of their own foundations and even adding a button is an ordeal for them. 
reply

 It probably is, though.. 
reply

 There are plenty of those libraries without the ""only works with Excel"" part, if you mean to have Excel running on the machine. As a Python example, a customer of mine is using XlsxWriter and openpyxl for .xlsx files,  xlrd for .xls plus python-docx for dealing with docx files.I don't remember why the two modules for xlsx files and not just one. My customer runs that software on Linux inside a Django app. I expect that Microsoft is interested only in Excel on Windows and in running Python inside Excel. What I expected was a VBA editor for Python and maybe a library for Windows to access Excel objects from a Python script in a cmd or powershell prompt. I don't remember why the two modules for xlsx files and not just one. My customer runs that software on Linux inside a Django app. I expect that Microsoft is interested only in Excel on Windows and in running Python inside Excel. What I expected was a VBA editor for Python and maybe a library for Windows to access Excel objects from a Python script in a cmd or powershell prompt. 
reply

 This is exactly it. The killer feature for including any modern scripting language in Excel. Both XlxsWriter and openpyxl can r/w from Excel files but I have to manipulate the data using another library like `pandas`. Instead if MSFT gave a library which I can import into a Python script and use like  import msft_excel_lib as xl
  data = xl.get('A1:A3')
  sum = xl.sum(data)
  xl.write(""B3"", sum)

would be much better than whatever it is they have shipped today without having to make much changes to anything else. I wouldn't even grudge them if they say that this library can run under some weird virtual environment found only within Excel to maintain product retention.   import msft_excel_lib as xl
  data = xl.get('A1:A3')
  sum = xl.sum(data)
  xl.write(""B3"", sum)

would be much better than whatever it is they have shipped today without having to make much changes to anything else. I wouldn't even grudge them if they say that this library can run under some weird virtual environment found only within Excel to maintain product retention. 
reply

 Data = xl.range('a1:a3')Sum =  xl.worksheetfunction.sum(data)Xl.range('b3').value = sumAny library enabling the COM link will do.(sorry, typing this on my phone so formatting and capitalization are screwy) Sum =  xl.worksheetfunction.sum(data)Xl.range('b3').value = sumAny library enabling the COM link will do.(sorry, typing this on my phone so formatting and capitalization are screwy) Xl.range('b3').value = sumAny library enabling the COM link will do.(sorry, typing this on my phone so formatting and capitalization are screwy) Any library enabling the COM link will do.(sorry, typing this on my phone so formatting and capitalization are screwy) (sorry, typing this on my phone so formatting and capitalization are screwy) 
reply

 Last time I checked OpenPyXl doesn't deal correctly with .xlsm files - there's a parameter for that but I believe it's still experimental. In my case this meant that, on a Mac, Excel would complain that a file generated with OpenPyXl was corrupt and then successfully ""recover"" every generated file.My wild guess is: your customer reads the files with OpenPyXl, processes the data with Pandas, and then uses XlsxWriter as the custom Excel writing engine. My wild guess is: your customer reads the files with OpenPyXl, processes the data with Pandas, and then uses XlsxWriter as the custom Excel writing engine. 
reply

 Sounds exactly right. Embrace/extinguish. It's The Way. 
reply

 [1] https://notes.iunknown.com/python-in-excel/Book+of+Python+in... 
reply

 
reply

 Incidentally I've worked on many products in the past, and I've never seen anything that approaches the level of product-market-fit that this feature has.Also, this is the work of many people at the company. To them go the real credit of shipping and getting it out the door to customers. Also, this is the work of many people at the company. To them go the real credit of shipping and getting it out the door to customers. 
reply

 
reply

 
reply

 
reply

 Thanks for the post. Very insightful!I'm looking forward to trying out your pywasm module, or should it be ESP (Excel Subsystem for Python)? I'm looking forward to trying out your pywasm module, or should it be ESP (Excel Subsystem for Python)? 
reply

 The spreadsheet paradigm is immensely intuitive and arguably the only alternative to the standard procedural programming currently in use in number crumching.But therein lies also a major weakness when used for important tasks: hard to validate.Once you further combine it with API calls and whatnot, the situation gets totally out of hand: how do you reproduce anything?The landscape around user interfaces, computational capability and (most importantly) the ever deeper embedding of such tools in decision making suggests to start taking the humble spreadsheet seriously and maybe that requires going back to the drawing board. But therein lies also a major weakness when used for important tasks: hard to validate.Once you further combine it with API calls and whatnot, the situation gets totally out of hand: how do you reproduce anything?The landscape around user interfaces, computational capability and (most importantly) the ever deeper embedding of such tools in decision making suggests to start taking the humble spreadsheet seriously and maybe that requires going back to the drawing board. Once you further combine it with API calls and whatnot, the situation gets totally out of hand: how do you reproduce anything?The landscape around user interfaces, computational capability and (most importantly) the ever deeper embedding of such tools in decision making suggests to start taking the humble spreadsheet seriously and maybe that requires going back to the drawing board. The landscape around user interfaces, computational capability and (most importantly) the ever deeper embedding of such tools in decision making suggests to start taking the humble spreadsheet seriously and maybe that requires going back to the drawing board. 
reply

 
reply

 
reply

 We’re working on a more approachable implementation of that paradigm at https://causal.app 
reply

 
reply

 Oh, no. This is MS Excel 4.0 Macro sheets (Ctrl+F11) all over again, except somehow with a worse execution order.> It prevents you from referencing a cell with a Python object directly, as you’re always running the risk that someday, someone switches that cell to Values mode, which would break any formula that references this cell in object mode.That's not a major concern. Excel already has a dozen footguns painted exactly this colour.> So which output is my df1, and which one is my df2? I have no idea unless I look up the code that is sitting in cells L2 and K2Excel still lets you name cells, does it not?> In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! > It prevents you from referencing a cell with a Python object directly, as you’re always running the risk that someday, someone switches that cell to Values mode, which would break any formula that references this cell in object mode.That's not a major concern. Excel already has a dozen footguns painted exactly this colour.> So which output is my df1, and which one is my df2? I have no idea unless I look up the code that is sitting in cells L2 and K2Excel still lets you name cells, does it not?> In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! That's not a major concern. Excel already has a dozen footguns painted exactly this colour.> So which output is my df1, and which one is my df2? I have no idea unless I look up the code that is sitting in cells L2 and K2Excel still lets you name cells, does it not?> In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! > So which output is my df1, and which one is my df2? I have no idea unless I look up the code that is sitting in cells L2 and K2Excel still lets you name cells, does it not?> In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! Excel still lets you name cells, does it not?> In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! > In fact, I agree that the cloud is the best way to bring Python to Excel.Heretic! Heretic! 
reply

 It does, but that too is a half assed feature so users struggle with it IRL 
reply

 Half the features of Excel cannot deal with named cells. Try for example to use named cells in Conditional Formatting. Doesn't work at all, ranges cannot be named cells or tables, and condition formulas can only reference named cells with extremely ugly contortions.There are lots and lots of additional examples of similar problems.Excel is a loose agglomeration of unrelated features hidden under a pretty GUI. There are lots and lots of additional examples of similar problems.Excel is a loose agglomeration of unrelated features hidden under a pretty GUI. Excel is a loose agglomeration of unrelated features hidden under a pretty GUI. 
reply

 
reply

 The PMs are right. It would be expensive to do this and it would piss off existing customers. 
reply

 - make a python library/driver for Excel sheets that imitates Pandas Dataframe API but (a) has reactive cells (b) imports equations from Excel- make a notebook IDE that integrates excel spreadsheets. Make everything reactive. Have a split notebook/spreadsheet view.A little off-topic but it would be rad if Excel had more Airtable/Baserow/Grist features. - make a notebook IDE that integrates excel spreadsheets. Make everything reactive. Have a split notebook/spreadsheet view.A little off-topic but it would be rad if Excel had more Airtable/Baserow/Grist features. A little off-topic but it would be rad if Excel had more Airtable/Baserow/Grist features. 
reply

 
reply

 I rarely want to access Python from my Excel.  I quite often want to access Excel from my Python.A spreadsheet is a great GUI for a lot of things.  A lot of people are employed creating ""shitty version of Excel but can be driven from any of <web, desktop, application, websockets, WASM, etc.>""Being able to easily drive Excel from an external Python program would make for a nice cross-platform application substrate. A spreadsheet is a great GUI for a lot of things.  A lot of people are employed creating ""shitty version of Excel but can be driven from any of <web, desktop, application, websockets, WASM, etc.>""Being able to easily drive Excel from an external Python program would make for a nice cross-platform application substrate. Being able to easily drive Excel from an external Python program would make for a nice cross-platform application substrate. 
reply

 I agree that Excel as a GUI can be phenomenal. 
reply

 Being able to steadily enhance a spreadsheet into a real application without rewriting from scratch could be a real game changer. 
reply

 
reply

 
reply

 
reply

 I do remember defining a specific format for a cover page: merging a large block of cells and customizing the font information within. I suspect I had other formatting convenience functions to make the reports more consistent.I created a single data structure to wrap the workbook and worksheet objects and include a ""current"" row/cell tracker, so that I could invoke an ""add row"" function to write the next row in the sheet without indicating where in the worksheet the data should be added.Each write function would then take as arguments the data structure and a string label to indicate which worksheet I wanted (numeric indexing was also an option, but I found strings to be the best way to make the code obvious about what worksheet we were actively modifying).I also did some work with tagged data (via tuples) so my library could choose which write function to invoke in xlsxwriter. I don't remember the motivation for that. I created a single data structure to wrap the workbook and worksheet objects and include a ""current"" row/cell tracker, so that I could invoke an ""add row"" function to write the next row in the sheet without indicating where in the worksheet the data should be added.Each write function would then take as arguments the data structure and a string label to indicate which worksheet I wanted (numeric indexing was also an option, but I found strings to be the best way to make the code obvious about what worksheet we were actively modifying).I also did some work with tagged data (via tuples) so my library could choose which write function to invoke in xlsxwriter. I don't remember the motivation for that. Each write function would then take as arguments the data structure and a string label to indicate which worksheet I wanted (numeric indexing was also an option, but I found strings to be the best way to make the code obvious about what worksheet we were actively modifying).I also did some work with tagged data (via tuples) so my library could choose which write function to invoke in xlsxwriter. I don't remember the motivation for that. I also did some work with tagged data (via tuples) so my library could choose which write function to invoke in xlsxwriter. I don't remember the motivation for that. 
reply

 
reply

 I’ve used it at work some years ago, and it’s a great product. 
reply

 
reply

 :) 
reply

 i am baffled. power query / M is taking over the corporate world and its extremely, extremely useful. its one of the most useful things that nobody in open source world has tried to copy (that im aware of). 
reply

 I attempted it once and stop as I found error checking impossible, source control impossible and ability to see code changes impossible - compared to a simple python script that is just text and can be source controlled.Interested in a different opinion as maybe I missed something. Interested in a different opinion as maybe I missed something. 
reply

 
reply

 
reply

 Or more broadly, the inner-platform effect. I'm left wondering ""why would you use python within the lousy coding interface of excel, when Pandas already exists?"" 
reply

 Students graduating today are comfortable in Jupyter notebooks but not a CLI.Also on HN front-page is a full implementation of llm.c in Python-superset Mojo.Once Python takes off in the browser, either by compiling to WASM (via something like Mojo) or interpreted by PyScript, it's over.Total GvR victory. Also on HN front-page is a full implementation of llm.c in Python-superset Mojo.Once Python takes off in the browser, either by compiling to WASM (via something like Mojo) or interpreted by PyScript, it's over.Total GvR victory. Once Python takes off in the browser, either by compiling to WASM (via something like Mojo) or interpreted by PyScript, it's over.Total GvR victory. Total GvR victory. 
reply

 
reply

 I would not either, given the attitude of Python core towards security and correctness. 
reply

 But every time I start to write a class in python, it feels like bikeshedding to me. 
reply

 F2 should enable the user to trace calculations back to the original data, not only the current calculation step.In basis spreadsheet, this would yield a jumble of steps that are undocumented and hard to parse. But that's where the python, lambdas and custome functions come in: They enable legibility of turboF2. In basis spreadsheet, this would yield a jumble of steps that are undocumented and hard to parse. But that's where the python, lambdas and custome functions come in: They enable legibility of turboF2. 
reply

 I have used excel in the past, and I am a long term python user. But if you asked me today what I really wanted to make my life easier and ultimately a product or business better using only excel?
I would ask for lua or scheme. I don’t need a batteries included environment embedded into a spreadsheet. I just want sane syntax for common functionality which does not require arcane knowledge and long forgotten wisdom. 
reply

 I don't get your ""shouldn't need batteries-included environment"" objection; MSFT is bundling Anaconda distribution libraries with Excel. I'd expect it works seamlessly online and offline, as far as everything supported by Python stdlibs. (Can you actually point to any real problem with the batteries?) Really the only part I see you can quibble is things that are currently only implemented in uncommon third-party libraries, i.e. not stdlibs/numpy/scipy/scikit-learn/pandas/polars and the main plotting, data-science, ML, DB and web libraries.> I just want sane syntax for common functionality which does not require arcane knowledge and long forgotten wisdom.Show us some Python syntax for common functionality in Excel which does require arcane knowledge and long forgotten wisdom. Otherwise, this is purely your conjecture.(If anything, bundling Python with Excel will stimulate healthy discussion towards which Python stdlibs need to be added/enhanced/changed, and which third-party libraries should be upgraded to stdlibs.) > I just want sane syntax for common functionality which does not require arcane knowledge and long forgotten wisdom.Show us some Python syntax for common functionality in Excel which does require arcane knowledge and long forgotten wisdom. Otherwise, this is purely your conjecture.(If anything, bundling Python with Excel will stimulate healthy discussion towards which Python stdlibs need to be added/enhanced/changed, and which third-party libraries should be upgraded to stdlibs.) Show us some Python syntax for common functionality in Excel which does require arcane knowledge and long forgotten wisdom. Otherwise, this is purely your conjecture.(If anything, bundling Python with Excel will stimulate healthy discussion towards which Python stdlibs need to be added/enhanced/changed, and which third-party libraries should be upgraded to stdlibs.) (If anything, bundling Python with Excel will stimulate healthy discussion towards which Python stdlibs need to be added/enhanced/changed, and which third-party libraries should be upgraded to stdlibs.) 
reply

 I personally don’t think python is the problem here, but if their users can learn python they can certainly learn lua. 
reply

 Moreover, having to pay $$ recurring subscriptions for that stack to run open-source software (Python) they could run for free elsewhere mean it'll only be used by commercial/enterprise Windows-stack users who are already locked into some legacy workflow/data built around/glued to Excel. For example, financial users, or users who have some expensive license seat of some enterprise product(s). Means an even smaller subset of users.We're saying the same thing. We're saying the same thing. 
reply

 Any traditional programming language that you put in excel is going to be a feature mostly for power users, and I think they could pick up lua just as easy as python 
reply

 
reply

 ""Python vs Lua"" is not even on their radar. And even if it was, their criteria would be dominated by platform lockin and compatibility with other licenses (e.g. commercial SQL, Tableau, MSFT, etc.). Not by ""which open-source language?"" 
reply

 
reply

 (Why are people here aggressively misreading everything I type, today?)> Python... is the numeric computing language du jour. In any given financial company there are definitely already python users.The original post didn't say ""financial Excel users"". Not all Excel users are financial; most aren't. I've worked with legal informatics users, e-commerce users, bioinformatic users, among others. Those sectors never use Excel for numeric computing, IME (drawing the occasional chart isn't numeric computing). They are more familiar with SQL, SQL macros, SQL query generators, importing/exporting to/from SaaS, etc. Like I said. > Python... is the numeric computing language du jour. In any given financial company there are definitely already python users.The original post didn't say ""financial Excel users"". Not all Excel users are financial; most aren't. I've worked with legal informatics users, e-commerce users, bioinformatic users, among others. Those sectors never use Excel for numeric computing, IME (drawing the occasional chart isn't numeric computing). They are more familiar with SQL, SQL macros, SQL query generators, importing/exporting to/from SaaS, etc. Like I said. The original post didn't say ""financial Excel users"". Not all Excel users are financial; most aren't. I've worked with legal informatics users, e-commerce users, bioinformatic users, among others. Those sectors never use Excel for numeric computing, IME (drawing the occasional chart isn't numeric computing). They are more familiar with SQL, SQL macros, SQL query generators, importing/exporting to/from SaaS, etc. Like I said. 
reply

 We can't all be special snowflakes, python and excel are lingua francas. 
reply

 I get why they chose Python for this and it's not all that hard to embed, well the interpreter anyway, compiled modules are another story. 
reply

 If you are doing grown up stuff, you use a grown up language. 
reply

 
reply

 Scheme? Did somebody say... Scheme?https://apexdatasolutions.com/home2/acce%CE%BBerate/It's a paid addon, but still... https://apexdatasolutions.com/home2/acce%CE%BBerate/It's a paid addon, but still... It's a paid addon, but still... 
reply

 
reply

 
reply

 Excel's changes will end up eating their reason to exist. 
reply

 
reply

 
reply

 
reply

 And anyway, Microsoft did this in reaction to increasing demand. The pie will grow faster than Microsoft's pie slice will take from this guy. 
reply

 
reply

 
reply

 
reply

 
reply

 1. Sandboxing and dependencies. Python is extremely unsafe to share, so you need to sandbox execution. There's also the environment/package management problem (does the user you're sharing your workbook with have the same version of pandas as you?). We run workbooks in the cloud to solve both of these.2. The type system. You need a way to natively interop between Excel's type system and Python's much richer type system. The problem with Excel is there are only two types - numbers and strings. Even dates are just numbers in Excel. Python has rich types like pandas Dataframes, lists, and dictionaries, which Excel can't represent natively. We solved this in a similar way to how Typescript evolved Javascript. We support the Excel formula language and all of its types and also added support for lists, dictionaries, structs, and dataframes.3. Performance. Our goal was to build a spreadsheet 1000x faster than Excel. Early on we used Python as our formula language but were constantly fighting the GIL and slow interpreter performance. Instead we implemented the spreadsheet engine in Rust as a columnar engine and seamlessly marshal Python types to the spreadsheet type system and back.It's the hardest systems problem our team's ever worked on. Previously we wrote the S3 file system, so it's not like this was our first rodeo. There's just a ton of details you need to get right to make it feel seamless.You can try it free here: https://rowzero.io/new?feature=code 2. The type system. You need a way to natively interop between Excel's type system and Python's much richer type system. The problem with Excel is there are only two types - numbers and strings. Even dates are just numbers in Excel. Python has rich types like pandas Dataframes, lists, and dictionaries, which Excel can't represent natively. We solved this in a similar way to how Typescript evolved Javascript. We support the Excel formula language and all of its types and also added support for lists, dictionaries, structs, and dataframes.3. Performance. Our goal was to build a spreadsheet 1000x faster than Excel. Early on we used Python as our formula language but were constantly fighting the GIL and slow interpreter performance. Instead we implemented the spreadsheet engine in Rust as a columnar engine and seamlessly marshal Python types to the spreadsheet type system and back.It's the hardest systems problem our team's ever worked on. Previously we wrote the S3 file system, so it's not like this was our first rodeo. There's just a ton of details you need to get right to make it feel seamless.You can try it free here: https://rowzero.io/new?feature=code 3. Performance. Our goal was to build a spreadsheet 1000x faster than Excel. Early on we used Python as our formula language but were constantly fighting the GIL and slow interpreter performance. Instead we implemented the spreadsheet engine in Rust as a columnar engine and seamlessly marshal Python types to the spreadsheet type system and back.It's the hardest systems problem our team's ever worked on. Previously we wrote the S3 file system, so it's not like this was our first rodeo. There's just a ton of details you need to get right to make it feel seamless.You can try it free here: https://rowzero.io/new?feature=code It's the hardest systems problem our team's ever worked on. Previously we wrote the S3 file system, so it's not like this was our first rodeo. There's just a ton of details you need to get right to make it feel seamless.You can try it free here: https://rowzero.io/new?feature=code You can try it free here: https://rowzero.io/new?feature=code 
reply

 
reply

 I wanted a spreadsheet interface, which my business partners need, but with a way for power users (me) to do more complicated stuff in Python instead of VBA.To borrow your phrasing, our thesis is that it has to be Excel-compatible spreadsheet + something, not necessarily Excel + something. It's early days for us, but we've seen a couple publicly traded companies switch off Excel to Row Zero to eliminate the security risks that come with Excel's desktop model. To borrow your phrasing, our thesis is that it has to be Excel-compatible spreadsheet + something, not necessarily Excel + something. It's early days for us, but we've seen a couple publicly traded companies switch off Excel to Row Zero to eliminate the security risks that come with Excel's desktop model. 
reply

 
reply

 I would say Typescript is a more obvious choice, or potentially Dart. Maybe even something more obscure like Nim (though I have no experience of that).I get that you want compatibility with Pandas, Numpy, etc. but you're going to pay for that with endless pain. I get that you want compatibility with Pandas, Numpy, etc. but you're going to pay for that with endless pain. 
reply

 
reply

 
reply

 do you have a desktop app in the works? 
reply

 
reply

 
reply

 Show HN: I've built a C# IDE, Runtime, and AppStore inside Excelhttps://news.ycombinator.com/item?id=34516366 https://news.ycombinator.com/item?id=34516366 
reply

 
reply

 The pro version has quite a price tag, so I’m assuming they have a big value add. 
reply

 
reply

 They seem to be pouring money into LAMBDA. 
reply

 Yes, we do need some kind of tabular data UIs but SMALL UIs elements, not the base of the UI. Beside that the obscene ""wrapping"" of Python to make it ""user-safe"" makes also it next to useless.A less ugly approach to tabular UIs is the one from R-Studio, while it's limited, another is org-mode tables while again they are limited in UI terms. Both are a bit better than Jupyter REPL model witch is itself far better than a spreadsheet. A less ugly approach to tabular UIs is the one from R-Studio, while it's limited, another is org-mode tables while again they are limited in UI terms. Both are a bit better than Jupyter REPL model witch is itself far better than a spreadsheet. 
reply

 But why? 
reply

 The most basic error is WYSIWYG, it can work to a certain extent, like CAD systems, where you can ""free draw"" something but any line have defined parameters, we have snap concept to state a line is connected to another, defined properties like length and so on so in the end we have ""a model"", a free draw witch is also a set of data constrained/in relation with a set of functions but in general it's a nightmare. The second basic error is try to compensate the lack of integration, a system designed for commercial purpose in witch any software is a standalone closed product, by adding features that in theory can only grow to create ""the complete thing"" witch is an impossible goal and makes in practice just bloatware. The third basic error is consider users a bunch of imbeciles who can only learn a thing ""click around on some pictogram and enter text like a chimp plunging fingers slow and hard"". If you craft something simple and explain the principle behind people will learn and act. Oh, of course you need a bit of INITIAL training but after it they are ready, like teaching how to fish vs giving a fish to a hungry person. Oh, of course commercially hungry people are nice, they are tied to the vendor and they keep spending, being locked where they are, but locked people are not productive, like slaves do not work well compared to free employees.That's the spreadsheet mistakes and modern IT mistake in general: the will to keep users ignorant while trying to made them productive anyway instead of teaching them, giving them powerful tools. It's not transforming anyone in an engineer, it's just the same concept of schooling for all, ensuring anyone have a minimum culture needed to be a Citizen in a society. That's the spreadsheet mistakes and modern IT mistake in general: the will to keep users ignorant while trying to made them productive anyway instead of teaching them, giving them powerful tools. It's not transforming anyone in an engineer, it's just the same concept of schooling for all, ensuring anyone have a minimum culture needed to be a Citizen in a society. 
reply

 
reply

 It's a classic concept: the general and generic culture ANY Citizen should possess, learnt back at school. Without that we are all robots, beasts pastured by the shepherd unable to comprehend why we do something instead of something else and so unable to decide peers between peers in a Democracy. Anyone have his/her own specialization, but we must still know a bit of anything at a high level, but still enough to understand if something could be logic/true or not.A society that work, evolve positively is formed of Citizens not meat-based robot able only to do 1/4 turn of a wrench. People who crack their windshield in the winter, defrosting it with boiling water, others left without fuel at sea in the summer and so on should not be a thing. A child is a child, an adult MUST BE an adult, a Citizen. It's about time to say ""if you have to use a computer, a desktop, to work you MUST know it enough, not being just able to click around not even knowing what is a file"". In the west world due to such evolution we are unable to do almost anything these days, we have lost much of our best scientific and industrial power because of such idea. A society that work, evolve positively is formed of Citizens not meat-based robot able only to do 1/4 turn of a wrench. People who crack their windshield in the winter, defrosting it with boiling water, others left without fuel at sea in the summer and so on should not be a thing. A child is a child, an adult MUST BE an adult, a Citizen. It's about time to say ""if you have to use a computer, a desktop, to work you MUST know it enough, not being just able to click around not even knowing what is a file"". In the west world due to such evolution we are unable to do almost anything these days, we have lost much of our best scientific and industrial power because of such idea. 
reply

 
reply

 
reply

 
reply

 Also, there are a few excel handling packages for Python. I've even made graphs and everything. Because sometimes other people like to use Excel and that's fine. I'll just stick with those instead. 
reply

 
reply

 
reply

 
reply

 See the SFDocuments.Calc service there. ScriptForge makes it more convenient to work with the API.Using it with Python: https://help.libreoffice.org/latest/en-US/text/sbasic/shared... Using it with Python: https://help.libreoffice.org/latest/en-US/text/sbasic/shared... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 While I wish this was not the case, the consumers of my excel spreadsheets barely have enough excel skills as is.The idea there is any value in scrapping all that for LibreOffice is completely and utterly delusional. The idea there is any value in scrapping all that for LibreOffice is completely and utterly delusional. 
reply

 I suggest you do what my brother does and unanswer the question!  He works for quite a large firm and is surrounded by quite a lot of data.  He is a Windows user by routine and asked me for some help.  I got Python + MS Visual Code installed and integrated for him and off he went.He is an expert with the data and its ""knowledge"" and was willing to roll up his sleeves and get to grips with a grubby data processing facility.  He decided on Python and he is my ""customer"" so I did the best I could too hence anaconda and VS code.He grabs data out of SAP (he's senior enough to get IT to do his bidding) and then passes that through Python scripts and then passes that on to Excel for reporting.What many seem to forget is that most apps are chainable.  It's often referred to as the ""unix philosophy"" - each component should do one job and do it well.  That's nice but also bollocks when abused as I have just done.If Python is not integrated properly within Excel then do it yourself via whatever interfaces are available.  Pass in and out with .csv or whatever.  You just need some imagination.For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. He is an expert with the data and its ""knowledge"" and was willing to roll up his sleeves and get to grips with a grubby data processing facility.  He decided on Python and he is my ""customer"" so I did the best I could too hence anaconda and VS code.He grabs data out of SAP (he's senior enough to get IT to do his bidding) and then passes that through Python scripts and then passes that on to Excel for reporting.What many seem to forget is that most apps are chainable.  It's often referred to as the ""unix philosophy"" - each component should do one job and do it well.  That's nice but also bollocks when abused as I have just done.If Python is not integrated properly within Excel then do it yourself via whatever interfaces are available.  Pass in and out with .csv or whatever.  You just need some imagination.For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. He grabs data out of SAP (he's senior enough to get IT to do his bidding) and then passes that through Python scripts and then passes that on to Excel for reporting.What many seem to forget is that most apps are chainable.  It's often referred to as the ""unix philosophy"" - each component should do one job and do it well.  That's nice but also bollocks when abused as I have just done.If Python is not integrated properly within Excel then do it yourself via whatever interfaces are available.  Pass in and out with .csv or whatever.  You just need some imagination.For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. What many seem to forget is that most apps are chainable.  It's often referred to as the ""unix philosophy"" - each component should do one job and do it well.  That's nice but also bollocks when abused as I have just done.If Python is not integrated properly within Excel then do it yourself via whatever interfaces are available.  Pass in and out with .csv or whatever.  You just need some imagination.For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. If Python is not integrated properly within Excel then do it yourself via whatever interfaces are available.  Pass in and out with .csv or whatever.  You just need some imagination.For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. For me: I use Libre Office and despite owning my company, I don't require everyone else to do so.  I believe in freedom and expression of choice. 
reply

 
reply

 If there are some self service BI, most likel self service is only by name.Add some variants related to security, max number of licenses allowed (hilarity ensures if IT bears the cost on behalf of the business without being able to charge back), etc Add some variants related to security, max number of licenses allowed (hilarity ensures if IT bears the cost on behalf of the business without being able to charge back), etc 
reply

 As it stands excel is a better presentation layer than almost all BI tools once you're past the modelling and analysis stages. 
reply

 - Reproducibility (the official, bundled Excel numerical routines have/had errors greater than floating-point precision) which avoids the unprofessional look of, say, least squares numbers that differ from a check by hand.- Version and environment control. This is the fastest way I can answer the question, ""what would these new routines produce if run against last October's pool of databases?""- A presentation format where client customizations for style, dimensional units and currencies, human language, etc. can all be owned outside of your project.I try to sell this approach when I can. Is there a particular BI that strikes a better balance? - Version and environment control. This is the fastest way I can answer the question, ""what would these new routines produce if run against last October's pool of databases?""- A presentation format where client customizations for style, dimensional units and currencies, human language, etc. can all be owned outside of your project.I try to sell this approach when I can. Is there a particular BI that strikes a better balance? - A presentation format where client customizations for style, dimensional units and currencies, human language, etc. can all be owned outside of your project.I try to sell this approach when I can. Is there a particular BI that strikes a better balance? I try to sell this approach when I can. Is there a particular BI that strikes a better balance? 
reply

 I've worked for other firms and then my own for the last 24 years.  My job title is Managing Director but I am under no illusion that my word is final.  It is really final but only when I say so and I never do.Oh a BI thingie.  Yes that will fix everything.  No it wont. Oh a BI thingie.  Yes that will fix everything.  No it wont. 
reply

"
29,sh,Beware anti patterns in event driven architecture | Hacker News,https://news.ycombinator.com/item?id=40619521,"I often hear the argument in favor of event-driven architecture that you can work on one part of a system in isolation without having to consider the other parts, and then I get assigned some task which requires me to consider the entire system operation, now…",2024-06-11T05:47:01Z,"Now when people argue “because decoupling,” I hear, “You don’t get as much notification that you just broke a downstream system.” 
reply

 https://www.datadoghq.com/knowledge-center/distributed-traci...Unless you have a single monolith, you’re going to face issues with versioning whether it’s event based or API based. In each case you can usually add new properties to a message, but you can’t remove properties or change their types. If you need that, create a new version.The author does a lot of videos on the event sourcing topic. Event driven I get. It works well in several applications I’ve helped to build over the last 15 years. But event sourcing? I truly don’t get it. Yeah I get it’s nice in terms of auditing to see every change to an entity and who made it, or replay up to to change x on y date, but that really is a niche requirement. Unless you have a single monolith, you’re going to face issues with versioning whether it’s event based or API based. In each case you can usually add new properties to a message, but you can’t remove properties or change their types. If you need that, create a new version.The author does a lot of videos on the event sourcing topic. Event driven I get. It works well in several applications I’ve helped to build over the last 15 years. But event sourcing? I truly don’t get it. Yeah I get it’s nice in terms of auditing to see every change to an entity and who made it, or replay up to to change x on y date, but that really is a niche requirement. The author does a lot of videos on the event sourcing topic. Event driven I get. It works well in several applications I’ve helped to build over the last 15 years. But event sourcing? I truly don’t get it. Yeah I get it’s nice in terms of auditing to see every change to an entity and who made it, or replay up to to change x on y date, but that really is a niche requirement. 
reply

 I'm not sure what point is being made here. It's good that you can do that - but are you implying that that's not possible in an API-driven system? 
reply

 It's not just about auditing, it's also about transactionality and atomicity.If you want to withdraw $5 from your account, the traditional approach of locking, updating everything, unlocking (or in other words wrapping everything in a transaction) doesn't scale as well as the notion that you just record the transaction (event). Implementation-wise this withdrawal can involve, updating two accounts and updating the audit/account transaction logs. We also want this to scale since our bank has millions of customers all operating more or less concurrently. A distributed log (like Kafka) is easy to scale and easy to reason about. You just insert the transaction record and you have a distributed system that will scale and is easy to reason about.Another driver/flavour for something like event sourcing is what some might call state-based or state-oriented programming. That is instead of modifying state directly you are synchronizing state via events. This lets you e.g. code state machines around those that can lead, again, to easier to reason about (and test) code. If you want to withdraw $5 from your account, the traditional approach of locking, updating everything, unlocking (or in other words wrapping everything in a transaction) doesn't scale as well as the notion that you just record the transaction (event). Implementation-wise this withdrawal can involve, updating two accounts and updating the audit/account transaction logs. We also want this to scale since our bank has millions of customers all operating more or less concurrently. A distributed log (like Kafka) is easy to scale and easy to reason about. You just insert the transaction record and you have a distributed system that will scale and is easy to reason about.Another driver/flavour for something like event sourcing is what some might call state-based or state-oriented programming. That is instead of modifying state directly you are synchronizing state via events. This lets you e.g. code state machines around those that can lead, again, to easier to reason about (and test) code. Another driver/flavour for something like event sourcing is what some might call state-based or state-oriented programming. That is instead of modifying state directly you are synchronizing state via events. This lets you e.g. code state machines around those that can lead, again, to easier to reason about (and test) code. 
reply

 
reply

 
reply

 Can't wait to read the incident report when one of the consumers successfully receives and reads the message but the other doesn't. 
reply

 
reply

 EDIT: Also event sourcing would typically be eventually consistent. I imagine for some banking applications a stronger consistency guarantee might be required, e.g. to prevent you from withdrawing the $100 in your account multiple times. 
reply

 I did work somewhere that used a Kafka stack in production. It wasn’t a compelling use case and they spent almost an entire year on infra and productionizing it. It left me extremely sceptical about anything “big data streams” related :) 
reply

 
reply

 There are of course other ways to do auditability.Event Sourcing + Projections provide a nice way to build multiple models/views from the same dataset. This can provide a lot of simplification for client code. Event Sourcing + Projections provide a nice way to build multiple models/views from the same dataset. This can provide a lot of simplification for client code. 
reply

 There are also other companies, which do the typical snapshot and roll up to the current time, when they start the services, that need the data without having access to the database. 
reply

 
reply

 That's not exactly an obscure feature exclusive to datadog. From the top of my head, both AWS and Azure support distributed tracing with dedicated support for visualization in their x-ray and application insights services. 
reply

 
reply

 When you've never grown out of a single node domain but you do event driven ""because scaling"" or whatever, you've shot yourself in the foot amazingly hard. 
reply

 But people often forget there are trade-offs to everything and if you don't have these hard problems, you're giving yourself only headaches.My pet-peeve is ""decoupling"" - it's treated as holy with only benefits and no downsides. But it's actually again a level of complexity - unless you need it, tightly coupled code will be easier to write, read, debug etc. My pet-peeve is ""decoupling"" - it's treated as holy with only benefits and no downsides. But it's actually again a level of complexity - unless you need it, tightly coupled code will be easier to write, read, debug etc. 
reply

 As an event producer as long as you follow reasonable backwards-compatibility best practices then you should be pretty safe from breaking things downstream. As a consumer, follow defensive programming and allow for idempotency in case you need to reprocess an event. Pretty straightforward once you get the hang of things. 
reply

 That can protect you from ""downstream can't even read the message anymore"" but it doesn't help you with the much more common ""downstream isn't doing the right thing with the message anymore"" problem. Schema evolution is kinda like schema'd RPC calls vs plain JSON: it will protect you from ""oops, we sent eventId instead of event_id"" type of errors, but won't prevent you from making logical errors. In a larger org, this can turn into delayed-discovery nightmares.A synchronous API call could give you back an error response and alert your immediately to something being wrong. The system notifies you directly.A downstream event consumer may fail in ways entirely off of your team's radar. The downstream team starts getting alerts. Whether or not those alerts make it immediately obvious to them that it's your fault... that depends on a bunch of factors. A synchronous API call could give you back an error response and alert your immediately to something being wrong. The system notifies you directly.A downstream event consumer may fail in ways entirely off of your team's radar. The downstream team starts getting alerts. Whether or not those alerts make it immediately obvious to them that it's your fault... that depends on a bunch of factors. A downstream event consumer may fail in ways entirely off of your team's radar. The downstream team starts getting alerts. Whether or not those alerts make it immediately obvious to them that it's your fault... that depends on a bunch of factors. 
reply

 Events sent for readership you can’t control are ideally of the type «x changed», and the consumer must then fetch data on the relevant endpoint.That or the company must have serious versioning policies. That or the company must have serious versioning policies. 
reply

 
reply

 
reply

 
reply

 Only make additive changes, don't change existing fields. For enums it's up to the consumer to ensure they don't fail when a new case is added.Be very careful with including data (especially time/expiry stuff) in the message too. If you need to reprocess the event several hours later then it may no longer work or be stale. Rather than include the data in the message itself, we would include the database ID and then have the consumer query for that entry. Be very careful with including data (especially time/expiry stuff) in the message too. If you need to reprocess the event several hours later then it may no longer work or be stale. Rather than include the data in the message itself, we would include the database ID and then have the consumer query for that entry. 
reply

 Tldr: ok to add things. Not ok to remove things or change things 
reply

 I don't know how this could be true.  Events are things - nouns which can be backed-up, replicated, stored, queried, rendered, indexed and searched over. 
reply

 I generally like event-driven architecture, but I need to admit that debuggability is sacrificed where it matters most. 
reply

 
reply

 Remember ""callback hell""? Assumption that a function call returns after running to completion requires rather specific synchronous cascading architecture, which WILL break in multithreaded code. Most of the multithreaded function calls will set a flag in shared memory and return early, expecting caller to poll.If your API is based on single entry-point `invokeMethod(callee, method)` it is equally untraceable to event entry point `fireEvent(producer, event)`. If your API is based on single entry-point `invokeMethod(callee, method)` it is equally untraceable to event entry point `fireEvent(producer, event)`. 
reply

 Which is exactly switching from function calls to event-driven architecture, and the problems with that are exactly the problems we're talking about. 
reply

 You do not even need return-early (non-blocking) semantics for these problems to manifest. You can implement a giant string-keyed vtable for all methods in your program (or use a language with advanced reflection capabilities) and will have exactly the same problems. Namely there probably won't be tooling to match caller-callee pairs, which is the core issue here. 
reply

   const
    myEvent = 'myEvent', 
    target = new EventTarget()

  target.on( myEvent, () => {
    console.log( ""It's easy to introspect well-organized code."" )
  })

  target.dispatchEvent( new Event( myEvent )) 
reply

 
reply

 That's not something I have to remember or forget, it's a simple habit that is as natural as importing and referencing a function.As a general rule, numbers and string literals should never be hardcoded. Internalizing this should be a base expectation of any high-performing team member. As a general rule, numbers and string literals should never be hardcoded. Internalizing this should be a base expectation of any high-performing team member. 
reply

 And as a consumer, many independent tasks can be triggered by the same event.I'm working on a system right now and because of events, it's very easy for me to write a handler for when a certain type of record is created in the database. My feature depends on knowing that new record was made so we can send some emails and do other things.The people that wrote the code that creates the record, didn't have to do anything to support the feature.But I agree that it's not the right solution for every problem. But there are certain problems it solves really well. I'm working on a system right now and because of events, it's very easy for me to write a handler for when a certain type of record is created in the database. My feature depends on knowing that new record was made so we can send some emails and do other things.The people that wrote the code that creates the record, didn't have to do anything to support the feature.But I agree that it's not the right solution for every problem. But there are certain problems it solves really well. The people that wrote the code that creates the record, didn't have to do anything to support the feature.But I agree that it's not the right solution for every problem. But there are certain problems it solves really well. But I agree that it's not the right solution for every problem. But there are certain problems it solves really well. 
reply

 Right up until you need to change something about the event because the business logic it represents has changed. Then you suddenly need to track down all the systems that have been relying on it, including that one that nobody knows anything about and always forgets exists because some guy decided to implement the service in erlang and nobody who ever touched it even works at the company anymore. 
reply

 
reply

 First, if your event (or whatever) changes enough that there are inter-component breakages it means engineering requirements must have changed and tracing dependencies of requirements is organizational thing.Second, you either do trunk based development and constantly break downstream or do leaf based development and have constantly out of date core dependencies. In any case, that's release version management, which is again organizational thing. Second, you either do trunk based development and constantly break downstream or do leaf based development and have constantly out of date core dependencies. In any case, that's release version management, which is again organizational thing. 
reply

 Don't take it into consideration and you're fucked.Source: previous ""seniors"" didn't take it into consideration, they left Source: previous ""seniors"" didn't take it into consideration, they left 
reply

 Same issue as microservices: there are people who want to use the paradigm but not do the investment in monitoring/tooling. 
reply

 
reply

 
reply

 
reply

 Event driven architecture, to me is itself an antipattern.It seems like a replacement for batch processing.  Replayable messages are AWESOME.  Until you encounter the complexity for a system to actually replay them consistently.As far as the authors video, while there was some truth in there, it was a little thin, compared to the complexity of these architectures.  I believe that even though Kafka acts the part of ""dumb pipe"", it doesnt stay dumb for long, and the n distributions of Kafka logs in your organization could be 1000x more expensive than a monolithic DB and a monolithic API to maintain.Yes it appears auditable but is it?  The big argument for replayability is that unlike an API that falls over theres no data loss.  If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had.  You’ll have to hire people to “look into” data loss problems constantly with Kafka.  Its just too much infrastructure to even care about.Theres also, something ergonomically wrong with event drive architecture.  People dont like it.  And it also turns people into robots who are “not responsible” for their product. Theres so much infrastructure to maintain that people just punt everything back to the “enterprise kafka team”.The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. It seems like a replacement for batch processing.  Replayable messages are AWESOME.  Until you encounter the complexity for a system to actually replay them consistently.As far as the authors video, while there was some truth in there, it was a little thin, compared to the complexity of these architectures.  I believe that even though Kafka acts the part of ""dumb pipe"", it doesnt stay dumb for long, and the n distributions of Kafka logs in your organization could be 1000x more expensive than a monolithic DB and a monolithic API to maintain.Yes it appears auditable but is it?  The big argument for replayability is that unlike an API that falls over theres no data loss.  If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had.  You’ll have to hire people to “look into” data loss problems constantly with Kafka.  Its just too much infrastructure to even care about.Theres also, something ergonomically wrong with event drive architecture.  People dont like it.  And it also turns people into robots who are “not responsible” for their product. Theres so much infrastructure to maintain that people just punt everything back to the “enterprise kafka team”.The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. As far as the authors video, while there was some truth in there, it was a little thin, compared to the complexity of these architectures.  I believe that even though Kafka acts the part of ""dumb pipe"", it doesnt stay dumb for long, and the n distributions of Kafka logs in your organization could be 1000x more expensive than a monolithic DB and a monolithic API to maintain.Yes it appears auditable but is it?  The big argument for replayability is that unlike an API that falls over theres no data loss.  If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had.  You’ll have to hire people to “look into” data loss problems constantly with Kafka.  Its just too much infrastructure to even care about.Theres also, something ergonomically wrong with event drive architecture.  People dont like it.  And it also turns people into robots who are “not responsible” for their product. Theres so much infrastructure to maintain that people just punt everything back to the “enterprise kafka team”.The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. Yes it appears auditable but is it?  The big argument for replayability is that unlike an API that falls over theres no data loss.  If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had.  You’ll have to hire people to “look into” data loss problems constantly with Kafka.  Its just too much infrastructure to even care about.Theres also, something ergonomically wrong with event drive architecture.  People dont like it.  And it also turns people into robots who are “not responsible” for their product. Theres so much infrastructure to maintain that people just punt everything back to the “enterprise kafka team”.The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. Theres also, something ergonomically wrong with event drive architecture.  People dont like it.  And it also turns people into robots who are “not responsible” for their product. Theres so much infrastructure to maintain that people just punt everything back to the “enterprise kafka team”.The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. The whole point of microservices was to enable flexibility, smart services and dumb pipes, and effective CI/CD and devops.We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. We are nearing the end of microservices adoption whether it be event or request driven.  In mature organizations it seems to me that request driven is winning by a large margin over event driven.It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. It may be counterintuitive, but the time to market of request driven architecture and cost to maintain is way way lower. 
reply

 In my experience programmers are very happy to do everything in the application (something database people often complain about). What kind of problems do you see?> If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had. You’ll have to hire people to “look into” data loss problems constantly with Kafka.Not my experience at all, and I've used Kafka at a wide range of companies, from household-name scale to startups. Kafka is the boring just-works technology that everyone claims they're looking for.I'm no fan of microservices, but Kafka is absolutely the right datastore most of the time. > If you work with Kafka long enough you’ll realize that data loss will become a problem you didnt think you had. You’ll have to hire people to “look into” data loss problems constantly with Kafka.Not my experience at all, and I've used Kafka at a wide range of companies, from household-name scale to startups. Kafka is the boring just-works technology that everyone claims they're looking for.I'm no fan of microservices, but Kafka is absolutely the right datastore most of the time. Not my experience at all, and I've used Kafka at a wide range of companies, from household-name scale to startups. Kafka is the boring just-works technology that everyone claims they're looking for.I'm no fan of microservices, but Kafka is absolutely the right datastore most of the time. I'm no fan of microservices, but Kafka is absolutely the right datastore most of the time. 
reply

 Not to mention certain observability vendors bleeding you for all those logs you now need to keep an eye on it.Absolutely agreed on every point Absolutely agreed on every point 
reply

 
reply

 Also, people need to understand that ""event driven"" has nothing to do with ""event sourcing"". Just don't keep all the events until eternity, because you can (and because some people think you should because ""kafka""). 
reply

 But when I've done that testing, Kafka hasn't been the problem.The problem I've run into most is that ordering is a giant fucking pain in the ass if you actually want consistent replayability and don't have trivial partitioning needs. Some consumers want things in order by customer ID, other consumers want things in order by sold product ID, others by invoice ID? Uh oh. If you're thinking you could easily replay to debug, the size and scope of the data you have to process for some of those cases just exploded. Or you wrote N times, once for each of those, and then hopefully your multi-write transaction implementation was perfect![0] in fairness, a lot of applications also don't guarantee that they never drop requests at all, obviously. 500 and retry and hope that you don't run out of retries very often; if you do, it's just dropped on the ground and it's considered acceptable loss to have some of that for most companies/applications. The problem I've run into most is that ordering is a giant fucking pain in the ass if you actually want consistent replayability and don't have trivial partitioning needs. Some consumers want things in order by customer ID, other consumers want things in order by sold product ID, others by invoice ID? Uh oh. If you're thinking you could easily replay to debug, the size and scope of the data you have to process for some of those cases just exploded. Or you wrote N times, once for each of those, and then hopefully your multi-write transaction implementation was perfect![0] in fairness, a lot of applications also don't guarantee that they never drop requests at all, obviously. 500 and retry and hope that you don't run out of retries very often; if you do, it's just dropped on the ground and it's considered acceptable loss to have some of that for most companies/applications. [0] in fairness, a lot of applications also don't guarantee that they never drop requests at all, obviously. 500 and retry and hope that you don't run out of retries very often; if you do, it's just dropped on the ground and it's considered acceptable loss to have some of that for most companies/applications. 
reply

 
reply

 
reply

 
reply

 In pretty much all projects I worked with in recent years, people chop up the functionality into small separate services and have the events be serialised, sent over the network and deserialised on the other side.This typically causes enormous waste of efficiency and consequently causes applications to be much more complex than they need to be.I have many times worked with apps which occupied huge server farms when in reality the business logic would be fine to run on a single node if just structured correctly.Add to that the amount of technology developers need to learn when they join the project or the amount of complexity they have to grasp to be able to be productive. Or the overhead of introducing a change to a complex project.And the funniest of all, people spending significant portion of the project resources trying to improve the performance of a collection of slow nanoservices without ever realising that the main culprit is that the event processing spends 99.9% of the time being serialised, deserialised, in various buffers or somewhere in transit which could be easily avoided if the communication was a simple function call.Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. This typically causes enormous waste of efficiency and consequently causes applications to be much more complex than they need to be.I have many times worked with apps which occupied huge server farms when in reality the business logic would be fine to run on a single node if just structured correctly.Add to that the amount of technology developers need to learn when they join the project or the amount of complexity they have to grasp to be able to be productive. Or the overhead of introducing a change to a complex project.And the funniest of all, people spending significant portion of the project resources trying to improve the performance of a collection of slow nanoservices without ever realising that the main culprit is that the event processing spends 99.9% of the time being serialised, deserialised, in various buffers or somewhere in transit which could be easily avoided if the communication was a simple function call.Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. I have many times worked with apps which occupied huge server farms when in reality the business logic would be fine to run on a single node if just structured correctly.Add to that the amount of technology developers need to learn when they join the project or the amount of complexity they have to grasp to be able to be productive. Or the overhead of introducing a change to a complex project.And the funniest of all, people spending significant portion of the project resources trying to improve the performance of a collection of slow nanoservices without ever realising that the main culprit is that the event processing spends 99.9% of the time being serialised, deserialised, in various buffers or somewhere in transit which could be easily avoided if the communication was a simple function call.Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. Add to that the amount of technology developers need to learn when they join the project or the amount of complexity they have to grasp to be able to be productive. Or the overhead of introducing a change to a complex project.And the funniest of all, people spending significant portion of the project resources trying to improve the performance of a collection of slow nanoservices without ever realising that the main culprit is that the event processing spends 99.9% of the time being serialised, deserialised, in various buffers or somewhere in transit which could be easily avoided if the communication was a simple function call.Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. And the funniest of all, people spending significant portion of the project resources trying to improve the performance of a collection of slow nanoservices without ever realising that the main culprit is that the event processing spends 99.9% of the time being serialised, deserialised, in various buffers or somewhere in transit which could be easily avoided if the communication was a simple function call.Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. Now, I am not saying microservices is a useless pattern. But it is so abused that it might just as well be. I think most projects would be happier if the people simply never heard about the concept of microservices and instead spent some time trying to figure how to build a correctly modularised monolithic application first, before they needed to find something more complex. 
reply

 Microservices make sense when there are very strong organizational boundaries between the parts (you'd have to reinterview to move from one team to the other), or if there are technical reasons why two parts of the code cannot share the same runtime environment (such as being written in different languages), and a few other less common reasons. 
reply

 The MAIN reason for microservices was that you could have multiple teams work on their services independently from each other. Because coordinating work of multiple teams on a single huge monolithic application is a very complex problem and has a lot of overhead.But, in many companies the development of microservices/agile teams is actually synchronised between multiple teams. They would typically have common release schedule, want to deliver larger features across multitude of services all at the same time, etc.Effectively making the task way more complex than it would be with a monolithic application But, in many companies the development of microservices/agile teams is actually synchronised between multiple teams. They would typically have common release schedule, want to deliver larger features across multitude of services all at the same time, etc.Effectively making the task way more complex than it would be with a monolithic application Effectively making the task way more complex than it would be with a monolithic application 
reply

 The process went something like this:1. write code2. get code review from my team (and/or the team whose code I was touching)3. address feedback4. on sign-off, merge and release code to production5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 1. write code2. get code review from my team (and/or the team whose code I was touching)3. address feedback4. on sign-off, merge and release code to production5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 2. get code review from my team (and/or the team whose code I was touching)3. address feedback4. on sign-off, merge and release code to production5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 3. address feedback4. on sign-off, merge and release code to production5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 4. on sign-off, merge and release code to production5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 5. monitor logs/alerts for increase in errorsIn reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. In reality, even with thousands of developers, you don't have thousands of merges per day, it was more like 30-50 PRs being merged per day and on a multi-million line codebase, most PR's were never anywhere near each other. 
reply

 
reply

 We didn't play a blame game though... your team was responsible for your slice of the world and that was it. Anyone could open a PR to your code and you could open a PR to anyone else's code. It was a pretty rare event unless you were working pretty deep in the stack (aka, merging framework upgrades from open source) or needing new API's in someone else's stuff. 
reply

 Microservices get around potential dependency bugs, because of the isolation. Now there's an API orchestration between the services. That can be a point of failure. This is why you want BDD testing for APIs, to provide a higher confidence.The tradeoff isn't complicated. Slightly more work up front for less maintenance long term; granted this approach doesn't scale forever. There's not any science behind finding the tipping point. The tradeoff isn't complicated. Slightly more work up front for less maintenance long term; granted this approach doesn't scale forever. There's not any science behind finding the tipping point. 
reply

 How so? I'd buy that bridge if you could deliver, but you can't. Isolation doesn't protect you from dependency bugs and doesn't protect your dependents from  your own bugs. If you start returning ""payment successful"" when it isn't; lots of people are going to get mad -- whether there is isolation or not.> Now there's an API orchestration between the servicesAn API is simply an interface -- whether that is over a socket or in-memory, you don't need a microservice to provide an API.> This is why you want BDD testing for APIs, to provide a higher confidence.Testing is possible in all kinds of software architectures, but we didn't need testing just to make sure an API was followed. If you broke the API contract in the monolith, it simply didn't compile. No testing required.> Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. > Now there's an API orchestration between the servicesAn API is simply an interface -- whether that is over a socket or in-memory, you don't need a microservice to provide an API.> This is why you want BDD testing for APIs, to provide a higher confidence.Testing is possible in all kinds of software architectures, but we didn't need testing just to make sure an API was followed. If you broke the API contract in the monolith, it simply didn't compile. No testing required.> Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. An API is simply an interface -- whether that is over a socket or in-memory, you don't need a microservice to provide an API.> This is why you want BDD testing for APIs, to provide a higher confidence.Testing is possible in all kinds of software architectures, but we didn't need testing just to make sure an API was followed. If you broke the API contract in the monolith, it simply didn't compile. No testing required.> Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. > This is why you want BDD testing for APIs, to provide a higher confidence.Testing is possible in all kinds of software architectures, but we didn't need testing just to make sure an API was followed. If you broke the API contract in the monolith, it simply didn't compile. No testing required.> Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. Testing is possible in all kinds of software architectures, but we didn't need testing just to make sure an API was followed. If you broke the API contract in the monolith, it simply didn't compile. No testing required.> Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. > Slightly more work up front for less maintenance long termI'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. I'm actually not sure which one you are pointing at here... I've worked with both pretty extensively in large projects and I would say the monolith was significantly LESS maintenance for a 20 year old project. The microservice architectures I've worked on have been a bit younger (5-10 years old) but require significantly more work just to keep the lights on, so maybe they hadn't hit that tipping point you refer to, yet. 
reply

 It means any developer merges their work very, very rarely (20 days = 4 weeks on average...) and that in my experience means either low productivity (they just produce little) or huge PRs that have lots of conflicts and are PITA to review. 
reply

 And yes, spending two-to-three weeks on getting 200 lines of code absolutely soul-crushingly perfect, sounds about right for that place but that has nothing to do with it being a monolith. 
reply

 I think it really matters what sort of application you are building.  I do exactly this with my search engine.If it was a monolith it would take about 10 minutes to cold-start, and it would consume far too much RAM to run a hot stand-by.  This makes deploying changes pretty rough.So the index is partitioned into partitions, each with about a minute start time.  Thus, to be able to upgrade the application without long outages, I upgrade one index partition at a time.  With 9 partitions, that's a rolling 10%-ish service outage.The rest of the system is another couple of services that can also restart independently, these have a memory footprint less than 100MB, and have hot standbys.This wouldn't make much sense for a CRUD app, but in my case I'm loading a ~100GB state into RAM. If it was a monolith it would take about 10 minutes to cold-start, and it would consume far too much RAM to run a hot stand-by.  This makes deploying changes pretty rough.So the index is partitioned into partitions, each with about a minute start time.  Thus, to be able to upgrade the application without long outages, I upgrade one index partition at a time.  With 9 partitions, that's a rolling 10%-ish service outage.The rest of the system is another couple of services that can also restart independently, these have a memory footprint less than 100MB, and have hot standbys.This wouldn't make much sense for a CRUD app, but in my case I'm loading a ~100GB state into RAM. So the index is partitioned into partitions, each with about a minute start time.  Thus, to be able to upgrade the application without long outages, I upgrade one index partition at a time.  With 9 partitions, that's a rolling 10%-ish service outage.The rest of the system is another couple of services that can also restart independently, these have a memory footprint less than 100MB, and have hot standbys.This wouldn't make much sense for a CRUD app, but in my case I'm loading a ~100GB state into RAM. The rest of the system is another couple of services that can also restart independently, these have a memory footprint less than 100MB, and have hot standbys.This wouldn't make much sense for a CRUD app, but in my case I'm loading a ~100GB state into RAM. This wouldn't make much sense for a CRUD app, but in my case I'm loading a ~100GB state into RAM. 
reply

 Because deploying the whole monolith takes a long time.  There are ways to mitigate this, but in $currentjob we have a LARGE part of the monolith that is implemented as a library; so whenever we make changes to it, we have to deploy the entire thing.If it were a service (which we are moving to), it would be able to be deployed independently, and much, much quicker.There are other solutions to the problem, but ""µs are bad, herr derr"" is just trope at this point.  Like anything, they're a tool, and can be used well or badly. If it were a service (which we are moving to), it would be able to be deployed independently, and much, much quicker.There are other solutions to the problem, but ""µs are bad, herr derr"" is just trope at this point.  Like anything, they're a tool, and can be used well or badly. There are other solutions to the problem, but ""µs are bad, herr derr"" is just trope at this point.  Like anything, they're a tool, and can be used well or badly. 
reply

 My hypothesis is that in most projects, the problems with monoliths are smaller, better understood and easier to address than the problems with microservices.There are truly valid cases for microservices. The reality is, however, that most projects are not large enough to qualify to benefit from microservices. They are only large projects because they made a bunch of stupid performance and efficiency mistakes and now they need all this hardware to be able to provide services.As to your statement that deploying monoliths takes time... that's not really that big of a problem. See, most projects can be engineered to build and deploy quickly. It takes truly large amount of code to make that real challenge.And you still can use devops tools and best practices to manage monolithic applicaitons and deploy them quickly. The only thing that gets large is the compilation process itself and the size of the binary that is being transferred.But in my experience it is not out of ordinary for a small microservice functionality that has just couple lines of code to produce image that take gigabytes in space and takes minutes to compile and deliver, so I think the argument is pretty moot. There are truly valid cases for microservices. The reality is, however, that most projects are not large enough to qualify to benefit from microservices. They are only large projects because they made a bunch of stupid performance and efficiency mistakes and now they need all this hardware to be able to provide services.As to your statement that deploying monoliths takes time... that's not really that big of a problem. See, most projects can be engineered to build and deploy quickly. It takes truly large amount of code to make that real challenge.And you still can use devops tools and best practices to manage monolithic applicaitons and deploy them quickly. The only thing that gets large is the compilation process itself and the size of the binary that is being transferred.But in my experience it is not out of ordinary for a small microservice functionality that has just couple lines of code to produce image that take gigabytes in space and takes minutes to compile and deliver, so I think the argument is pretty moot. As to your statement that deploying monoliths takes time... that's not really that big of a problem. See, most projects can be engineered to build and deploy quickly. It takes truly large amount of code to make that real challenge.And you still can use devops tools and best practices to manage monolithic applicaitons and deploy them quickly. The only thing that gets large is the compilation process itself and the size of the binary that is being transferred.But in my experience it is not out of ordinary for a small microservice functionality that has just couple lines of code to produce image that take gigabytes in space and takes minutes to compile and deliver, so I think the argument is pretty moot. And you still can use devops tools and best practices to manage monolithic applicaitons and deploy them quickly. The only thing that gets large is the compilation process itself and the size of the binary that is being transferred.But in my experience it is not out of ordinary for a small microservice functionality that has just couple lines of code to produce image that take gigabytes in space and takes minutes to compile and deliver, so I think the argument is pretty moot. But in my experience it is not out of ordinary for a small microservice functionality that has just couple lines of code to produce image that take gigabytes in space and takes minutes to compile and deliver, so I think the argument is pretty moot. 
reply

 
reply

 - on the service provider, the implementation provides the actual functionality,- on the client, the implementation of the interface is just a stub connecting to the actual service provider.Thus you can sort of provide separation of services as an implementation detail.However in practice very few projects elect to do this. - on the client, the implementation of the interface is just a stub connecting to the actual service provider.Thus you can sort of provide separation of services as an implementation detail.However in practice very few projects elect to do this. Thus you can sort of provide separation of services as an implementation detail.However in practice very few projects elect to do this. However in practice very few projects elect to do this. 
reply

 
reply

 Proj:|-proj-api|-proj-client|-proj-serviceBoth proj-client and proj-service consume/depend-on proj-api so they are in sync of what is going on.Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. |-proj-api|-proj-client|-proj-serviceBoth proj-client and proj-service consume/depend-on proj-api so they are in sync of what is going on.Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. |-proj-client|-proj-serviceBoth proj-client and proj-service consume/depend-on proj-api so they are in sync of what is going on.Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. |-proj-serviceBoth proj-client and proj-service consume/depend-on proj-api so they are in sync of what is going on.Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. Both proj-client and proj-service consume/depend-on proj-api so they are in sync of what is going on.Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. Now, you can switch the implementation of the service to gRPC if you wanted with full source compatibility. Or move it locally. 
reply

 
reply

 The core orchestration of the system was done via events on the bus, and nobody had any idea what was happening when a bug occurred. People would pass bugs around, “my code did the right thing given the event it got”, “well, my code did the right thing too”, and nobody understood the full picture because everyone was stuck in their own silo. Event driven architectures encourage this: events decouple systems such that you don’t know or care what happens when you emit a message, until one day it’s emitted with slightly different timing or ordering or different semantics, and things are broken and nobody knows why.The worst part is that software is basically “take user input, do process A on it, then do process B on that, then do process C on that.” It could have so easily been a simple imperative function that called C(B(A(input))), but instead we made events for “inputWasEmitted”, “Aoutput”, “Boutput”, etc.What happens when system C needs one more piece of metadata about the user input? 3 PR’s into 3 repos to plumb the information around. Coordinating the release of 3 libraries. All around just awful to work with.Oh and this is a very high profile piece of software with a user base in the 9 figure range.(Wild tangent: holy shit is hard to get iOS to accept “do process” in a sentence. I edited that paragraph at least 30 times, no joke, trying every trick I could to stop it correcting it to “due process”. I almost gave up. I used to defend autocorrect but holy shit that was a nightmare.) The worst part is that software is basically “take user input, do process A on it, then do process B on that, then do process C on that.” It could have so easily been a simple imperative function that called C(B(A(input))), but instead we made events for “inputWasEmitted”, “Aoutput”, “Boutput”, etc.What happens when system C needs one more piece of metadata about the user input? 3 PR’s into 3 repos to plumb the information around. Coordinating the release of 3 libraries. All around just awful to work with.Oh and this is a very high profile piece of software with a user base in the 9 figure range.(Wild tangent: holy shit is hard to get iOS to accept “do process” in a sentence. I edited that paragraph at least 30 times, no joke, trying every trick I could to stop it correcting it to “due process”. I almost gave up. I used to defend autocorrect but holy shit that was a nightmare.) What happens when system C needs one more piece of metadata about the user input? 3 PR’s into 3 repos to plumb the information around. Coordinating the release of 3 libraries. All around just awful to work with.Oh and this is a very high profile piece of software with a user base in the 9 figure range.(Wild tangent: holy shit is hard to get iOS to accept “do process” in a sentence. I edited that paragraph at least 30 times, no joke, trying every trick I could to stop it correcting it to “due process”. I almost gave up. I used to defend autocorrect but holy shit that was a nightmare.) Oh and this is a very high profile piece of software with a user base in the 9 figure range.(Wild tangent: holy shit is hard to get iOS to accept “do process” in a sentence. I edited that paragraph at least 30 times, no joke, trying every trick I could to stop it correcting it to “due process”. I almost gave up. I used to defend autocorrect but holy shit that was a nightmare.) (Wild tangent: holy shit is hard to get iOS to accept “do process” in a sentence. I edited that paragraph at least 30 times, no joke, trying every trick I could to stop it correcting it to “due process”. I almost gave up. I used to defend autocorrect but holy shit that was a nightmare.) 
reply

 
reply

 
reply

 can you not just pick the original spelling in the autocomplete menu above the keyboard? 
reply

 If you have some logic A and B running on user input, I wouldn't be splitting that across different services. 
reply

 I can attest to this case study being 100% true. Our platform has been using EventStore as our primary database for 9 years going strong, and I'm still very happy with it. The key thing is that it needs to be done right from the very beginning; you can't do major architecture reworks later on and you need an architect who really knows what they're doing. Also, you can't half-ass it; event sourcing, CQRS, etc all had to embraced the entire time, no shortcuts.I will say though, the biggest downside is that scaling is difficult since you can't always rely on snapshots of data, sometimes you need to event source the entire model and that can get data heavy. If you're standing up a new projector, you could be going through tens of millions of events before it is caught up which requires planning. It is incredible though being able to have every single state change ever made on the platform available, the data guys love it and it makes troubleshooting way easier since there's no secrets on what happened. The biggest con is that most people don't really understand it intuitively, since it's a very different way of doing things, which is why so many companies end up fucking it up. I will say though, the biggest downside is that scaling is difficult since you can't always rely on snapshots of data, sometimes you need to event source the entire model and that can get data heavy. If you're standing up a new projector, you could be going through tens of millions of events before it is caught up which requires planning. It is incredible though being able to have every single state change ever made on the platform available, the data guys love it and it makes troubleshooting way easier since there's no secrets on what happened. The biggest con is that most people don't really understand it intuitively, since it's a very different way of doing things, which is why so many companies end up fucking it up. 
reply

 Like I get the ""message bus"" architecture when you have a bunch of services emitting events and consumers for differing purposes but I don't think I would feel comfortable using it for state tracking. Especially when it seems really hard to enforce a schema / do migrations. CQRS also makes sense for this but only when it functions as a WAL and isn't meant to be stored forever but persisted by everyone who's interested in it and then eventually discarded. 
reply

 Enforcing the schema isn't too hard ime. But every migration needs to be bi-directionally compatible. That's likely what they meant with ""you need an architect and can't make major changes later on""It's the same issue you've had with nosql, even though you technically do have a schema It's the same issue you've had with nosql, even though you technically do have a schema 
reply

 eg. Your commands have to ALWAYS do the same thing else replaying the event log does not produce the same output and then you’re back to square one.It’s usually easier / more useful to just use an audit table. It’s usually easier / more useful to just use an audit table. 
reply

 
reply

 Yes, and I honestly think a traditional database that exposed this stuff would be a winner (but I guess it's too hard, and meanwhile event-sourcing frameworks are building better alternatives). Separating the low-level part from the high-level part that does things like indexing and querying has a lot of advantages: you decouple data storage from validation so you can have validated data without having to drop invalid data on the floor, you decouple index updates from data writes so your scaling problems get way simpler, you can get sensible happens-before semantics without needing transactions that can deadlock and all the crazy stuff that traditional databases do (secret MVCC implementations while the database goes out of its way to present an illusion of a single ""current"" version of the data, snapshotting that you can't access directly, ...). 
reply

 
reply

 
reply

 I suppose you could have event sourcing in a purely isolated manner where the events aren't used for anything else, but you'd be severely limiting the advantages that come free with that. 
reply

 Your example uses the same events for both so sure that can be done but doesn’t have to. I haven’t worked on a system like that personally so maybe it can fine.But honestly I’m a bit skeptical since that removes services’ data sovereignty. Sounds like the recipe for “distributed monolith” architecture. And actually I just remembered another team at my company is ripping out their use of kafka as their data source on a green field project cuz it was a disaster, so skepticism emphasized. But honestly I’m a bit skeptical since that removes services’ data sovereignty. Sounds like the recipe for “distributed monolith” architecture. And actually I just remembered another team at my company is ripping out their use of kafka as their data source on a green field project cuz it was a disaster, so skepticism emphasized. 
reply

 I also tried doing it in a property setting, where profit margins were tight. The effort needed wasn’t worth the cost, and clients didn’t really care about the value proposition anyway. We pretty much replaced the whole layer with a more traditional crud system. 
reply

 
reply

 CRUD: Imperative. Client tells us to create/update a specific entity with some data. 
reply

 Event driven and CQRS ""entities"" made logic and processing much easier to create/test/debug.Primary issues:
1. Making sure you focus on the ""Nouns"" (entities) not the ""Verbs"".
2. Kafka requiring polling for consumers sucks if you want to ""scale to zero"".
3. Sharding of event consumers can be complicated.
4. People have trouble understanding the concepts and keep wanting to write ""ProcessX"" type functions instead of state machines and event handlers.
5. Retry/replay is complicated, better to reverse/replay. Dealing with side effects in replay is also complicated (does a replay generate the output events which trigger state changes in other entities?)Been running now for 6 years, minimal downtime except for maintenance/upgrades.In the process of introducing major new entity and associated changes, most of the system unaffected due to the decoupling. Primary issues:
1. Making sure you focus on the ""Nouns"" (entities) not the ""Verbs"".
2. Kafka requiring polling for consumers sucks if you want to ""scale to zero"".
3. Sharding of event consumers can be complicated.
4. People have trouble understanding the concepts and keep wanting to write ""ProcessX"" type functions instead of state machines and event handlers.
5. Retry/replay is complicated, better to reverse/replay. Dealing with side effects in replay is also complicated (does a replay generate the output events which trigger state changes in other entities?)Been running now for 6 years, minimal downtime except for maintenance/upgrades.In the process of introducing major new entity and associated changes, most of the system unaffected due to the decoupling. Been running now for 6 years, minimal downtime except for maintenance/upgrades.In the process of introducing major new entity and associated changes, most of the system unaffected due to the decoupling. In the process of introducing major new entity and associated changes, most of the system unaffected due to the decoupling. 
reply

 
reply

 The focus when designing the system should be on the entities (Customer, Payment, Bill, Order, Inventory) instead of the processes (ordering, billing, fulfillment). I summarize that by saying ""Nouns over Verbs"".The state of each of the entities is affected by the processes, but the effect happens from changes in other entities, Customers place an Order. Customers get a Bill for the Order, Customers make a Payment, etc.The states of each of these entities is independent of the others and reacts/changes only as a result of two things, either an external ""Command"", or an ""Event"".Commands are events that occur outside of the system boundary, usually visible as part of an API (if RESTful) that uses POST/PUT/DELETE or they are imperatives from one entity to another.Commands are imperatives, Place Order, Pay Bill, Fulfill Order, etc.Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. The state of each of the entities is affected by the processes, but the effect happens from changes in other entities, Customers place an Order. Customers get a Bill for the Order, Customers make a Payment, etc.The states of each of these entities is independent of the others and reacts/changes only as a result of two things, either an external ""Command"", or an ""Event"".Commands are events that occur outside of the system boundary, usually visible as part of an API (if RESTful) that uses POST/PUT/DELETE or they are imperatives from one entity to another.Commands are imperatives, Place Order, Pay Bill, Fulfill Order, etc.Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. The states of each of these entities is independent of the others and reacts/changes only as a result of two things, either an external ""Command"", or an ""Event"".Commands are events that occur outside of the system boundary, usually visible as part of an API (if RESTful) that uses POST/PUT/DELETE or they are imperatives from one entity to another.Commands are imperatives, Place Order, Pay Bill, Fulfill Order, etc.Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Commands are events that occur outside of the system boundary, usually visible as part of an API (if RESTful) that uses POST/PUT/DELETE or they are imperatives from one entity to another.Commands are imperatives, Place Order, Pay Bill, Fulfill Order, etc.Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Commands are imperatives, Place Order, Pay Bill, Fulfill Order, etc.Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Events are records of occurrences in the system, expressed in the past tense and are immutable. Order Placed, Bill Paid, Order Fulfilled.Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Customers place an Order by POSTing to /orders (or potentially /customers/uuid/orders).Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Events are generated from entities inside the system. (Order being placed generates an order_placed event).The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. The difference is that by focussing on the entities, and their state, independent of other entities, the entities can be created, tested, installed, evolved independently of other entities in the system.The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. The thinking about them is simplified and focussed, they are naturally decoupled because they can only find out about other entities by inquiring or affect other entities by generating a Command or an Event.Any events they generate are processed asynchronously and can have multiple consumers. Any events they generate are processed asynchronously and can have multiple consumers. 
reply

 In web or business systems it works well for some(!) parts. You just shouldn’t do everything that way - but often people get too exited about a solution and then they tend to overdo it and apply it everywhere, even when not appropriate.Always chose the golden middle path and apply patterns where they fit well. Always chose the golden middle path and apply patterns where they fit well. 
reply

 
reply

 (No stake in this one way or another, just curious.) 
reply

 
reply

 
reply

 
reply

 Chances are that system, and its outcomes are described very differently on a resume 
reply

 
reply

 
reply

 
reply

 These system are working fine, but maybe a common ground :
* very few services
* the main throughput is ""fact"" events (so something that did happen)
* what you get as ""Event carried state transfer"" is basically the configuration. One service own it, with a classical DB and a UI, but then expose configuration to all the system with this kind of event (and all the consumers consume these read only)
* usually you have to deal with eventual consistency a lot in this kind of setup (so it scales well, but there is a tradeoff) 
reply

 The WAL is an event log, and when you squint at its internal architecture, you’ll see plenty of overlap with distributed event sourcing. 
reply

 
reply

 
reply

 
reply

 As is any web application, because the web (at least without sockets) is constrained into communicating events only.Also, most local GUI applications, because people just like events better for it. Also, most local GUI applications, because people just like events better for it. 
reply

 
reply

 Our users are small-businesses with organisation numbers, and we mostly think of them as unique.  But they strictly aren't, so we 'overwrote' some companies with other companies.Once we detected and fixed the bug, we just replayed the events with the fixed code, and we hadn't lost any data. Once we detected and fixed the bug, we just replayed the events with the fixed code, and we hadn't lost any data. 
reply

 
reply

 
reply

 Every use I've seen sent events after database transactions, with the event not part of the transaction. This means you can get both dropped events, and out of order events.My current company has analytics driven by a system like that. I'm sure there's some corrupted data as a result.The main issue being people just don't know how to build and test distributed systems. My current company has analytics driven by a system like that. I'm sure there's some corrupted data as a result.The main issue being people just don't know how to build and test distributed systems. The main issue being people just don't know how to build and test distributed systems. 
reply

 It sounded kind of impossible, I said as much, and then proposed a different approach.  The interviewer persisted and claimed that it could be done with 'the outbox pattern'.I disagreed and ended the interview there.  Later when I was chatting about it with a former colleague, he said ""Oh, they solved the two generals problem?""> Every use I've seen sent events after database transactions, with the event not part of the transaction.Maybe this is what they were doing. I disagreed and ended the interview there.  Later when I was chatting about it with a former colleague, he said ""Oh, they solved the two generals problem?""> Every use I've seen sent events after database transactions, with the event not part of the transaction.Maybe this is what they were doing. > Every use I've seen sent events after database transactions, with the event not part of the transaction.Maybe this is what they were doing. Maybe this is what they were doing. 
reply

 The point of the outbox pattern is that a durable record of the need to send an event is stored in the DB as part of the DB txn, taking advantage of ACID guarantees.Once you have that durable record in your DB, you can essentially treat your DB as a queue (there's lot of great articles on how to do this with Postgres for instance) for some worker processes to later process the queue records, and send the events.The worker processes in turn can decide if they want to attempt at least once, or at most once delivery of the message. Of course if you choose the later, then maybe your event is never sent, and perhaps that was the point you were trying to make to the interviewer.They key takeaway though is that you are no longer reliant on the original process that stores the DB txn to also send the event, which can fail for any number of reasons, and may have no path to recovery. In other words, at least once delivery is now an option on the table. Once you have that durable record in your DB, you can essentially treat your DB as a queue (there's lot of great articles on how to do this with Postgres for instance) for some worker processes to later process the queue records, and send the events.The worker processes in turn can decide if they want to attempt at least once, or at most once delivery of the message. Of course if you choose the later, then maybe your event is never sent, and perhaps that was the point you were trying to make to the interviewer.They key takeaway though is that you are no longer reliant on the original process that stores the DB txn to also send the event, which can fail for any number of reasons, and may have no path to recovery. In other words, at least once delivery is now an option on the table. The worker processes in turn can decide if they want to attempt at least once, or at most once delivery of the message. Of course if you choose the later, then maybe your event is never sent, and perhaps that was the point you were trying to make to the interviewer.They key takeaway though is that you are no longer reliant on the original process that stores the DB txn to also send the event, which can fail for any number of reasons, and may have no path to recovery. In other words, at least once delivery is now an option on the table. They key takeaway though is that you are no longer reliant on the original process that stores the DB txn to also send the event, which can fail for any number of reasons, and may have no path to recovery. In other words, at least once delivery is now an option on the table. 
reply

 Well then, hopefully you would have found it an unsatisfactory 'solution' and walked away from that interview too ;)> Once you have that durable record in your DB, you can essentially treat your DB as a queue (there's lot of great articles on how to do this with Postgres for instance) for some worker processes to later process the queue records, and send the events.Yeah but I already have a queue I can treat as a queue.  It's called Kafka. > Once you have that durable record in your DB, you can essentially treat your DB as a queue (there's lot of great articles on how to do this with Postgres for instance) for some worker processes to later process the queue records, and send the events.Yeah but I already have a queue I can treat as a queue.  It's called Kafka. Yeah but I already have a queue I can treat as a queue.  It's called Kafka. 
reply

 
reply

 
reply

   (P, K)

Which sounds like one of those classical impossibility proofs.Their solution was to introduce another part into the system, ""the outbox"":  (P, O) K

P and O can form a transaction, but that still leaves the original problem unanswered, how to include K in the transaction. Their solution was to introduce another part into the system, ""the outbox"":  (P, O) K

P and O can form a transaction, but that still leaves the original problem unanswered, how to include K in the transaction.   (P, O) K

P and O can form a transaction, but that still leaves the original problem unanswered, how to include K in the transaction. 
reply

 Without the outbox you can get P without K or K without P, which lead to consumers out of sync with the producer.This requires the consumer to be able to deal with repeated events to some extent, but you usually want that anyway, since an event can be processed twice even if it appears only once in the topic. For instance if the consumer crashes after processing but before updating the offset. This requires the consumer to be able to deal with repeated events to some extent, but you usually want that anyway, since an event can be processed twice even if it appears only once in the topic. For instance if the consumer crashes after processing but before updating the offset. 
reply

 Right, which is why it's an unacceptable solution to 'transacting over postgres and Kafka', and why I wouldn't want to work for a company that wants me to believe differently.And there's a better solution anyway: just K. And there's a better solution anyway: just K. 
reply

 
reply

 
reply

 However I've seen some frameworks where you can do collision imperatively. For exampleif (sprite.collide(tilemap)) {do something}These are generally on smaller less taxing frameworks (in this case I'm referring to haxeflixel) but they do exist! if (sprite.collide(tilemap)) {do something}These are generally on smaller less taxing frameworks (in this case I'm referring to haxeflixel) but they do exist! These are generally on smaller less taxing frameworks (in this case I'm referring to haxeflixel) but they do exist! 
reply

 So we ended up using protobufs over a local MQTT broker and adopted a macro-service architecture. This suited the project very well because it had a handful of obvious distinct parts and we took full advantage of Conway's law by making each devs work the part where their strengths and skills were maximized.We made a few mistakes along the way but learned from them. Most of them relating to inter-service asynchronous programming. This article put words on concepts we learned through trial and errors, especially queries disguised as events. We made a few mistakes along the way but learned from them. Most of them relating to inter-service asynchronous programming. This article put words on concepts we learned through trial and errors, especially queries disguised as events. 
reply

 
reply

 I think it works well when it's the only thing that can work. 
reply

 
reply

 
reply

 
reply

 
reply

 - Producer and consumer are decoupled. That’s a good thing m right? Good luck finding the consumer when you need to modify the producer (the payload). People usually don’t document these things- Let’s use SNS/SQS because why not. Good luck reproducing producers and consumers locally in your machine. Third party infra in local env is usually an afterthought- Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happens - Let’s use SNS/SQS because why not. Good luck reproducing producers and consumers locally in your machine. Third party infra in local env is usually an afterthought- Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happens - Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happens 
reply

 It sounds like your alternative is a producer that updates consumers using HTTP calls. That pushes a lot of complexity to the producer and the team that has to sync up with all of the other teams involved.> Let’s use SNS/SQS because why not. Good luck reproducing producers and consumers locally in your machineAt work we pull localstack from a shared repo and run it in the background. I almost forget that it's there until I need to ""git pull"" if another team has added a new queue that my service is interested in. Just like using curl to call your HTTP endpoints, you can simply just send a message to localstack with the standard aws clihttps://github.com/localstack/localstack> Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happensI think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it > Let’s use SNS/SQS because why not. Good luck reproducing producers and consumers locally in your machineAt work we pull localstack from a shared repo and run it in the background. I almost forget that it's there until I need to ""git pull"" if another team has added a new queue that my service is interested in. Just like using curl to call your HTTP endpoints, you can simply just send a message to localstack with the standard aws clihttps://github.com/localstack/localstack> Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happensI think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it At work we pull localstack from a shared repo and run it in the background. I almost forget that it's there until I need to ""git pull"" if another team has added a new queue that my service is interested in. Just like using curl to call your HTTP endpoints, you can simply just send a message to localstack with the standard aws clihttps://github.com/localstack/localstack> Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happensI think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it https://github.com/localstack/localstack> Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happensI think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it > Observability. Of rather the lack of it. It’s never out of the box, and so usually nobody cares about it until an incident happensI think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it I think it depends on what type of framework you use. At work we use a trace-id field in the header when making HTTP calls or sending a message (sqs) which is propagated automatically downstream. This enables us to easily search logs and see the flow between systems. This was just configured once and is added automatically for all HTTP requests and messages that the service produces. We have a shared dependency that all services use that handles logging, monitoring and other ""plumbing"". Most of it comes out of the box from Spring, and the dependency just needs to configure it. The code imports a generic sns/http/jdbc producer and don't have to think about it 
reply

 The amount of times I've come across someone who's inserted SQS into the mix to ""speed things up""... 
reply

 I just grep for the event's class name. 
reply

 JavaScript 
reply

 
reply

 When I say increased, I mean we want the best answer but there are some answers the bank can’t know. If someone has transferred money into your account from another bank but we don’t know that yet, optimising for absolute correctness is pointless because the vast majority of wrong answers are baked in to the process. We can send you a message and you might read it a day later. Unless we delete the message from your phone, we can’t guarantee the message you read is fully consistent with our internal state.Frankly our system is much better than the batch driven junk that is out of sync a second after it has executed. “Hey you have a reward.” “No I used it 2 hours ago you clowns.”Note this isn’t cope. In some cases we started fully sync but relaxed it where there are tradeoffs that gave us better outcomes and we weren’t giving anything material up. Frankly our system is much better than the batch driven junk that is out of sync a second after it has executed. “Hey you have a reward.” “No I used it 2 hours ago you clowns.”Note this isn’t cope. In some cases we started fully sync but relaxed it where there are tradeoffs that gave us better outcomes and we weren’t giving anything material up. Note this isn’t cope. In some cases we started fully sync but relaxed it where there are tradeoffs that gave us better outcomes and we weren’t giving anything material up. 
reply

 
reply

 
reply

 
reply

 I've ended up in a lot of arguments about this while we were building larger distributed systems because I've come from a more request/response oriented message passing architectures. I.e. more synchronous. What I've found is that the event driven architecture did tend to lead to less abstractions and more leaked internal details. This isn't fundamental (you can treat events like an API) but was related to some details in our implementation (something along the line of CDC).Another problem with distributed systems with persistent queues passing events is that if the consumer falls behind you start developing a lag. Yet another considerations is that the infrastructure to support this tends to have some performance penalties (e.g. going through Kafka with an event ends up being a lot more expensive than an RPC call). Overall it IMO makes for a lot of additional complexity which you may need in some cases, but if you don't then you shouldn't pay the cost.What I've come to realize is that in many ways those systems are equivalent. You can simulate one over the other. If you have an event based system you can send requests as events and then wait for the response event. If you have a request/response system you can simulate events over that.If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model). So... Semantics. Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.There are things that conceptually fit well with an event driven architecture and then there are things that fit well with a request/response model. I'm guessing most large scale complex distributed apps would be best supporting both models. Another problem with distributed systems with persistent queues passing events is that if the consumer falls behind you start developing a lag. Yet another considerations is that the infrastructure to support this tends to have some performance penalties (e.g. going through Kafka with an event ends up being a lot more expensive than an RPC call). Overall it IMO makes for a lot of additional complexity which you may need in some cases, but if you don't then you shouldn't pay the cost.What I've come to realize is that in many ways those systems are equivalent. You can simulate one over the other. If you have an event based system you can send requests as events and then wait for the response event. If you have a request/response system you can simulate events over that.If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model). So... Semantics. Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.There are things that conceptually fit well with an event driven architecture and then there are things that fit well with a request/response model. I'm guessing most large scale complex distributed apps would be best supporting both models. What I've come to realize is that in many ways those systems are equivalent. You can simulate one over the other. If you have an event based system you can send requests as events and then wait for the response event. If you have a request/response system you can simulate events over that.If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model). So... Semantics. Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.There are things that conceptually fit well with an event driven architecture and then there are things that fit well with a request/response model. I'm guessing most large scale complex distributed apps would be best supporting both models. If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model). So... Semantics. Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.There are things that conceptually fit well with an event driven architecture and then there are things that fit well with a request/response model. I'm guessing most large scale complex distributed apps would be best supporting both models. There are things that conceptually fit well with an event driven architecture and then there are things that fit well with a request/response model. I'm guessing most large scale complex distributed apps would be best supporting both models. 
reply

 
reply

 I can recall software where I tried to wrestle a bunch of asynchronous things into looking more synchronous and then software where I really enjoyed working with a pure asynchronous model (Boost.Asio FTW). Usually the software where I want things to be synchronous is where for the most part I want to execute a linear sequence of things that depend on each other without really being able to use that time for doing other things vs. software where I want all things to happen at the same time all the time (e.g. being able to take in new connections over the network, serve existing connections etc.) and spinning threads for doing that is not a good fit (performance or abstraction-wise).The locality of the synchronous model makes it easier to grok as long as you're ok with not being able to do something else while the asynchronous thing is going on. OTOH state machines, or statecharts to go further, which are an inherently asynchronous view, have many advantages (But are not Turing Complete). The locality of the synchronous model makes it easier to grok as long as you're ok with not being able to do something else while the asynchronous thing is going on. OTOH state machines, or statecharts to go further, which are an inherently asynchronous view, have many advantages (But are not Turing Complete). 
reply

 I'd put it the other way: event driven architecture makes it safer to expose more internal details for longer, and lets you push back the point where you really need to fully decouple your API. I see that as an advantage; an abstract API is a means not an end.> Another problem with distributed systems with persistent queues passing events is that if the consumer falls behind you start developing a lag.Isn't that what you want? Whatever your architecture, fundamentally when you can't keep up either you queue or you start dropping some inputs.> If you have a request/response system you can simulate events over that.How? I mean you can implement your own eventing layer on top of a request/response system, but that's going to give you all the problems of both.> If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. > Another problem with distributed systems with persistent queues passing events is that if the consumer falls behind you start developing a lag.Isn't that what you want? Whatever your architecture, fundamentally when you can't keep up either you queue or you start dropping some inputs.> If you have a request/response system you can simulate events over that.How? I mean you can implement your own eventing layer on top of a request/response system, but that's going to give you all the problems of both.> If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. Isn't that what you want? Whatever your architecture, fundamentally when you can't keep up either you queue or you start dropping some inputs.> If you have a request/response system you can simulate events over that.How? I mean you can implement your own eventing layer on top of a request/response system, but that's going to give you all the problems of both.> If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. > If you have a request/response system you can simulate events over that.How? I mean you can implement your own eventing layer on top of a request/response system, but that's going to give you all the problems of both.> If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. How? I mean you can implement your own eventing layer on top of a request/response system, but that's going to give you all the problems of both.> If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. > If we look at things like consensus protocols or distributed/persistent queues then obviously we would need some underlying resources (e.g. you might need a database behind your request/response model).Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. Huh?> Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. > Don't know if others have a similar experience but when one system is mandated people will invent workarounds that end up looking like the other paradigm, which makes things worse.I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. I agree that building a request/response system on top of an event sourcing system gives you something worse than using a native request/response system. But that's not a good reason to abandon the mandate, because building a true event-sourcing system has real advantages, and most of those advantages disappear once you start mixing the two. What you do need is full buyin and support at every level rather than a mandate imposed on people who don't want to follow it, but that's true for every development choice. 
reply

 re: Huh. Sorry I was not clear there. What I meant is you can not create persistent queue semantics out of a request/response model without being able to make certain kinds of requests that access resources. Maybe that's an obvious statement.re: mandate. I think I'm saying these sort of mandates inevitable result in poor design. even the purest of purest event sourcing systems actually use requests/response simply because that is the fundamental building block of systems. E.g. Kafka uses gRPCs from the client and waits for a response in order to inject something into a queue. The communication between Kafka nodes is based on messages. The basic building block of any distributed computer system is a packet (request) being sent from one machine to another, and a response being sent back (e.g. TCP control messages). A mandate that says though shall build everything on top of event sourcing is sort of silly in this context since it should be obvious the building blocks of event sourced systems use requests/response. Even without this nit-picking restricting application developers to only build on top of this abstraction inevitably leads to ugliness. IMO anyways and having seen this mandate at work in a large organizations. Use the right tool for your job is more or less what I'm saying or the other famous way of stating this is when all you have is a hammer everything looks like a nail.re: isn't that what you want. well, if it is what you want then it is what you want, but many systems are ok with things just getting lost and not persisted. e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed. Again, maybe an obvious statement. re: mandate. I think I'm saying these sort of mandates inevitable result in poor design. even the purest of purest event sourcing systems actually use requests/response simply because that is the fundamental building block of systems. E.g. Kafka uses gRPCs from the client and waits for a response in order to inject something into a queue. The communication between Kafka nodes is based on messages. The basic building block of any distributed computer system is a packet (request) being sent from one machine to another, and a response being sent back (e.g. TCP control messages). A mandate that says though shall build everything on top of event sourcing is sort of silly in this context since it should be obvious the building blocks of event sourced systems use requests/response. Even without this nit-picking restricting application developers to only build on top of this abstraction inevitably leads to ugliness. IMO anyways and having seen this mandate at work in a large organizations. Use the right tool for your job is more or less what I'm saying or the other famous way of stating this is when all you have is a hammer everything looks like a nail.re: isn't that what you want. well, if it is what you want then it is what you want, but many systems are ok with things just getting lost and not persisted. e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed. Again, maybe an obvious statement. re: isn't that what you want. well, if it is what you want then it is what you want, but many systems are ok with things just getting lost and not persisted. e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed. Again, maybe an obvious statement. 
reply

 An explicit API comes at a cost; the way I'd put it is that the inherently lower coupling of events (because e.g. you can publish the same events in multiple formats, whereas a request-response API generally needs to have a single response format) means that you have more slack to defer that cost for longer (i.e. it takes you longer to reach the point where the overall system coupling is too bad and you need to introduce those API layers).I'm not sure I follow what you're saying about sharing events relating to how data changes. IMO if you need a shared view of ""the current version of the data"", the right solution is to publish that as events too.> E.g. Kafka uses gRPCs from the client and waits for a response in order to inject something into a queue. The communication between Kafka nodes is based on messages. The basic building block of any distributed computer system is a packet (request) being sent from one machine to another, and a response being sent back (e.g. TCP control messages).I don't know the details of kafka's low-level protocols, but it's certainly possible to build these systems based on one-way messaging all the way down; gRPC has one-way messages, plenty of protocols are built on one-way UDP rather than TCP...> e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed.Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. I'm not sure I follow what you're saying about sharing events relating to how data changes. IMO if you need a shared view of ""the current version of the data"", the right solution is to publish that as events too.> E.g. Kafka uses gRPCs from the client and waits for a response in order to inject something into a queue. The communication between Kafka nodes is based on messages. The basic building block of any distributed computer system is a packet (request) being sent from one machine to another, and a response being sent back (e.g. TCP control messages).I don't know the details of kafka's low-level protocols, but it's certainly possible to build these systems based on one-way messaging all the way down; gRPC has one-way messages, plenty of protocols are built on one-way UDP rather than TCP...> e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed.Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. > E.g. Kafka uses gRPCs from the client and waits for a response in order to inject something into a queue. The communication between Kafka nodes is based on messages. The basic building block of any distributed computer system is a packet (request) being sent from one machine to another, and a response being sent back (e.g. TCP control messages).I don't know the details of kafka's low-level protocols, but it's certainly possible to build these systems based on one-way messaging all the way down; gRPC has one-way messages, plenty of protocols are built on one-way UDP rather than TCP...> e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed.Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. I don't know the details of kafka's low-level protocols, but it's certainly possible to build these systems based on one-way messaging all the way down; gRPC has one-way messages, plenty of protocols are built on one-way UDP rather than TCP...> e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed.Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. > e.g. an HTTP GET request from a browser, in the absence of a network connection, is just lost, it's not persisted to be played later, and so there is no way to build a lagging queue with HTTP GET requests that are yet to be processed.Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. Right, because HTTP is a request-response protocol. Whereas Kafka does buffer messages and send them later if you lose your network connection for a short time (of course there is a point at which it will give up and call your error handler).I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. I don't think the fact that HTTP works that way means it's desirable to just abandon those requests - e.g. in fact these days if you navigate to a page with Chrome when you have no network connection it will make the request when you're back online and send you a notification that it's loaded the page that it couldn't load earlier. 
reply

 When I think of large scale success stories around the request/response model I think AWS (where famously Bezos mandated APIs first) and Google. Both now have services that look more event oriented (e.g. SQS or Firebase). And ofcourse the modern web (though the ugly hacks needed to make something look like event driven was certainly not fun).Events related to data changes are about keeping data structures in sync via events. Also known as state-based architecture. Something I worked on in the early 2000's kept a remote client/UI in sync with the server and a database using events like that and was a pretty lean/neat implementation.Good one on the Chrome re-making requests when you're online for an active tab. That's certainly an interesting use case.My intuition is that some things are very naturally events. Let's say a packet arriving into your computer. A mouse click. And some things are naturally a request-response. Let's say calculating the Cosine of an angle. You can replace x = sin(y) with an event, and an event that comes back, but that feels awkward as a human. Maybe not the best example...It's another variation on the sync vs. async debates I guess. Coroutines or callbacks... Events related to data changes are about keeping data structures in sync via events. Also known as state-based architecture. Something I worked on in the early 2000's kept a remote client/UI in sync with the server and a database using events like that and was a pretty lean/neat implementation.Good one on the Chrome re-making requests when you're online for an active tab. That's certainly an interesting use case.My intuition is that some things are very naturally events. Let's say a packet arriving into your computer. A mouse click. And some things are naturally a request-response. Let's say calculating the Cosine of an angle. You can replace x = sin(y) with an event, and an event that comes back, but that feels awkward as a human. Maybe not the best example...It's another variation on the sync vs. async debates I guess. Coroutines or callbacks... Good one on the Chrome re-making requests when you're online for an active tab. That's certainly an interesting use case.My intuition is that some things are very naturally events. Let's say a packet arriving into your computer. A mouse click. And some things are naturally a request-response. Let's say calculating the Cosine of an angle. You can replace x = sin(y) with an event, and an event that comes back, but that feels awkward as a human. Maybe not the best example...It's another variation on the sync vs. async debates I guess. Coroutines or callbacks... My intuition is that some things are very naturally events. Let's say a packet arriving into your computer. A mouse click. And some things are naturally a request-response. Let's say calculating the Cosine of an angle. You can replace x = sin(y) with an event, and an event that comes back, but that feels awkward as a human. Maybe not the best example...It's another variation on the sync vs. async debates I guess. Coroutines or callbacks... It's another variation on the sync vs. async debates I guess. Coroutines or callbacks... 
reply

 
reply

 I’ve used it with a good degree of success in some data pipeline and spark stuff to have stuff automatically kick off, without heinous conditional orchestration logic. I also use evented stuff over channels in a lot of my rust code with great success.However, echoing the sentiments of some other comments: most articles about event driven stuff seem to be either marketing blogspam or “we tried it and it was awful”. To be honest I look at a lot of those blog posts and about half the time my thoughts are “no wonder that didn’t work out, that’s an insane design” but is that just “you’re-doing-it-wrong-cope”?Are there success stories out there that just aren’t being written? Is there just no success stories? Is the architecture less forgiving of poor design and this “higher bar of entry” torpedoes a number of projects? Is it more susceptible to “architecture astronauts” which dooms it? Is it actually decent, but requires a somewhat larger mindset-change than most people take to it, leading to half-baked implementations?I can’t help but feel the underlying design has some kernels of some really good ideas, but the volume of available evidence sort of suggests otherwise. However, echoing the sentiments of some other comments: most articles about event driven stuff seem to be either marketing blogspam or “we tried it and it was awful”. To be honest I look at a lot of those blog posts and about half the time my thoughts are “no wonder that didn’t work out, that’s an insane design” but is that just “you’re-doing-it-wrong-cope”?Are there success stories out there that just aren’t being written? Is there just no success stories? Is the architecture less forgiving of poor design and this “higher bar of entry” torpedoes a number of projects? Is it more susceptible to “architecture astronauts” which dooms it? Is it actually decent, but requires a somewhat larger mindset-change than most people take to it, leading to half-baked implementations?I can’t help but feel the underlying design has some kernels of some really good ideas, but the volume of available evidence sort of suggests otherwise. Are there success stories out there that just aren’t being written? Is there just no success stories? Is the architecture less forgiving of poor design and this “higher bar of entry” torpedoes a number of projects? Is it more susceptible to “architecture astronauts” which dooms it? Is it actually decent, but requires a somewhat larger mindset-change than most people take to it, leading to half-baked implementations?I can’t help but feel the underlying design has some kernels of some really good ideas, but the volume of available evidence sort of suggests otherwise. I can’t help but feel the underlying design has some kernels of some really good ideas, but the volume of available evidence sort of suggests otherwise. 
reply

 
reply

 Generally, I found that when using event systems you have to be really careful not to over-use it, even small/single player games. Its super hard to debug when everything is an event - if you go this route, you essentially end up in a situation where everything is ""global"" and can be reached from anywhere (might as well just go full singleton mode at that point). Additionally, I found it difficult having to deal with event handlers which raise other events, or worse, async events, as then it becomes really hard to ensure the correct order of invocations.If you plan to use an event system, my advice would be (in Unity):
- Reference and raise events only on root Game Object scripts (e.g., have a root ""Actor"" script which subscribes/publishes events and communicates with its children via properties/C# events)
- Never subscribe or publish events in regular ""child"" components
- Use DI/service locator to fetch systems/global things and call them directly when possible from your ""Actors"" If you plan to use an event system, my advice would be (in Unity):
- Reference and raise events only on root Game Object scripts (e.g., have a root ""Actor"" script which subscribes/publishes events and communicates with its children via properties/C# events)
- Never subscribe or publish events in regular ""child"" components
- Use DI/service locator to fetch systems/global things and call them directly when possible from your ""Actors"" 
reply

 Edit- I should say I never saw one in the wild, quick search found some academic projects https://scholar.google.com/scholar?q=event-driven+control+sy... 
reply

 
reply

 
reply

 I feel like a lot of teams out there can probably benefit from this simpler approach - it's probably what a lot of people are doing unwittingly. 
reply

 There is no avoiding it when dealing with, erm, events.Events are things that happen that you cannot predict exactly when, where, and what.The user clicked the mouseThe wind changed directionUsing Events to signal state change from one part of a system to another is a bad idea. Use a function call.A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern Events are things that happen that you cannot predict exactly when, where, and what.The user clicked the mouseThe wind changed directionUsing Events to signal state change from one part of a system to another is a bad idea. Use a function call.A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern The user clicked the mouseThe wind changed directionUsing Events to signal state change from one part of a system to another is a bad idea. Use a function call.A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern The wind changed directionUsing Events to signal state change from one part of a system to another is a bad idea. Use a function call.A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern Using Events to signal state change from one part of a system to another is a bad idea. Use a function call.A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern A rule of thumb is if the producer and the consu,er are in the same system then ""Event Driven Architecture "" is the anti pattern 
reply

 
reply

 
reply

 > Commands only have a single consumer. There must be a single consumer. That’s it. They do not use the publish-subscribe pattern....oops.Now the question is how much (more) time I want to spend on a(nother) rewrite. ...oops.Now the question is how much (more) time I want to spend on a(nother) rewrite. Now the question is how much (more) time I want to spend on a(nother) rewrite. 
reply

 

 
reply

 
reply

 
reply

"
30,cameronl,piku: The tiniest PaaS you've ever seen | Hacker News,https://news.ycombinator.com/item?id=40622704,,2024-06-10T05:47:01Z,"https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...It explains how piku works under the hood, as well as showing a minimalistic Python web app example from a user standpoint. It explains how piku works under the hood, as well as showing a minimalistic Python web app example from a user standpoint. 
reply

 At a minimum, your doc should be prominently linked to from both the piku repo and the piku docs (or more prominently linked, if it's already linked somewhere), if not pulled completely into the docs home page.That said, if you're interested in a suggestion, take a look at an end-to-end coolio tutorial that shows how to go from new bare metal server to publicly accessible custom domain name with SSL cert, and add the extra steps to your doc (even though yes, they have nothing directly to do with piku, because they have everything to do with what a potential new user actually wants to do and the potential new user doesn't know how to do those steps yet even though you do).Your doc is already hundreds of times more useful than the main piku docs page. Extending your doc to cover an example of how to get to exposing a publicly accessible custom domain with SSL cert would make your doc hundreds of times more useful than it is now. Yes, I know, there are a ton of ways to get from where your doc ends to a publicly available custom domain with SSL cert. Pick one. It doesn't matter what you pick. The person who cares which approach you use already knows how to do the approach they prefer. You're adding these steps for the person who doesn't know how to do any of the anpproaches and just wants to get to their site hosted on a $5 droplet or whatever.Again, your page is a huge help, this suggestion is just about making your page a huger help.For reference, here's a sample coolio end-to-end example showing how they go from bare metal to publicly accessible custom domain with SSL:https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. That said, if you're interested in a suggestion, take a look at an end-to-end coolio tutorial that shows how to go from new bare metal server to publicly accessible custom domain name with SSL cert, and add the extra steps to your doc (even though yes, they have nothing directly to do with piku, because they have everything to do with what a potential new user actually wants to do and the potential new user doesn't know how to do those steps yet even though you do).Your doc is already hundreds of times more useful than the main piku docs page. Extending your doc to cover an example of how to get to exposing a publicly accessible custom domain with SSL cert would make your doc hundreds of times more useful than it is now. Yes, I know, there are a ton of ways to get from where your doc ends to a publicly available custom domain with SSL cert. Pick one. It doesn't matter what you pick. The person who cares which approach you use already knows how to do the approach they prefer. You're adding these steps for the person who doesn't know how to do any of the anpproaches and just wants to get to their site hosted on a $5 droplet or whatever.Again, your page is a huge help, this suggestion is just about making your page a huger help.For reference, here's a sample coolio end-to-end example showing how they go from bare metal to publicly accessible custom domain with SSL:https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. Your doc is already hundreds of times more useful than the main piku docs page. Extending your doc to cover an example of how to get to exposing a publicly accessible custom domain with SSL cert would make your doc hundreds of times more useful than it is now. Yes, I know, there are a ton of ways to get from where your doc ends to a publicly available custom domain with SSL cert. Pick one. It doesn't matter what you pick. The person who cares which approach you use already knows how to do the approach they prefer. You're adding these steps for the person who doesn't know how to do any of the anpproaches and just wants to get to their site hosted on a $5 droplet or whatever.Again, your page is a huge help, this suggestion is just about making your page a huger help.For reference, here's a sample coolio end-to-end example showing how they go from bare metal to publicly accessible custom domain with SSL:https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. Again, your page is a huge help, this suggestion is just about making your page a huger help.For reference, here's a sample coolio end-to-end example showing how they go from bare metal to publicly accessible custom domain with SSL:https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. For reference, here's a sample coolio end-to-end example showing how they go from bare metal to publicly accessible custom domain with SSL:https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. https://billyle.dev/posts/self-hosting-your-website-with-coo...The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. The goal of all this isn't about making it possible to do things, it's about massively increasing the number of people who adopt piku by making it easier for more people to do so. 
reply

 
reply

 
reply

 thanks for that. I have no idea what heroku is or does. 
reply

 https://leerob.io/blog/heroku 
reply

 
reply

 Git push deployment where it detects your stack and automatically builds, then deploys with zero downtime. 
reply

 So, did I understand correctly, that Pico installs both an agent on the remote machine and a commit hook on the local machine? Why didn't they minimize the overhead by just making the remote machine a Git remote and do all the work there when you push a specific branch to that remote? 
reply

 
reply

 
reply

 There is no commit hook on the local machine. On the local machine, you simply have a shim named ""piku"" which is essentially running ""ssh remote /path/to/piku.py $@"" to control the remote machine. 
reply

 
reply

 
reply

 What this means is that you can now generate a docker image locally using similar build tooling to Heroku’s “git push” logic that detects language support and does the right thing TM. Here’s a tutorial for building a Rails app with the buildpack I maintain https://www.schneems.com/2024/05/01/build-a-ruby-on-rails-ap...Would love some feedback, if you try it. Please consider posting about the experience in the linked discussion (good, bad, indifferent, or whatever I just want more feedback to improve the experience). Would love some feedback, if you try it. Please consider posting about the experience in the linked discussion (good, bad, indifferent, or whatever I just want more feedback to improve the experience). 
reply

 
reply

 I've upgraded my dokku install over 3-4 Ubuntu LTS so far and it's been problem free for my use case of hosting little side projects on a VPS. 
reply

 
reply

 
reply

 Most of the deployments I got wind of are on extremely stable distros - typically LTS versions where you will not need to upgrade your runtime every six months (and my website has been running in it for at least two Ubuntu LTS releases…)But you can trivially use pyenv/nvenv/etc. by just setting environment variables. My home automation system now needs two different Node versions, and I have one set per app. But you can trivially use pyenv/nvenv/etc. by just setting environment variables. My home automation system now needs two different Node versions, and I have one set per app. 
reply

 
reply

 
reply

 
reply

 IMO that quality should be the default, and I would choose my OS and tech stacks accordingly. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 The service was ironically so old that no modern vulnerability scanner or programming language would be able to connect!This made me seeiously ponder the fleeting nature of modern world - SSL support was everywhere 15 years ago, and now I, as an expert, had great problems using it. What chance do we have in 100 years? This made me seeiously ponder the fleeting nature of modern world - SSL support was everywhere 15 years ago, and now I, as an expert, had great problems using it. What chance do we have in 100 years? 
reply

 
reply

 
reply

 It seems so elegant and I love the ""it just works"" attitude, and I do understand that docker can't be used everywhere due to its technical (and mental) overhead, but I love it because it allows to isolate everything, freeze everything in time so running a container 5 years for now ""just works"".In my humble workflow, I'm using lazydocker to manage the containers, gitlab workflow (action?) for deployment on push and a small VPS to build and push the containers to gitlab registry and to run it, on the same VPS. It's a little bit overkill - I could use a combination of a Dockerfile and a compose.yml with docker compose build. Also, I didn't figure out scaling yet. Good thing I don't need it! Otherwise I would swap docker for k8s and lazydocker for k9s.(I'm open to suggestions. I just got into devops, and I love it!) In my humble workflow, I'm using lazydocker to manage the containers, gitlab workflow (action?) for deployment on push and a small VPS to build and push the containers to gitlab registry and to run it, on the same VPS. It's a little bit overkill - I could use a combination of a Dockerfile and a compose.yml with docker compose build. Also, I didn't figure out scaling yet. Good thing I don't need it! Otherwise I would swap docker for k8s and lazydocker for k9s.(I'm open to suggestions. I just got into devops, and I love it!) (I'm open to suggestions. I just got into devops, and I love it!) 
reply

 My entire server is then managed declaratively, so if I want to add a new project, it’s like 3-5 lines of Nginx config and push, that’s all. Something goes wrong? Just revert the commit. 
reply

 
reply

 As far as the nixos config is concerned, there is nothing crazy in it. It is just a regular nix config with nginx (https://nixos.wiki/wiki/Nginx). You can see there that adding nginx is just four lines of code, ~eight with ssl. Use it to proxy to your applications that are setup as systemd services (https://wiki.nixos.org/wiki/Systemd/User_Services).Edit: btw I'm a big fan of asciinema! ty for making it. :) Edit: btw I'm a big fan of asciinema! ty for making it. :) 
reply

 
reply

 
reply

 
reply

 
reply

 This is timely for me as well as I just open sourced (yesterday!) a project that is in the same space, but for Kubernetes (https://github.com/pier-oliviert/sequencer).All of this to say, congrats! It looks great. All of this to say, congrats! It looks great. 
reply

 If you set up a server, you can create a git repo by just doing `git init --bare`, add the setting `git config receive.denyCurrentBranch updateInstead`.After that you can use git hooks (more specifically push-to-checkout hook), to receive uploads, compile and launch. The hook will just be a simple shell script, the most basic version could be a variant of `compile && install && systemctl restart service`.From there you'll be able to copy the repo locally and pushing your changes will now trigger the hook you've setup.git clone root@yourserver.com:/path/to/git/folder After that you can use git hooks (more specifically push-to-checkout hook), to receive uploads, compile and launch. The hook will just be a simple shell script, the most basic version could be a variant of `compile && install && systemctl restart service`.From there you'll be able to copy the repo locally and pushing your changes will now trigger the hook you've setup.git clone root@yourserver.com:/path/to/git/folder From there you'll be able to copy the repo locally and pushing your changes will now trigger the hook you've setup.git clone root@yourserver.com:/path/to/git/folder git clone root@yourserver.com:/path/to/git/folder 
reply

 
reply

 
reply

 Why would I want to use Piku? Would it give me some benefits I currently don't have? 
reply

 Spinning up a server and installing a repo on it is easy.
Depends on your use case and on what you know/have.I prefer ansible or jenkins+scp-build-to-server+run-deploy.scriptI added it to my tools list in case i need sth quick'n working for a small team/to recommend when there's no ansible/sysadmin knowledge available.(I haven't looked into piku but i guess you'll hit its limitation once you have more complex deployment schemes, privilege/access management, ...) I prefer ansible or jenkins+scp-build-to-server+run-deploy.scriptI added it to my tools list in case i need sth quick'n working for a small team/to recommend when there's no ansible/sysadmin knowledge available.(I haven't looked into piku but i guess you'll hit its limitation once you have more complex deployment schemes, privilege/access management, ...) I added it to my tools list in case i need sth quick'n working for a small team/to recommend when there's no ansible/sysadmin knowledge available.(I haven't looked into piku but i guess you'll hit its limitation once you have more complex deployment schemes, privilege/access management, ...) (I haven't looked into piku but i guess you'll hit its limitation once you have more complex deployment schemes, privilege/access management, ...) 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I wish I had known about this project ~18 months ago. I was specifically looking for a way to have a Heroku-like dev experience deploying to my Raspberry Pi, and this looks like it's trying to be exactly that. 
reply

 
reply

 Still, Chris did a public presentation on it near the beginning (video’s in the docs) and other folk did similar things, so… 
reply

 
reply

 
reply

 
reply

 https://cloudinit.readthedocs.io/en/latest/howto/rerun_cloud... 
reply

 https://github.com/epinio/epinio/https://github.com/kube-hetzner/terraform-hcloud-kube-hetzne... https://github.com/kube-hetzner/terraform-hcloud-kube-hetzne... 
reply

 So basically not at all the same? :DThe point of piku seems to be: Heroku experience without requiring docker, and with a really simple architecture, and that it works on ARM.Kubernetes works on ARM, I give you that. But AFAIK, Kubernetes requires you to use some sort of containers (Docker or otherwise) and its architecture is anything but simple (for obvious reasons).Besides that, I don't see how epinion enables the ""git push"" workflow, the quick start tutorial seems to tell you to run ""epinio push manifest.yaml"" or similar to deploy the application, so it doesn't fit with the ""Heroku-like experience"" either.So really, the only things they have in common is that they handle deployments? The point of piku seems to be: Heroku experience without requiring docker, and with a really simple architecture, and that it works on ARM.Kubernetes works on ARM, I give you that. But AFAIK, Kubernetes requires you to use some sort of containers (Docker or otherwise) and its architecture is anything but simple (for obvious reasons).Besides that, I don't see how epinion enables the ""git push"" workflow, the quick start tutorial seems to tell you to run ""epinio push manifest.yaml"" or similar to deploy the application, so it doesn't fit with the ""Heroku-like experience"" either.So really, the only things they have in common is that they handle deployments? Kubernetes works on ARM, I give you that. But AFAIK, Kubernetes requires you to use some sort of containers (Docker or otherwise) and its architecture is anything but simple (for obvious reasons).Besides that, I don't see how epinion enables the ""git push"" workflow, the quick start tutorial seems to tell you to run ""epinio push manifest.yaml"" or similar to deploy the application, so it doesn't fit with the ""Heroku-like experience"" either.So really, the only things they have in common is that they handle deployments? Besides that, I don't see how epinion enables the ""git push"" workflow, the quick start tutorial seems to tell you to run ""epinio push manifest.yaml"" or similar to deploy the application, so it doesn't fit with the ""Heroku-like experience"" either.So really, the only things they have in common is that they handle deployments? So really, the only things they have in common is that they handle deployments? 
reply

 I should have said „I like Epinio, as well“ because I also like Piku, especially for its minimalistic approach and readable code, but when it comes to actually using it for deployments, I prefer Kubernetes. 
reply

 
reply

 One thing it already does (optionally) is to kill off unused instances and idle, lazily starting them when a new connection comes in. 
reply

 
reply

 
reply

 There is also:https://kamal-deploy.org/
https://github.com/basecamp/kamalhttps://dokku.com/
https://github.com/dokku/dokku/https://clace.io/
https://github.com/claceio/clace https://kamal-deploy.org/
https://github.com/basecamp/kamalhttps://dokku.com/
https://github.com/dokku/dokku/https://clace.io/
https://github.com/claceio/clace https://dokku.com/
https://github.com/dokku/dokku/https://clace.io/
https://github.com/claceio/clace https://clace.io/
https://github.com/claceio/clace 
reply

   sftp user@host remoteFile localFile

Joking aside, I’m a bit surprised such a tool would be developed in Python given its dependency’s and runtime (which is not easy on the user). 
reply

 Also, Python is everywhere, on every OS and Linux system, so it was a natural choice. I also wanted it to be easily hackable and extensible, and few languages would make it simpler to understand or extend. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 - piku deploys via git rather than scp/sftp, but authenticates via ssh like those tools- piku supports a number of runtimes, including Python, Ruby, Node, Go, Clojure. The runtimes are implemented rather simply, you can add your own rather easily, see examples here in the code: https://github.com/piku/piku/blob/8777cc093a062c67d3bead9a5d...- For each runtime, a mechanism is utilized to install and isolate package dependencies (requirements.txt in Python, Gemfile in Ruby, packages.json in Node, etc.)- a Procfile and ENV file are used to declare your application entrypoints and envvars akin to Heroku / 12 Factor App ideas- a CLI (ssh shim on dev client machine) is provided for checking status and logs from the client (as well as stop/start/restart)- since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - piku supports a number of runtimes, including Python, Ruby, Node, Go, Clojure. The runtimes are implemented rather simply, you can add your own rather easily, see examples here in the code: https://github.com/piku/piku/blob/8777cc093a062c67d3bead9a5d...- For each runtime, a mechanism is utilized to install and isolate package dependencies (requirements.txt in Python, Gemfile in Ruby, packages.json in Node, etc.)- a Procfile and ENV file are used to declare your application entrypoints and envvars akin to Heroku / 12 Factor App ideas- a CLI (ssh shim on dev client machine) is provided for checking status and logs from the client (as well as stop/start/restart)- since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - For each runtime, a mechanism is utilized to install and isolate package dependencies (requirements.txt in Python, Gemfile in Ruby, packages.json in Node, etc.)- a Procfile and ENV file are used to declare your application entrypoints and envvars akin to Heroku / 12 Factor App ideas- a CLI (ssh shim on dev client machine) is provided for checking status and logs from the client (as well as stop/start/restart)- since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - a Procfile and ENV file are used to declare your application entrypoints and envvars akin to Heroku / 12 Factor App ideas- a CLI (ssh shim on dev client machine) is provided for checking status and logs from the client (as well as stop/start/restart)- since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - a CLI (ssh shim on dev client machine) is provided for checking status and logs from the client (as well as stop/start/restart)- since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - since all applications are managed via uwsgi on the remote, there is also support for worker/sidecar processes and cronjob-style scheduled tasks- HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. - HTTPS via Let's Encrypt (acme.sh) is handled automagically for web appsI describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. I describe more about how piku works in this tutorial:https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. https://github.com/piku/webapp-tutorial?tab=readme-ov-file#b...You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. You're right that PHP apps have a simple deployment story, and in a way piku brings something akin to this level of simplicity to other web programming runtimes. 
reply

 
reply

 
reply

 That said I want to give this a go but don't immediately see how I can migrate my overengineered 8-10 container spaghetti of a docker-compose file to a state where I can use piku instead of manual 'git pull && docker compose up' on the remote 
reply

 
reply

 Currently hyping myself up to drastically simplify everything, which will be a joy onto itself 
reply

 
reply

 Another question is subdomain support: to have a catch all virtual host that will respond to anything.domain.tld and have wildcard letsenrypt enabled ssl with DNS challenge.Those two problems make me think that my side gig has grown up enough to switch to ArgoCD/K8s, although there are many other problems that come with it (from my experience on the day job). For now I just do the certificate rotation manually, which is not much ideal but works with a couple make targets. Those two problems make me think that my side gig has grown up enough to switch to ArgoCD/K8s, although there are many other problems that come with it (from my experience on the day job). For now I just do the certificate rotation manually, which is not much ideal but works with a couple make targets. 
reply

 If you have to think about it, it isn't worth it. You'll know when it is time to refactor your infra. 
reply

 Not quite the 'push deploy', but that was the way apps were developed back in the days, and for some reason I still prefer that approach. Commit, test, and at one point manually nominate and deploy stable version. 
reply

 
reply

 
reply

 
reply

 GitHub will call the webhook after a push to main and a successful test suite run. Snare runs a shell script on my server to git pull, build, deploy, and call a cronitor.io hook for monitoring deploy success.I've been pretty happy with how relatively simple it is and how well it works. I've been pretty happy with how relatively simple it is and how well it works. 
reply

 
reply

 Love the focus on being lightweightRecently I wanted to create a super basic website, and discovered it’s actually pretty hard to create something simpleAnd then, even if you manage to create something actually simple, you usually end up having to manage some not so simple deployment process together with hopefully some sort of version controlEnded up settling for putting plain html/css/js files in a git repo, then configuring auto deploy to GitHub Pages on merge to master (via Actions) Recently I wanted to create a super basic website, and discovered it’s actually pretty hard to create something simpleAnd then, even if you manage to create something actually simple, you usually end up having to manage some not so simple deployment process together with hopefully some sort of version controlEnded up settling for putting plain html/css/js files in a git repo, then configuring auto deploy to GitHub Pages on merge to master (via Actions) And then, even if you manage to create something actually simple, you usually end up having to manage some not so simple deployment process together with hopefully some sort of version controlEnded up settling for putting plain html/css/js files in a git repo, then configuring auto deploy to GitHub Pages on merge to master (via Actions) Ended up settling for putting plain html/css/js files in a git repo, then configuring auto deploy to GitHub Pages on merge to master (via Actions) 
reply

 
reply

 Yes, ftp is pretty easy for static sites. However, given I want to have version control, it’s nice to have automated deploys happen after a git push 
reply

 
reply

 But uwsgi performance overhead is a concern. Altough last time I've done anything with uwsgi that was probably over a decade ago.And last time I checked, Go required to import the uwsgi package, maybe not anymore?
Or is uwsgi used only for Python here?Also I wonder how to define nginx routes aka locations? And last time I checked, Go required to import the uwsgi package, maybe not anymore?
Or is uwsgi used only for Python here?Also I wonder how to define nginx routes aka locations? Also I wonder how to define nginx routes aka locations? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Also, what is the localdev UX like? With Docker Swarm I can easily run very similar setups in dev, test and prod, and it works with multi-node setups, has support for secrets etc. But the lack of work going into Docker Swarm becomes more concerning as the years pass by.Also, had no idea systemd-proxy was a thing - is there anything systemd doesn't have its tentacles into? :) Also, had no idea systemd-proxy was a thing - is there anything systemd doesn't have its tentacles into? :) 
reply

 It's not designed to work on local envs. When I wanted to debug infra I used to run it on Vagrant though 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Looking at you sir mixalot:https://youtu.be/wKfMZOR8eWI?t=31 https://youtu.be/wKfMZOR8eWI?t=31 
reply

 
reply

 
reply

 This afaik is missing from most PaaS tools (CapRover excluded, but it has been illegally relicensed to non-open-source).  Perhaps watchtower or something could replace the functionality? 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 ""CapRover has built in anonymous usage analytics starting v1.11""https://github.com/caprover/caprover/blob/master/TERMS_AND_C...https://github.com/caprover/caprover/issues/1852Was looking at CapRover to see if it has REST APILooks shaddy https://github.com/caprover/caprover/blob/master/TERMS_AND_C...https://github.com/caprover/caprover/issues/1852Was looking at CapRover to see if it has REST APILooks shaddy https://github.com/caprover/caprover/issues/1852Was looking at CapRover to see if it has REST APILooks shaddy Was looking at CapRover to see if it has REST APILooks shaddy Looks shaddy 
reply

 
reply

 I’m thinking of forking it and adding all his dumb and easy table stakes features (2fa etc) that he is trying to gate as subscriptionware. 
reply

 
reply

 
reply

 Off the top of my head I know ofcoolify
dokku
kamaland now piku coolify
dokku
kamaland now piku and now piku 
reply

 
reply

 
reply

 You can use docker run commands, but that’s not the main goal. 
reply

 
reply

 
reply

 
reply

 piku itself is neat and I like it. 
reply

 I actually only install piku via cloud-init, but there are plenty more options: https://piku.github.io/install/index.html 
reply

 
reply

 
reply

 

 > echo ""Downloading piku-bootstrap here.""> curl -s https://raw.githubusercontent.com/piku/piku-bootstrap/master... > piku-bootstrap> chmod 755 piku-bootstrap> echo ""Now you can install Piku on `hostname` like this:""> echo ""./piku-bootstrap install""Did you look at the script? > curl -s https://raw.githubusercontent.com/piku/piku-bootstrap/master... > piku-bootstrap> chmod 755 piku-bootstrap> echo ""Now you can install Piku on `hostname` like this:""> echo ""./piku-bootstrap install""Did you look at the script? > chmod 755 piku-bootstrap> echo ""Now you can install Piku on `hostname` like this:""> echo ""./piku-bootstrap install""Did you look at the script? > echo ""Now you can install Piku on `hostname` like this:""> echo ""./piku-bootstrap install""Did you look at the script? > echo ""./piku-bootstrap install""Did you look at the script? Did you look at the script? 
reply

     PUBLIC_KEY_FINGERPRINT='SHA256:KnownPublicKeyFingerprintHere'
    git clone 'https://github.com/piku/piku-bootstrap' 'piku-bootstrap' && \
    cd 'piku-bootstrap' && \
    (git verify-commit $(git log -1 --pretty='format:%H' -- README.md) | grep 'Good ""git"" signature with ED25519 key '""${PUBLIC_KEY_FINGERPRINT}"") && \
    (git verify-commit 'HEAD' | grep 'Good ""git"" signature with ED25519 key '""${PUBLIC_KEY_FINGERPRINT}"") && \
    ./whatever-command-from-this-repo

(EDIT: Feel free to clean it up a bit, adding other variables to make it a bit more readable, etc.)From the user's POV it's the same thing: copy from somewhere, paste into terminal, press enter. But now you're trusting two fewer places:- piku.github.io (the deployed version)- github.com/piku/piku.github.io (the source code that supposedly generates the deployed version)I'm not saying to do exactly these steps, and they are not perfect anyway (you're still trusting a `git clone` before even doing any kind of verification), but at least you're not YOLOing[1] without first doing some minimum verification of integrity before something is executed, so you know at least the first installation step has not been tampered with[2][3].The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. From the user's POV it's the same thing: copy from somewhere, paste into terminal, press enter. But now you're trusting two fewer places:- piku.github.io (the deployed version)- github.com/piku/piku.github.io (the source code that supposedly generates the deployed version)I'm not saying to do exactly these steps, and they are not perfect anyway (you're still trusting a `git clone` before even doing any kind of verification), but at least you're not YOLOing[1] without first doing some minimum verification of integrity before something is executed, so you know at least the first installation step has not been tampered with[2][3].The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. - piku.github.io (the deployed version)- github.com/piku/piku.github.io (the source code that supposedly generates the deployed version)I'm not saying to do exactly these steps, and they are not perfect anyway (you're still trusting a `git clone` before even doing any kind of verification), but at least you're not YOLOing[1] without first doing some minimum verification of integrity before something is executed, so you know at least the first installation step has not been tampered with[2][3].The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. - github.com/piku/piku.github.io (the source code that supposedly generates the deployed version)I'm not saying to do exactly these steps, and they are not perfect anyway (you're still trusting a `git clone` before even doing any kind of verification), but at least you're not YOLOing[1] without first doing some minimum verification of integrity before something is executed, so you know at least the first installation step has not been tampered with[2][3].The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. I'm not saying to do exactly these steps, and they are not perfect anyway (you're still trusting a `git clone` before even doing any kind of verification), but at least you're not YOLOing[1] without first doing some minimum verification of integrity before something is executed, so you know at least the first installation step has not been tampered with[2][3].The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. The git repos don't have commit signatures, and the verification doesn't have to use specifically those kind of signatures (could be a minisign public key hosted somewhere), but you get the point.The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. The updates are also a `git pull`, meaning, if the commits were signed, and the installation copy-pasta (or script) included a step that added the author's public key to the allowed signers file (TOFU-style), e.g. with a `curl` to the author's GitHub's keys URL, then `git pull --verify-signatures` could check new commits against the already-known key, and automatically warn about any changes so the user could decide if trust the new key or not. Stuff like that.[1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. [1]: Nowadays, saying ""install with `curl | sh`, but you can also do install these other ways"", is equivalent to saying ""verify integrity with `md5sum`, but you can also check this other file if you want to see other hashes""; technically correct, but if the installation instructions already contain questionable defaults, it makes me question what other questionable defaults are in the actual code.[2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. [2]: ""Has not been tampered with"" as in ""the last modification of `README.md` and the most recent commit are signed with the same key"". Not perfect, but it's not YOLO.[3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. [3]: Emphasis on ""first installation step"". Obviously anything that happens after that simple sanity check would need more scrutiny in case the author tries to run unsigned/unverified code in one of the next steps. 
reply

 it's the culture it attracts/creates when you start with this.and while i didn't look at the script for the reason above, i did look at the site and found no high level or architecture designs links.good luck basing, even your dev, infrastructure on things like this. and while i didn't look at the script for the reason above, i did look at the site and found no high level or architecture designs links.good luck basing, even your dev, infrastructure on things like this. good luck basing, even your dev, infrastructure on things like this. 
reply

 
reply

 ——-There are 3 main ways to install piku on a server:Use piku-bootstrap to do it if your server is already provisioned (that is what the TL;DR command does)Use cloud-init to do it automatically at VPS build time (see the cloud-init repository, which has examples for most common cloud providers)Manually: Follow the guide below or one of the platform-specfic guides.———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) There are 3 main ways to install piku on a server:Use piku-bootstrap to do it if your server is already provisioned (that is what the TL;DR command does)Use cloud-init to do it automatically at VPS build time (see the cloud-init repository, which has examples for most common cloud providers)Manually: Follow the guide below or one of the platform-specfic guides.———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) Use piku-bootstrap to do it if your server is already provisioned (that is what the TL;DR command does)Use cloud-init to do it automatically at VPS build time (see the cloud-init repository, which has examples for most common cloud providers)Manually: Follow the guide below or one of the platform-specfic guides.———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) Use cloud-init to do it automatically at VPS build time (see the cloud-init repository, which has examples for most common cloud providers)Manually: Follow the guide below or one of the platform-specfic guides.———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) Manually: Follow the guide below or one of the platform-specfic guides.———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) ———(I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) (I do all my deployments using cloud-init, where you can even inline piku.py into the manifest if you want to—-and we have separate repos to demonstrate that) 
reply

 I always do a mental `exit 1´ upon encountering `curl | sh´. It's just a good practice. 
reply

 
reply

 
reply

 Which leaves me the same number of questions.So, what is Platform as a Service? So, what is Platform as a Service? 
reply

 A ""Platform,"" in the context of IT and software (and especially the internet), is some IT infrastructure, generally a server and the software installed on it, that you can host something on, such as an app or a website.A ""Platform as a Service"" is when someone else sets up your platform for you so that you don't have to do it yourself—you get access to the platform and can use it for your own stuff, but don't have to configure or maintain most of it. A ""Platform as a Service"" is when someone else sets up your platform for you so that you don't have to do it yourself—you get access to the platform and can use it for your own stuff, but don't have to configure or maintain most of it. 
reply

 
reply

 
reply

 If the person setting it up is aware of the potential pitfalls and has a good explanation for the process - particularly if there is no build step involved and secrets are managed appropriately, then it can be fine. 
reply

 
reply

 
reply

 
reply

"
31,fileformat,Effect – Build robust apps in TypeScript | Hacker News,https://news.ycombinator.com/item?id=40682149,,2024-06-15T05:47:01Z,"It's great for workflows with clear points in the logic where things should happen and it provides more sophisticated (i.e. powerful but harder to master) tools like Fibers and Streams which allow you to reason about failure cases of reactive asynchronous operations.  In many cases it offers a clear path out of callback-hell that is more reliable than promises and async/await.However while the Effect-ts docs are getting better and may be ok for people with a good knowledge of functional programming and Typescript, they are nowhere near the quality they need to be for those who don't.  People looking for examples online will get frustrated because Effect API churn over the past three years has made many old posts and articles obsolete.  Old github repos won't work out of the box.  And you better be comfortable with codemods if you haven't frozen your Effect-ts version.Fortunately the Effect-ts Discord channel is full of friendly and helpful people and the Effect team provides high quality assistance to people who ask for it.  It makes me sad this treasure trove of information is trapped in Discord where search is of little value.A good book or collection of high quality examples of how to use Effect-ts with de-facto standard frameworks like React could help its adoption grow significantly. However while the Effect-ts docs are getting better and may be ok for people with a good knowledge of functional programming and Typescript, they are nowhere near the quality they need to be for those who don't.  People looking for examples online will get frustrated because Effect API churn over the past three years has made many old posts and articles obsolete.  Old github repos won't work out of the box.  And you better be comfortable with codemods if you haven't frozen your Effect-ts version.Fortunately the Effect-ts Discord channel is full of friendly and helpful people and the Effect team provides high quality assistance to people who ask for it.  It makes me sad this treasure trove of information is trapped in Discord where search is of little value.A good book or collection of high quality examples of how to use Effect-ts with de-facto standard frameworks like React could help its adoption grow significantly. Fortunately the Effect-ts Discord channel is full of friendly and helpful people and the Effect team provides high quality assistance to people who ask for it.  It makes me sad this treasure trove of information is trapped in Discord where search is of little value.A good book or collection of high quality examples of how to use Effect-ts with de-facto standard frameworks like React could help its adoption grow significantly. A good book or collection of high quality examples of how to use Effect-ts with de-facto standard frameworks like React could help its adoption grow significantly. 
reply

 
reply

 That said, the person who built the ZIO project which inspired Effect-ts is now working on an exciting project called Golem Cloud¹ which aims to provide durable and reliable location-transparent execution of Wasm programs.Mike Stonebraker's DBOS² looks to provide something similar for Typescript.¹ https://github.com/golemcloud² https://www.dbos.dev Mike Stonebraker's DBOS² looks to provide something similar for Typescript.¹ https://github.com/golemcloud² https://www.dbos.dev ¹ https://github.com/golemcloud² https://www.dbos.dev ² https://www.dbos.dev 
reply

 
reply

 Study after study shows that many evaluations of LLMs are deceptive because they evaluate them on questions that were answered in the training set.  On the other hand,  this is exactly why they can do so well on medical board exams because you don't learn to pass the medical board by predicting what medical treatments should work according to first principles but instead by remembering which medical treatments have been proven to work.For that matter I've long wanted a conventional search engine which can be specialized for a particular software project I am working on:  for instance I might be using JDK 17 and JooQ version 3.15 and I only want to search those versions of docs.  It shouldn't be hard to look at the POM file to figure these versions out.  I have the exact same problem with Javascript where I have to work with code that uses different versions of react-router,  bootstrap,  MUI, etc.  The idea LLM coding assistant should do the same. For that matter I've long wanted a conventional search engine which can be specialized for a particular software project I am working on:  for instance I might be using JDK 17 and JooQ version 3.15 and I only want to search those versions of docs.  It shouldn't be hard to look at the POM file to figure these versions out.  I have the exact same problem with Javascript where I have to work with code that uses different versions of react-router,  bootstrap,  MUI, etc.  The idea LLM coding assistant should do the same. 
reply

 > Write me JS code that generates a random list of 10 prime numbers, takes the sine of each (as radians), then takes the cosine of each of those values (as degrees) and then adds 5 to each valueI assure you, this task is not on Stackoverflow (because nobody would ever be deranged enough to want to do this) but GPT 4o could do it!Admittedly, this shows only a very rudimentary reasoning ability but it demonstrates some. The idea that LLMs are just a slight evolution of search indexes is demonstrably false. I assure you, this task is not on Stackoverflow (because nobody would ever be deranged enough to want to do this) but GPT 4o could do it!Admittedly, this shows only a very rudimentary reasoning ability but it demonstrates some. The idea that LLMs are just a slight evolution of search indexes is demonstrably false. Admittedly, this shows only a very rudimentary reasoning ability but it demonstrates some. The idea that LLMs are just a slight evolution of search indexes is demonstrably false. 
reply

 
reply

 In a hard programming problem,  for instance,  you have a number of actions that have to take place in a certain dependency order that you could resolve by topological sort,  but in a problem like the above one bit of English corresponds to one bit of Python in basically the same order.  Similarly if it couldn't translate    take the sine of...

to    Math.sin(x)

because the language didn't already have a sin function it would have to code one up.  Similarly,  translating between Chinese and English isn't really that hard because it is mostly a linear problem,  people will accept some errors,  and it's a bit of an ill-defined problem anyway.  (Who's going to be mad if one word out of 50 is wrong whereas getting one word wrong in a program could mean it doesn't compile and delivers zero value?)LLMs can do a bit of generalization beyond full text search,  but people really underestimate how much they fake reasoning by using memory and generalization and how asking them problems that aren't structurally close to problems in the training set reveals their weakness.  Studies show that LLMs aren't robust at all to the changes in the order of parts of problems,  for instance.The biggest problem people have reasoning about ChatGPT is that they seem to have a strong psychological need to credit it with more intelligence than it has the same way we're inclined to see a face inside a cut stem.  It can do an awful lot, but it cheats pervasively and if you don't let it cheat it doesn't seem as smart anymore.     take the sine of...

to    Math.sin(x)

because the language didn't already have a sin function it would have to code one up.  Similarly,  translating between Chinese and English isn't really that hard because it is mostly a linear problem,  people will accept some errors,  and it's a bit of an ill-defined problem anyway.  (Who's going to be mad if one word out of 50 is wrong whereas getting one word wrong in a program could mean it doesn't compile and delivers zero value?)LLMs can do a bit of generalization beyond full text search,  but people really underestimate how much they fake reasoning by using memory and generalization and how asking them problems that aren't structurally close to problems in the training set reveals their weakness.  Studies show that LLMs aren't robust at all to the changes in the order of parts of problems,  for instance.The biggest problem people have reasoning about ChatGPT is that they seem to have a strong psychological need to credit it with more intelligence than it has the same way we're inclined to see a face inside a cut stem.  It can do an awful lot, but it cheats pervasively and if you don't let it cheat it doesn't seem as smart anymore.     Math.sin(x)

because the language didn't already have a sin function it would have to code one up.  Similarly,  translating between Chinese and English isn't really that hard because it is mostly a linear problem,  people will accept some errors,  and it's a bit of an ill-defined problem anyway.  (Who's going to be mad if one word out of 50 is wrong whereas getting one word wrong in a program could mean it doesn't compile and delivers zero value?)LLMs can do a bit of generalization beyond full text search,  but people really underestimate how much they fake reasoning by using memory and generalization and how asking them problems that aren't structurally close to problems in the training set reveals their weakness.  Studies show that LLMs aren't robust at all to the changes in the order of parts of problems,  for instance.The biggest problem people have reasoning about ChatGPT is that they seem to have a strong psychological need to credit it with more intelligence than it has the same way we're inclined to see a face inside a cut stem.  It can do an awful lot, but it cheats pervasively and if you don't let it cheat it doesn't seem as smart anymore. LLMs can do a bit of generalization beyond full text search,  but people really underestimate how much they fake reasoning by using memory and generalization and how asking them problems that aren't structurally close to problems in the training set reveals their weakness.  Studies show that LLMs aren't robust at all to the changes in the order of parts of problems,  for instance.The biggest problem people have reasoning about ChatGPT is that they seem to have a strong psychological need to credit it with more intelligence than it has the same way we're inclined to see a face inside a cut stem.  It can do an awful lot, but it cheats pervasively and if you don't let it cheat it doesn't seem as smart anymore. The biggest problem people have reasoning about ChatGPT is that they seem to have a strong psychological need to credit it with more intelligence than it has the same way we're inclined to see a face inside a cut stem.  It can do an awful lot, but it cheats pervasively and if you don't let it cheat it doesn't seem as smart anymore. 
reply

 1. A way to have strongly-typed errors2. A standard library, like a better HTTP library and better concurrency primitives.I'm not particularly sold on 1) in isolation. If you want strongly typed errors, you can use vanilla TS: just use `type Result<T> = { type: 'result'; data: T } | { type: 'error'; message: string }` as a return type and you're basically there, modulo an if statement on the calling side.On the other hand, 2) seems a bit more compelling. I do think it's true that JS could use a better standard library. But the cost of the standard library is that I now have to write my code in this extremely unusual way, and that seems like a bit too high of a cost to me. Effect.forEach (instead of for...of), Effect.runPromise (instead of await), Effect.andThen (instead of... nothing?) have, to my eyes, significant penalties in readability, debuggability and maintainability. 2. A standard library, like a better HTTP library and better concurrency primitives.I'm not particularly sold on 1) in isolation. If you want strongly typed errors, you can use vanilla TS: just use `type Result<T> = { type: 'result'; data: T } | { type: 'error'; message: string }` as a return type and you're basically there, modulo an if statement on the calling side.On the other hand, 2) seems a bit more compelling. I do think it's true that JS could use a better standard library. But the cost of the standard library is that I now have to write my code in this extremely unusual way, and that seems like a bit too high of a cost to me. Effect.forEach (instead of for...of), Effect.runPromise (instead of await), Effect.andThen (instead of... nothing?) have, to my eyes, significant penalties in readability, debuggability and maintainability. I'm not particularly sold on 1) in isolation. If you want strongly typed errors, you can use vanilla TS: just use `type Result<T> = { type: 'result'; data: T } | { type: 'error'; message: string }` as a return type and you're basically there, modulo an if statement on the calling side.On the other hand, 2) seems a bit more compelling. I do think it's true that JS could use a better standard library. But the cost of the standard library is that I now have to write my code in this extremely unusual way, and that seems like a bit too high of a cost to me. Effect.forEach (instead of for...of), Effect.runPromise (instead of await), Effect.andThen (instead of... nothing?) have, to my eyes, significant penalties in readability, debuggability and maintainability. On the other hand, 2) seems a bit more compelling. I do think it's true that JS could use a better standard library. But the cost of the standard library is that I now have to write my code in this extremely unusual way, and that seems like a bit too high of a cost to me. Effect.forEach (instead of for...of), Effect.runPromise (instead of await), Effect.andThen (instead of... nothing?) have, to my eyes, significant penalties in readability, debuggability and maintainability. 
reply

 I agree that a wrapper around generators is nice if it suits the situation (like async/await), and abstracting them is useful at times, but I’m not sure I’d want to pull in an entire library for it.One thing, the Effect.runPromise and similar methods which seem like overkill are probably providing quite a bit more utility and reliability than it appears. It might offer good cleanup guarantees as well.I should add that this is the equivalent of a hot take. If I looked closer I’m sure I’d change my mind, but I’m old and crotchety like you. One thing, the Effect.runPromise and similar methods which seem like overkill are probably providing quite a bit more utility and reliability than it appears. It might offer good cleanup guarantees as well.I should add that this is the equivalent of a hot take. If I looked closer I’m sure I’d change my mind, but I’m old and crotchety like you. I should add that this is the equivalent of a hot take. If I looked closer I’m sure I’d change my mind, but I’m old and crotchety like you. 
reply

 This doesn't feel like a pipe, the pipe is mixing data pipeline operations with declarative configuration reusing the original operation, almost like the Config Builder pattern. Nothing wrong with that in itself, except it's obscured by calling it a pipe.What will be retried anyway? The last step in the pipeline or the whole pipeline? Do you really want to retry a json decode or 4xx client side error? Ignoring this makes for a nice front page demo of short code, but when you start considering real scenarios, some of the same complexities of the vanilla ts version eventually creep up. The question is, do you want to solve those with straightforward, yet slightly more verbose, ts code, or by learning all the edge cases of the library.If you are looking for something similar to only handle the difficulty of error and retry handling related to fetch, and are ok with being tied to React concepts, i can recommend TanStack Query instead. Thanks to the reactive nature, you just need to configure a query object, which then only returns data to you and re-renders when it is valid. Good stuff. What will be retried anyway? The last step in the pipeline or the whole pipeline? Do you really want to retry a json decode or 4xx client side error? Ignoring this makes for a nice front page demo of short code, but when you start considering real scenarios, some of the same complexities of the vanilla ts version eventually creep up. The question is, do you want to solve those with straightforward, yet slightly more verbose, ts code, or by learning all the edge cases of the library.If you are looking for something similar to only handle the difficulty of error and retry handling related to fetch, and are ok with being tied to React concepts, i can recommend TanStack Query instead. Thanks to the reactive nature, you just need to configure a query object, which then only returns data to you and re-renders when it is valid. Good stuff. If you are looking for something similar to only handle the difficulty of error and retry handling related to fetch, and are ok with being tied to React concepts, i can recommend TanStack Query instead. Thanks to the reactive nature, you just need to configure a query object, which then only returns data to you and re-renders when it is valid. Good stuff. 
reply

 The huge advantage is Typescript obviously, a much more popular language to spread the same ideas.I've been happily using the effect ecosystem for years and can't but say I am super happy to do so.It does require some patience to learn and it's not really super friendly to people that never really took the time to learn typescript, but if you did it's such a pleasure to write code for Node/Demo/Browser/Workers. I've been happily using the effect ecosystem for years and can't but say I am super happy to do so.It does require some patience to learn and it's not really super friendly to people that never really took the time to learn typescript, but if you did it's such a pleasure to write code for Node/Demo/Browser/Workers. It does require some patience to learn and it's not really super friendly to people that never really took the time to learn typescript, but if you did it's such a pleasure to write code for Node/Demo/Browser/Workers. 
reply

 This website should probably start with this. Instead it’s a bunch of like, modern synergy-ese. 
reply

 
reply

 How does EffectTS improve upon that? 
reply

 Seems like it's mostly trying do similar things to what Haskell or StandardML does, but in Typescript. 
reply

 With Effect (and ideas like it), you can treat error conditions as normal expressions, without special control flow. You can reason about the error conditions the same way you reason about the successful data flow. You can treat your own Error subclasses just like any other value type, with the same kind of conditional logic in the same flow. And you can do that without looking deeper into the call stack to understand where errors come from, because errors flow exactly where values flow.Because errors and values are in the same flow, you can compose things in ways you couldn’t (or at least wouldn’t typically) with separate error control flow. You can build complex logic by composing simpler fundamentals, in a way that’s more declarative and self-documenting. Your error instanceof checks can be combined with map/filter/whatever else just like you might use with success values, and they can be mixed so that recoverable error conditions are expressed even more like success conditions.If you’re into types, all of the same benefits apply at the type system level. You don’t have to care about types to enjoy these benefits. If you don’t care now but embrace types in the future, you’ll just get more of the same benefits in that hypothetical future. Because errors and values are in the same flow, you can compose things in ways you couldn’t (or at least wouldn’t typically) with separate error control flow. You can build complex logic by composing simpler fundamentals, in a way that’s more declarative and self-documenting. Your error instanceof checks can be combined with map/filter/whatever else just like you might use with success values, and they can be mixed so that recoverable error conditions are expressed even more like success conditions.If you’re into types, all of the same benefits apply at the type system level. You don’t have to care about types to enjoy these benefits. If you don’t care now but embrace types in the future, you’ll just get more of the same benefits in that hypothetical future. If you’re into types, all of the same benefits apply at the type system level. You don’t have to care about types to enjoy these benefits. If you don’t care now but embrace types in the future, you’ll just get more of the same benefits in that hypothetical future. 
reply

 
reply

 (Sum-)Types would of course be helpful in making it clear that the function can sometimes return an instance of some specific Error-subclasses of course.Now I assume I could do something like that in plain TypeScript also, return error-instances of different error-subclasses and declare them to be possible return-types, and then handle them in the caller or its callers somehow.Anybody getting the error-result could not pass it or return it to anybody else whose type does not expect an error-instance.Is there something even better with EffectsTS? Now I assume I could do something like that in plain TypeScript also, return error-instances of different error-subclasses and declare them to be possible return-types, and then handle them in the caller or its callers somehow.Anybody getting the error-result could not pass it or return it to anybody else whose type does not expect an error-instance.Is there something even better with EffectsTS? Anybody getting the error-result could not pass it or return it to anybody else whose type does not expect an error-instance.Is there something even better with EffectsTS? Is there something even better with EffectsTS? 
reply

 It's often said that checked exceptions are the worst mistake in Java and I believe that.To be specific consider the case of a class that implements FetchSomeData which fetches some data (could just as well be a function with parameters encoded inside it as a closure) which could come from many sources such as   * hard coded in the class
   * read from a file
   * fetched via http
   * fetched from Postgresql or CouchDB or ...

the one thing these have in common is they can fail in very different ways.  If you want to take encapsulation seriously here the right way to do it is to expose certain semantics of the error such as   * Could the user avoid this problem by changing their inputs?
   * What do we tell the end user?  What do we tell the sysadmin?
   * Is it likely that this problem will clear up if we retry the request in five minutes?
   * Is attempting to use this object likely to cause worsening data corruption

and such.  In Java we get the very week beer of people creating a large number of exceptions like FailureinSubsystemSeventeenException and sprinking thousands of methods with throws clauses and doing a lot of error-prone catching and rethrowing to please the compiler but if you really are serious about error handling you know you could get a RuntimeException because something wrote a[15] on an array that has only 12 elements and you still need to catch those anyway.So far systems that use something like Either[Result|Exception] aren't based on an ontology of failure but my experience is that code written like that tends to have the same problems you have with checked exceptions:  harried by the compiler people often omit error handling code to the maximum extent that they can.  From working with both kinds of code bases I'd say that code bases worked on exceptions have the glass half full and handle errors properly more than they do improperly,  these monad-based systems are the other way around. To be specific consider the case of a class that implements FetchSomeData which fetches some data (could just as well be a function with parameters encoded inside it as a closure) which could come from many sources such as   * hard coded in the class
   * read from a file
   * fetched via http
   * fetched from Postgresql or CouchDB or ...

the one thing these have in common is they can fail in very different ways.  If you want to take encapsulation seriously here the right way to do it is to expose certain semantics of the error such as   * Could the user avoid this problem by changing their inputs?
   * What do we tell the end user?  What do we tell the sysadmin?
   * Is it likely that this problem will clear up if we retry the request in five minutes?
   * Is attempting to use this object likely to cause worsening data corruption

and such.  In Java we get the very week beer of people creating a large number of exceptions like FailureinSubsystemSeventeenException and sprinking thousands of methods with throws clauses and doing a lot of error-prone catching and rethrowing to please the compiler but if you really are serious about error handling you know you could get a RuntimeException because something wrote a[15] on an array that has only 12 elements and you still need to catch those anyway.So far systems that use something like Either[Result|Exception] aren't based on an ontology of failure but my experience is that code written like that tends to have the same problems you have with checked exceptions:  harried by the compiler people often omit error handling code to the maximum extent that they can.  From working with both kinds of code bases I'd say that code bases worked on exceptions have the glass half full and handle errors properly more than they do improperly,  these monad-based systems are the other way around.    * hard coded in the class
   * read from a file
   * fetched via http
   * fetched from Postgresql or CouchDB or ...

the one thing these have in common is they can fail in very different ways.  If you want to take encapsulation seriously here the right way to do it is to expose certain semantics of the error such as   * Could the user avoid this problem by changing their inputs?
   * What do we tell the end user?  What do we tell the sysadmin?
   * Is it likely that this problem will clear up if we retry the request in five minutes?
   * Is attempting to use this object likely to cause worsening data corruption

and such.  In Java we get the very week beer of people creating a large number of exceptions like FailureinSubsystemSeventeenException and sprinking thousands of methods with throws clauses and doing a lot of error-prone catching and rethrowing to please the compiler but if you really are serious about error handling you know you could get a RuntimeException because something wrote a[15] on an array that has only 12 elements and you still need to catch those anyway.So far systems that use something like Either[Result|Exception] aren't based on an ontology of failure but my experience is that code written like that tends to have the same problems you have with checked exceptions:  harried by the compiler people often omit error handling code to the maximum extent that they can.  From working with both kinds of code bases I'd say that code bases worked on exceptions have the glass half full and handle errors properly more than they do improperly,  these monad-based systems are the other way around.    * Could the user avoid this problem by changing their inputs?
   * What do we tell the end user?  What do we tell the sysadmin?
   * Is it likely that this problem will clear up if we retry the request in five minutes?
   * Is attempting to use this object likely to cause worsening data corruption

and such.  In Java we get the very week beer of people creating a large number of exceptions like FailureinSubsystemSeventeenException and sprinking thousands of methods with throws clauses and doing a lot of error-prone catching and rethrowing to please the compiler but if you really are serious about error handling you know you could get a RuntimeException because something wrote a[15] on an array that has only 12 elements and you still need to catch those anyway.So far systems that use something like Either[Result|Exception] aren't based on an ontology of failure but my experience is that code written like that tends to have the same problems you have with checked exceptions:  harried by the compiler people often omit error handling code to the maximum extent that they can.  From working with both kinds of code bases I'd say that code bases worked on exceptions have the glass half full and handle errors properly more than they do improperly,  these monad-based systems are the other way around. So far systems that use something like Either[Result|Exception] aren't based on an ontology of failure but my experience is that code written like that tends to have the same problems you have with checked exceptions:  harried by the compiler people often omit error handling code to the maximum extent that they can.  From working with both kinds of code bases I'd say that code bases worked on exceptions have the glass half full and handle errors properly more than they do improperly,  these monad-based systems are the other way around. 
reply

 Java has poor ergonomics for these, and in my opinion languages like Rust have better ones and that's why they manage with Results. 
reply

 Otherwise your code is just littered with try/catch/throw new RuntimeException(ex). 
reply

 
reply

 
reply

 https://postimg.cc/sBQB37h6There's lots to Effect beyond error handling, I can imagine it can seem a bit overwhelming.The great thing is that you can cherry pick what you need. There's lots to Effect beyond error handling, I can imagine it can seem a bit overwhelming.The great thing is that you can cherry pick what you need. The great thing is that you can cherry pick what you need. 
reply

 
reply

 Concurrency, runtime, tracked errors, functional composition, dependency injection, etc there's lots of problems that the ecosystem solves.It's hard to say which of these features is particularly more important. It's hard to say which of these features is particularly more important. 
reply

 
reply

 
reply

 I recently started a company and was tempted to use Effect as I felt I would be able to build faster and higher quality than Standard TypeScript, but decided against it since I felt that I would pay the price when it came to grow the team. So far the decision has paid off.I did indulge myself a little bit though and do make heavy use of remeda and ts-pattern across my code. I did indulge myself a little bit though and do make heavy use of remeda and ts-pattern across my code. 
reply

 
reply

 I also am a bit weirded out by the Effect.Effect<unknown, HttpClientError>. . . What is unknown? 
reply

 This is not ""normie"" TypeScript but I wouldn't characterize it as particularly scary. 
reply

 
reply

 Given the goal of effect is to provide type safe tracking of a codebase; having an any breaks that assumption, while unknown forces you to add validation to keep it type safe.1. https://github.com/Effect-TS/effect/blob/main/packages/schem... 1. https://github.com/Effect-TS/effect/blob/main/packages/schem... 
reply

 
reply

 If your project, as a whole, benefits heavily from a functional style of programming, you are likely better off using one of the many functional programming languages that compile to JavaScript, like ReScript, OCaml, F#, or Scala. 
reply

 
reply

 Repl is often sufficient, but not in cases where you need to pass some convoluted data as input. 
reply

 
reply

 1. You don’t have breakpoints, your code doesn’t run. Your code is the thing that configures the code that runs. Your code is descriptive.2. Nothing unexpected can happen. That’s the point of pure functions and a strong type system. You don’t need to know the exact values that flow through at runtime to know that your code functions as written.Granted, if you write code that doesn’t make sense then it will produce* results that don’t make sense. If you don’t fully understand the problem you’re trying to solve no programming paradigm can save you from creating bugs. 2. Nothing unexpected can happen. That’s the point of pure functions and a strong type system. You don’t need to know the exact values that flow through at runtime to know that your code functions as written.Granted, if you write code that doesn’t make sense then it will produce* results that don’t make sense. If you don’t fully understand the problem you’re trying to solve no programming paradigm can save you from creating bugs. Granted, if you write code that doesn’t make sense then it will produce* results that don’t make sense. If you don’t fully understand the problem you’re trying to solve no programming paradigm can save you from creating bugs. 
reply

 
reply

   Http.request.get(`/todos/${id}`).pipe(
      Http.client.fetchOk,
      Http.response.json,
    ) 
reply

 
reply

 
reply

 Or do you need to figure out what is the place in your original unprocessed source-code that corresponds to the code you see in the debugger, and then switch from the debugger to edit the original file and then rebuild and rerun everything and see if that fixes the problem?I wonder if that is a solved problem in plain TypeScript either? I wonder if that is a solved problem in plain TypeScript either? 
reply

 
reply

 
reply

 This is appealing in the first half of your bell curve. You have to recover from it a few times and start writing code. 
reply

 (Please do not reply with ""I found RxJS easy"". Good for you.) 
reply

 Took it to the RxJS discord after a couple days of pounding my head on it. One of the creators was there and was super helpful.We went back and forth on the problem at least 6 times each, with new attempts. He tried quite a few variations, but none ever worked. We went back and forth on the problem at least 6 times each, with new attempts. He tried quite a few variations, but none ever worked. 
reply

 What about ""what makes it hard""? I've never tried RxJS before, so I'm curious to know where the learning curve is. 
reply

 
reply

 Throwing functions in Swift don't throw traditional exceptions (please someone up the stack catch this). Throwing an error in Swift actually returns an Error to the calling function instead of that function's normal result type. Swift also enforces that when you call code that might ""throw"" (return an error instead of a result) you either handle the error or ""rethrow"" it.In TS I use this pattern:`type ErrorThrowingFunction = <T,>() => T|Error`But it's not nearly as nice to use in TS since it's not a language feature. In TS I use this pattern:`type ErrorThrowingFunction = <T,>() => T|Error`But it's not nearly as nice to use in TS since it's not a language feature. `type ErrorThrowingFunction = <T,>() => T|Error`But it's not nearly as nice to use in TS since it's not a language feature. But it's not nearly as nice to use in TS since it's not a language feature. 
reply

 > If you're on drugs, check out Effect.loop. Someone smart asked ""How can we make a for loop deterministic and palatable to Functional Programmers?"" they then smoked crack and did a good job.https://www.linkedin.com/pulse/quick-thoughts-effect-ts-jess...The review is discursive & dense; I wish we saw more hot take rampages through codebases like this. https://www.linkedin.com/pulse/quick-thoughts-effect-ts-jess...The review is discursive & dense; I wish we saw more hot take rampages through codebases like this. The review is discursive & dense; I wish we saw more hot take rampages through codebases like this. 
reply

 The section on ""without effect"" and ""with effect"" is intriguing and makes me want to dig in more.I used to be of the opinion that things should just stand on their own but lately I've accepted the fact that the hind brain visual appeal is important. I used to be of the opinion that things should just stand on their own but lately I've accepted the fact that the hind brain visual appeal is important. 
reply

 
reply

 Stream processing of data is nicer using a declarative approach. Though I've found that describing control flow is often more intuitive using an imperative approach. It's a shame that redux-saga got tied to react/redux, because the idea of generators and declarative effects are universal - useful on both backend and frontend. 
reply

 
reply

 Schema is a more advanced library though that goes beyond parsing, it supports both encoding and decoding, also supports more complex types.Check the docs of effect/schema to get a taste. Check the docs of effect/schema to get a taste. 
reply

 
reply

 
reply

 The fp-ts author is also an effect maintainer and recommends effect for new projects. fp-ts is not dead, but it's core goals (providing Haskell/PureScript-like types and type classes) have been mostly achieved.Effect is an ecosystem with different goals from fp-ts. Effect is an ecosystem with different goals from fp-ts. 
reply

 
reply

 
reply

 
reply

   import { Effect } from ""effect""
 
  // Get the current timestamp
  const now = Effect.sync(() => new Date().getTime())

  // Prints the elapsed time occurred to `self` to execute
  const elapsed = <R, E, A>(
    self: Effect.Effect<A, E, R>
  ): Effect.Effect<A, E, R> =>
  Effect.gen(function\* () {
    const startMillis = yield\* now
    const result = yield\* self
    const endMillis = yield\* now
    // Calculate the elapsed time in milliseconds
    const elapsed = endMillis - startMillis
    // Log the elapsed time
    console.log(`Elapsed: ${elapsed}`)
    return result
  }) 
reply

 Also pipe operator is coming soon [1].[0] https://effect.website/docs/guides/style/do[1] https://www.proposals.es/proposals/Pipeline%20Operator [0] https://effect.website/docs/guides/style/do[1] https://www.proposals.es/proposals/Pipeline%20Operator [1] https://www.proposals.es/proposals/Pipeline%20Operator 
reply

 
reply

 
reply

"
32,0bsolete,Ask HN: What macOS apps/programs do you use daily and recommend?,https://news.ycombinator.com/item?id=40627395,"I'm converting my unused gaming PC into a NAS/Docker container server and my personal device will now be a MacBook Air.I've got Magnet for easier window management, otherwise not much else and looking for recommendations on other apps to check out.So, what ap…",2024-06-09T20:37:28Z,"I've got Magnet for easier window management, otherwise not much else and looking for recommendations on other apps to check out.So, what applications do you use daily on MacOS and why do you love it? So, what applications do you use daily on MacOS and why do you love it? Some commands I use often:- `pbcopy` and `pbpaste` to copy and paste data via the clipboard- `date -u` to give the date in UTC- `networkQuality` is speedtest but built-in to macOS- `caffeinate` prevents your computer from going to sleep (it's the same as the old 
Caffeinate program, but built-in now)- `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `pbcopy` and `pbpaste` to copy and paste data via the clipboard- `date -u` to give the date in UTC- `networkQuality` is speedtest but built-in to macOS- `caffeinate` prevents your computer from going to sleep (it's the same as the old 
Caffeinate program, but built-in now)- `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `date -u` to give the date in UTC- `networkQuality` is speedtest but built-in to macOS- `caffeinate` prevents your computer from going to sleep (it's the same as the old 
Caffeinate program, but built-in now)- `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `networkQuality` is speedtest but built-in to macOS- `caffeinate` prevents your computer from going to sleep (it's the same as the old 
Caffeinate program, but built-in now)- `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `caffeinate` prevents your computer from going to sleep (it's the same as the old 
Caffeinate program, but built-in now)- `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `open ...` to open a file, as if you double-clicked it in Finder- `security` gives you command-line access to the Keychain. - `security` gives you command-line access to the Keychain. 
reply

 TIL there is a built in utility. I switched from Caffeinate to Amphetamine a while back and never bothered to look for a built-in solution. Great to know! 
reply

 
reply

 
reply

 https://keepingyouawake.app/ I use this for a ""GUI"" version 
reply

   TZ=UTC date

thank you for ""security"" (lots to read now) 
reply

 - Replaces Spotlight for opening applications- Replaces Magnet for window management, same features but don’t have to run a separate app now.- keeps a clipboard history- allows me to convert colours and units- integrates with my calendar to show me upcoming meetings, shows them in my menu bar and lets me join them with one click- allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - Replaces Magnet for window management, same features but don’t have to run a separate app now.- keeps a clipboard history- allows me to convert colours and units- integrates with my calendar to show me upcoming meetings, shows them in my menu bar and lets me join them with one click- allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - keeps a clipboard history- allows me to convert colours and units- integrates with my calendar to show me upcoming meetings, shows them in my menu bar and lets me join them with one click- allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - allows me to convert colours and units- integrates with my calendar to show me upcoming meetings, shows them in my menu bar and lets me join them with one click- allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - integrates with my calendar to show me upcoming meetings, shows them in my menu bar and lets me join them with one click- allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - allows me to prevent my Mac from sleeping (for certain durations) with caffeinate command- has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. - has a variety of plugins availableProbably forgetting a lot of things I use it for, but even without the premium features I use it all the time. Probably forgetting a lot of things I use it for, but even without the premium features I use it all the time. 
reply

 
reply

 
reply

   Thanks for reaching out and for the feedback.

  Pricing, like everything else at Raycast, is something we will continuously evaluate and try to balance between what is best for our users and also for us as a company. And on this subject we are indeed looking into the possibility of offering a cheaper Pro Plan (lite version) subscription without AI for example or even offering a lifetime license with additional benefits outside the app. So more on this subject to come soon.

  Best,

  —
  Daniel Sequeira
  Engineering Manager at Raycast 
reply

 Problem is that they’re VC backed and you don’t get SaaS valuations on selling a ton of single-purchase software. 
reply

 
reply

 You can write fairly sophisticated UIs with less effort than for a shell script. If a FOSS version of this ever takes off, it could have the potential to replace terminal-UIs outright. 
reply

 To your list, I would add app shortcuts / key commands / quick links / snippets / code image generators (optically from selection) to name a few. 
reply

 
reply

 - Took VC money and pushes for subscription instead of a clear payment model.- Rides the AI Hype train.- Is still not able to handle file workflows properly.- Alfred workflows are easier to write and to debug due to workflow editor, you have to be a web developer to find the proposition of writing what is basically a small react app a good one.- Also, IMO, not very fast, consumes a lot of resources and has a clumsy UX due to using stateful multistep apps.I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. - Rides the AI Hype train.- Is still not able to handle file workflows properly.- Alfred workflows are easier to write and to debug due to workflow editor, you have to be a web developer to find the proposition of writing what is basically a small react app a good one.- Also, IMO, not very fast, consumes a lot of resources and has a clumsy UX due to using stateful multistep apps.I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. - Is still not able to handle file workflows properly.- Alfred workflows are easier to write and to debug due to workflow editor, you have to be a web developer to find the proposition of writing what is basically a small react app a good one.- Also, IMO, not very fast, consumes a lot of resources and has a clumsy UX due to using stateful multistep apps.I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. - Alfred workflows are easier to write and to debug due to workflow editor, you have to be a web developer to find the proposition of writing what is basically a small react app a good one.- Also, IMO, not very fast, consumes a lot of resources and has a clumsy UX due to using stateful multistep apps.I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. - Also, IMO, not very fast, consumes a lot of resources and has a clumsy UX due to using stateful multistep apps.I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. I would always prefer Alfred to Raycast, but I am stuck with Launchbar which is still the Launcher with most smooth workflow for me. The whole <Object><Action> paradigm is just so fast - select something, tab, match an app with 2 keystrokes-enter -> Opens in app. Works on text, files, whatever. 
reply

 
reply

 
reply

 
reply

 
reply

 - BlockBlock, KnockKnock, and RansomWhere, but not LuLu because it caused TCP connections to drop nondeterministically- ScrollReverser to fix standalone mouse scrolling behavior because macOS only has one mouse and trackpad reverse setting- KarabinerElements for key remapping- BusyCalendar- Dash for dev docs- MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - ScrollReverser to fix standalone mouse scrolling behavior because macOS only has one mouse and trackpad reverse setting- KarabinerElements for key remapping- BusyCalendar- Dash for dev docs- MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - KarabinerElements for key remapping- BusyCalendar- Dash for dev docs- MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - BusyCalendar- Dash for dev docs- MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Dash for dev docs- MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - MacDown for markdown- Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Bodega for checking the latest versions of all Sparkle apps (While the main app was discontinued years ago causing an error message on launch, the Sparkle update checking continues to work)- DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - DaisyDisk to check disk usage- HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - HardwareGrowler + Growl for hardware and network monitoring (Yes, it's old and nothing else uses Growl notifications anymore, but noticing when the Ethernet adapter is being temperamental is handy)- A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - A fork of Breakaway for the rare times when I used my headphone jack to auto mute volume if it were to become disconnected unexpectedly- AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - AppZapper to really nuke apps, their data, and their config (Also, old but it still works)- Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Pacifist to sneak a peak inside .pkg's- OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - OmniGraffle of course, the ""Visio"" for Mac- Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Ascension .nfo viewer- WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - WineSkin for running some Windows apps on Mac when you know exactly what runtimes they need (I ran Altera Quartus Pro/II with it fine once upon a time™ for an overseas cloned FPGA devkit)- Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Probably already mentioned: iStat Menus, Bartender, ForecastBar, Paste, Postgres, MacTracker, iTerm2- Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - Don't use anymore: CoconutBattery, TotalFinder, QuickSilver, Axure RP, Reveal, Reinteract, VMware Fusion, EndNote, Papers, Bookends- I wish I had or could afford: a full-featured license of IDA Pro - I wish I had or could afford: a full-featured license of IDA Pro 
reply

 
reply

 
reply

 
reply

 
reply

 - https://github.com/koekeishiya/yabai
- https://github.com/koekeishiya/skhd
- https://github.com/FelixKratz/SketchyBarSome honorable mentions:
Hammerspoon - Unlock insane levels of configuration/automation (https://github.com/Hammerspoon/hammerspoon)
Raycast - Spotlight search replacement (https://www.raycast.com/)
LuLu Firewall - An amazing FOSS firewall (https://github.com/objective-see/LuLu) Some honorable mentions:
Hammerspoon - Unlock insane levels of configuration/automation (https://github.com/Hammerspoon/hammerspoon)
Raycast - Spotlight search replacement (https://www.raycast.com/)
LuLu Firewall - An amazing FOSS firewall (https://github.com/objective-see/LuLu) 
reply

 
reply

 
reply

 
reply

 
reply

 https://git-fork.com/ 
reply

 
reply

 
reply

 
reply

 
reply

 Owly is my fav for anti sleeping at certain times. Though critical to disable the ads via startup features. I haven't found abetter one. Though it has quirks.Also some commands in the cli for like key repeat. Like wtf why can't I turn off accent hold when I want to repeat letters. Also some commands in the cli for like key repeat. Like wtf why can't I turn off accent hold when I want to repeat letters. 
reply

 
reply

 
reply

 
reply

 I use Amphetamine instead, so that I can continue Zoom calls after putting my laptop in my backpack to walk around. 
reply

 - Karabiner-elements will disable the keyboard automatically when I connect my external bluetooth keyboard.- github.com/exelban/stats is an excellent macOS system monitor in your menu bar - github.com/exelban/stats is an excellent macOS system monitor in your menu bar 
reply

 
reply

 
reply

 Obsidian - note taking, making presentations for work-related stuff.iTerm 2 - it's better than default terminal emulator, but i consider moving to Alacritty to see what's so hype about it.Scroll Reverser - macOS still doesn't know the difference between mouse scrolling and trackpad scrolling.While i can't recommend Arc browser, i still use it daily. I don't believe it will exist in it's current form in two years, but now it's much more usable than other Chromium-based browsers for me.I also have a simple shortcut in Siri Shortcuts that calls m1ddc tool to change the external monitor current input between HDMI and DisplayPort. iTerm 2 - it's better than default terminal emulator, but i consider moving to Alacritty to see what's so hype about it.Scroll Reverser - macOS still doesn't know the difference between mouse scrolling and trackpad scrolling.While i can't recommend Arc browser, i still use it daily. I don't believe it will exist in it's current form in two years, but now it's much more usable than other Chromium-based browsers for me.I also have a simple shortcut in Siri Shortcuts that calls m1ddc tool to change the external monitor current input between HDMI and DisplayPort. Scroll Reverser - macOS still doesn't know the difference between mouse scrolling and trackpad scrolling.While i can't recommend Arc browser, i still use it daily. I don't believe it will exist in it's current form in two years, but now it's much more usable than other Chromium-based browsers for me.I also have a simple shortcut in Siri Shortcuts that calls m1ddc tool to change the external monitor current input between HDMI and DisplayPort. While i can't recommend Arc browser, i still use it daily. I don't believe it will exist in it's current form in two years, but now it's much more usable than other Chromium-based browsers for me.I also have a simple shortcut in Siri Shortcuts that calls m1ddc tool to change the external monitor current input between HDMI and DisplayPort. I also have a simple shortcut in Siri Shortcuts that calls m1ddc tool to change the external monitor current input between HDMI and DisplayPort. 
reply

 Wow, this would be pretty useful. Drives me crazy when my meetings open up in my personal chrome. 
reply

 Why? 
reply

 At some point, they will need to introduce some kind of subscription for some of their browser features - I assume that current Arc Max is going to be part of it. This would lead to making new features available only to the paying users.I have really pessimistic views on software development (for-profit or not) in general now, so I'd be really happy to be wrong here. I have really pessimistic views on software development (for-profit or not) in general now, so I'd be really happy to be wrong here. 
reply

 
reply

 BetterSnapTool - lets me move windows into other screens easily, the main feature that I miss from windows.BetterTouchTool - mostly just mapping my 4th & 5th mouse buttons to copy & paste BetterTouchTool - mostly just mapping my 4th & 5th mouse buttons to copy & paste 
reply

 It seems like a ridiculous keyboard shortcut but I use it so much, it's motor memory now. 
reply

 1. $hotkey for screenshot
3. Hit enter to edit
4. Press A to draw an arrow with the mouse
5. Cmd-c to dismiss the edit window and copy & paste wherever.So it basically only takes as long as you take to click down an arrow with your mouse So it basically only takes as long as you take to click down an arrow with your mouse 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 For someone using neither of these tools yet, Keyboard Maestro is probably the nicer one to start with to give you a taste for how useful some of those automations can be!Both are pretty powerful. Both are pretty powerful. 
reply

 I do miss it's simplicity in pulling info from the system. 
reply

 Want to script actions in an app that isn't easily scriptable? It's got your back. 
reply

 MonitorControl is great for interfacing with external monitors using DDC/CI.I recommend primarily using Safari with a Content Blocker (I use AdGuard) as it uses far less battery than third-party browsers and feels more native.VMWare Fusion is now free for personal use if you need to virtualize Windows; the official download link is a Byzantine nightmare but you can find mirrors if you Google for them and you can verify the hash against those listed on the official download site. I recommend primarily using Safari with a Content Blocker (I use AdGuard) as it uses far less battery than third-party browsers and feels more native.VMWare Fusion is now free for personal use if you need to virtualize Windows; the official download link is a Byzantine nightmare but you can find mirrors if you Google for them and you can verify the hash against those listed on the official download site. VMWare Fusion is now free for personal use if you need to virtualize Windows; the official download link is a Byzantine nightmare but you can find mirrors if you Google for them and you can verify the hash against those listed on the official download site. 
reply

 That is mainly because I switched mostly to Linux a few years ago, and you'd think the lack of a good terminal app wouldn't be the biggest pain point of switching from Mac to Linux, but it absolutely is.There's no terminal app on Linux even close to as good as iTerm2.[2]: https://iterm2.com/ but it's v3 tho ¯\_(ಠ_ಠ)_/¯ There's no terminal app on Linux even close to as good as iTerm2.[2]: https://iterm2.com/ but it's v3 tho ¯\_(ಠ_ಠ)_/¯ [2]: https://iterm2.com/ but it's v3 tho ¯\_(ಠ_ಠ)_/¯ 
reply

 Plus, it's open source and the developer continues to improve it, so many years later. 
reply

 Like any time I need to do something complicated, like a process that I might want to document after the fact... iTerm never loses history, you can get timestamps on every command after the fact. It's automatable, you can easily tell it to open 10 terminals, replaying a different CLI command sequence in each... I could go on and on and on, but I can't think of any other example of an app that has so thoroughly dominated its category.I mean maybe like Microsoft Excel for Windows, but that is from a whole other angle (that is not software excellence haha)... I mean maybe like Microsoft Excel for Windows, but that is from a whole other angle (that is not software excellence haha)... 
reply

 What features from iTerm make you love it so much? 
reply

 I create profiles for starting up each part of my work tech stack (backend, frontend, workers, specific ssh connections, etc.) and I can run/switch to them in separate tabs via shift-cmd-o and typing a few characters of the name. Can also start up all of them at once via an 'Open All' command for a group of profiles. 
reply

 I haven't found any other terminal emulator that has them. On Linux, Konsole has decent splitting but no `tmux -CC`. 
reply

 
reply

 
reply

 
reply

 [0]: https://news.ycombinator.com/item?id=40432446 
reply

 I noticed the AI feature in the latest update to iTerm2, but it wasn't turned on by default, and I didn't turn it on, so...¯\\_(ಠ_ಠ)_/¯ ¯\\_(ಠ_ಠ)_/¯ 
reply

 
reply

 
reply

 
reply

 The Mastodon mobs who brigaded the issue tracker were squarely in the fringe, frowned upon by pretty much everyone else... 
reply

 https://github.com/p0deje/Maccy 
reply

 
reply

 
reply

 
reply

 - Rectangle for window management (I appreciate you have Magnet and tastes differ)- MarkEdit is an excellent (free) Markdown editor- Highland 2 (not free) for more long-form Markdown writing as it can handle normal Markdown files and feels more polished than similar tools (especially the document map)- VLC as I watch a lot of box sets and it's better than the Apple options- SourceTree for source control (not as good as Git Extentions on Windows but more to my tastes than the VS Code plugins, Fork, or GitKraken for example)- BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - MarkEdit is an excellent (free) Markdown editor- Highland 2 (not free) for more long-form Markdown writing as it can handle normal Markdown files and feels more polished than similar tools (especially the document map)- VLC as I watch a lot of box sets and it's better than the Apple options- SourceTree for source control (not as good as Git Extentions on Windows but more to my tastes than the VS Code plugins, Fork, or GitKraken for example)- BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - Highland 2 (not free) for more long-form Markdown writing as it can handle normal Markdown files and feels more polished than similar tools (especially the document map)- VLC as I watch a lot of box sets and it's better than the Apple options- SourceTree for source control (not as good as Git Extentions on Windows but more to my tastes than the VS Code plugins, Fork, or GitKraken for example)- BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - VLC as I watch a lot of box sets and it's better than the Apple options- SourceTree for source control (not as good as Git Extentions on Windows but more to my tastes than the VS Code plugins, Fork, or GitKraken for example)- BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - SourceTree for source control (not as good as Git Extentions on Windows but more to my tastes than the VS Code plugins, Fork, or GitKraken for example)- BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - BitWarden as I'm cross-platform so don't want to rely on the Apple Keychain- Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - Authy for two-factor authentication - not the Google, Microsoft, or similar option as I don't want to be tied to a tech giant account that can get switched off- PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - PCloud (with encryption and a mapped drive) for the same cross-platform reason, plus again I don't want my backups tied to a tech giant account that can get switched off- PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - PGAdmin 4 for database management during development- Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - Keka for handling archives/zips as it usually handles files fine when Apple's archiver won't (eg some EPUBs when renamed to zip)- Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) - Fastmail for being able to manage multiple custom domain emails, aliases, and even nameservers from a single (paid) user account (I'm aware it isn't a Mac app but I do often use Outlook from Office 2019 to access it despite the excellent web site) 
reply

 
reply

 With a simple cipher it's near impossible for anyone to use but you 
reply

 
reply

 
reply

 
reply

 They came out with an option a year or two ago for an upgraded version that was $99 for its lifetime. But I was migrated to that new product without paying.Loved it so much I paid $99 for a copy for my wife. And have also tipped them a few times over the past few years. Not sure if 1pass has something similar but I do remember a sub model which I didn’t like. Loved it so much I paid $99 for a copy for my wife. And have also tipped them a few times over the past few years. Not sure if 1pass has something similar but I do remember a sub model which I didn’t like. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 - Hammerspoon: window management and general purpose automation app, configured in lua.- sketchybar: menu bar replacement, configured in bash/zsh- Karabiner elements: keyboard remapper- homebrew: package manager- Obsidian: note-taking app. Also longform writing (with the right origins) and social scientific QDA (with the right plugins)- WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - sketchybar: menu bar replacement, configured in bash/zsh- Karabiner elements: keyboard remapper- homebrew: package manager- Obsidian: note-taking app. Also longform writing (with the right origins) and social scientific QDA (with the right plugins)- WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - Karabiner elements: keyboard remapper- homebrew: package manager- Obsidian: note-taking app. Also longform writing (with the right origins) and social scientific QDA (with the right plugins)- WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - homebrew: package manager- Obsidian: note-taking app. Also longform writing (with the right origins) and social scientific QDA (with the right plugins)- WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - Obsidian: note-taking app. Also longform writing (with the right origins) and social scientific QDA (with the right plugins)- WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - WezTerm: terminal, configured in lua- espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - espanso: text expander- CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - CleanShot X: Screenshot App, can also do OCR, Videos, gifs, and screenshot annotations- Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - Peek: Syntax highlighting for Quick Look into source code files- Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - Betterzip: Quicklook into archive files & general handling of archives- Highlights: PDF reader with focus on annotations. - Highlights: PDF reader with focus on annotations. 
reply

 
reply

 - Alfred, for better Spotlight (though Spotlight is actually OK) and clipboard management.- Bartender, to control the menu bar- Path Finder, for a decent orthodox file manager- Sublime Text- NetNewsWire, an excellent Mac-only RSS reader.- 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - Bartender, to control the menu bar- Path Finder, for a decent orthodox file manager- Sublime Text- NetNewsWire, an excellent Mac-only RSS reader.- 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - Path Finder, for a decent orthodox file manager- Sublime Text- NetNewsWire, an excellent Mac-only RSS reader.- 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - Sublime Text- NetNewsWire, an excellent Mac-only RSS reader.- 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - NetNewsWire, an excellent Mac-only RSS reader.- 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - 1Blocker has served me well for ad blocking in Safari- Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - Amphetamine to keep the system awake for long operations- Onyx, for occasional system maintenance - Onyx, for occasional system maintenance 
reply

 
reply

 I can’t say the software is  untrustworthy anymore but the whole ownership change was poorly handled and I can’t blame anyone wanting to jump ship after that. 
reply

 
reply

 
reply

 
reply

 http://calca.io/ 
reply

 
reply

 Back when I tried it, it felt more like an advanced calculator with a text interface than a ""magical calculating plaintext file"" to me, which is what I want. But lots of people love it.The other option is something like a Jupyter notebook, or perhaps a Swift playground. But those are not nearly as easy to set up and use.Just for fun, here's my most recent Calca file. The numbers after ""=>"" are calculated by the app. Note that it understands (and converts) units of measurement.  # Alcohol Math
  
  drinks(x, abv) = (x in floz) * abv / 0.6 floz
  
  angostura bitters = 44.7%
  templeton rye = 45.75%
  fernet branca = 39%
  tanqueray 10 gin = 47.3%
  fred jerbis vermouth = 18%
  
  #trinidad sour
  drinks(45 mliters, angostura bitters) + drinks(17 mliters, templeton rye ) => 1.5719
  
  #hanky panky
  drinks(45 mliters, tanqueray 10 gin) + drinks(45 mliters, fred jerbis vermouth) + drinks(7.5 mliters, fernet branca) => 1.8209 The other option is something like a Jupyter notebook, or perhaps a Swift playground. But those are not nearly as easy to set up and use.Just for fun, here's my most recent Calca file. The numbers after ""=>"" are calculated by the app. Note that it understands (and converts) units of measurement.  # Alcohol Math
  
  drinks(x, abv) = (x in floz) * abv / 0.6 floz
  
  angostura bitters = 44.7%
  templeton rye = 45.75%
  fernet branca = 39%
  tanqueray 10 gin = 47.3%
  fred jerbis vermouth = 18%
  
  #trinidad sour
  drinks(45 mliters, angostura bitters) + drinks(17 mliters, templeton rye ) => 1.5719
  
  #hanky panky
  drinks(45 mliters, tanqueray 10 gin) + drinks(45 mliters, fred jerbis vermouth) + drinks(7.5 mliters, fernet branca) => 1.8209 Just for fun, here's my most recent Calca file. The numbers after ""=>"" are calculated by the app. Note that it understands (and converts) units of measurement.  # Alcohol Math
  
  drinks(x, abv) = (x in floz) * abv / 0.6 floz
  
  angostura bitters = 44.7%
  templeton rye = 45.75%
  fernet branca = 39%
  tanqueray 10 gin = 47.3%
  fred jerbis vermouth = 18%
  
  #trinidad sour
  drinks(45 mliters, angostura bitters) + drinks(17 mliters, templeton rye ) => 1.5719
  
  #hanky panky
  drinks(45 mliters, tanqueray 10 gin) + drinks(45 mliters, fred jerbis vermouth) + drinks(7.5 mliters, fernet branca) => 1.8209   # Alcohol Math
  
  drinks(x, abv) = (x in floz) * abv / 0.6 floz
  
  angostura bitters = 44.7%
  templeton rye = 45.75%
  fernet branca = 39%
  tanqueray 10 gin = 47.3%
  fred jerbis vermouth = 18%
  
  #trinidad sour
  drinks(45 mliters, angostura bitters) + drinks(17 mliters, templeton rye ) => 1.5719
  
  #hanky panky
  drinks(45 mliters, tanqueray 10 gin) + drinks(45 mliters, fred jerbis vermouth) + drinks(7.5 mliters, fernet branca) => 1.8209 
reply

 
reply

 - AeroSpace Window Manager since i got to know it this week (replacing Wins, which replaced free Rectangle)- Sensei for hardware checks/cleanups- Yomu for ebooks- Xnapper for beautiful screenshots for marketing/social media- Boom 3D for sound enhancement- ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - Sensei for hardware checks/cleanups- Yomu for ebooks- Xnapper for beautiful screenshots for marketing/social media- Boom 3D for sound enhancement- ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - Yomu for ebooks- Xnapper for beautiful screenshots for marketing/social media- Boom 3D for sound enhancement- ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - Xnapper for beautiful screenshots for marketing/social media- Boom 3D for sound enhancement- ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - Boom 3D for sound enhancement- ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - ImageOptim for mass optimizing images and removing metadata- GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - GoLogin for multiple browser profiles/anonymization for work- IINA for watching video filesI try to be as minimalist as possible with app installations. - IINA for watching video filesI try to be as minimalist as possible with app installations. I try to be as minimalist as possible with app installations. 
reply

 I use Firefox with a vertical tabs extension and based on the screenshots it looks very similar (also, using Firefox Containers solves the same problem as GoLogin afaict) 
reply

 
reply

 
reply

 Also:  - NameChanger for bulk renaming files
  - Day-O as a quick calendar
  - GrandPerspective for finding out what's using disk space   - NameChanger for bulk renaming files
  - Day-O as a quick calendar
  - GrandPerspective for finding out what's using disk space 
reply

 
reply

 
reply

 - Amphetamine: A powerful tool to prevent your Mac from sleeping or going into standby mode, useful for extended work sessions.- Rectangle: A window management app that helps you organize and snap windows to predefined areas on your screen. (Note: This functionality will be built-in with MacOS Sequoia.)- Appcleaner: A utility for thoroughly uninstalling unwanted apps and cleaning up residual files, ensuring your Mac stays clutter-free.- Datagrip: A robust database manager by JetBrains, providing advanced tools and support for various database systems.- Oh My Zsh: A delightful, open-source, community-driven framework for managing your Zsh configuration, and enhancing your terminal experience with themes and plugins.Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Rectangle: A window management app that helps you organize and snap windows to predefined areas on your screen. (Note: This functionality will be built-in with MacOS Sequoia.)- Appcleaner: A utility for thoroughly uninstalling unwanted apps and cleaning up residual files, ensuring your Mac stays clutter-free.- Datagrip: A robust database manager by JetBrains, providing advanced tools and support for various database systems.- Oh My Zsh: A delightful, open-source, community-driven framework for managing your Zsh configuration, and enhancing your terminal experience with themes and plugins.Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Appcleaner: A utility for thoroughly uninstalling unwanted apps and cleaning up residual files, ensuring your Mac stays clutter-free.- Datagrip: A robust database manager by JetBrains, providing advanced tools and support for various database systems.- Oh My Zsh: A delightful, open-source, community-driven framework for managing your Zsh configuration, and enhancing your terminal experience with themes and plugins.Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Datagrip: A robust database manager by JetBrains, providing advanced tools and support for various database systems.- Oh My Zsh: A delightful, open-source, community-driven framework for managing your Zsh configuration, and enhancing your terminal experience with themes and plugins.Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Oh My Zsh: A delightful, open-source, community-driven framework for managing your Zsh configuration, and enhancing your terminal experience with themes and plugins.Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. Nice To Have Apps- Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Anydesk: A remote desktop application that allows you to access and control your Mac from anywhere.- ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - ChatGPT Official App: The official app for OpenAI's ChatGPT, providing convenient access to AI-powered conversations.- Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Goodnotes: A digital note-taking app that's great for iPad users, offering seamless cross-device support for handwritten and typed notes.- Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Notion: A versatile workspace app for note-taking, task management, and project collaboration.- OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - OpeninTerminal: A handy utility to open your terminal directly from Finder, saving time for developers and power users.- Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Postman: An essential tool for API development, testing, and documentation.- Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Termius: A secure and versatile SSH client that supports remote access to servers and network devices.- Grammar Desktop: An application to enhance your writing by checking grammar and style. - Grammar Desktop: An application to enhance your writing by checking grammar and style. 
reply

 # GUI Tools  - Alacritty -- Cross platform, lightweight terminal emulator
  - Rancher Desktop -- Better Docker desktop experience
  - Alfred -- Replaces spotlight for me
  - Amphetamine -- Keep laptop awake
  - Rectangle -- Window snapping
  - `notunes` -- Prevents iTunes from popping up (brew install notunes)

#CLI Tools  - Homebrew -- package manager
  - `lazyvim` -- neovim with a lot of stuff pre-configured.
  - `tmux` -- terminal multiplexer
  - PagerDuty CLI - https://github.com/martindstone/pagerduty-cli
  - Silver Searcher `ag` -- faster grep (brew intall the_silver_searcher)
  - Github cli -- `gh` (brew install gh)
  - `fzf` -- fuzzy finder (brew install fzf)
  - `jq` and `yq` -- Parse json and yaml respectively (brew install jq yq)   - Alacritty -- Cross platform, lightweight terminal emulator
  - Rancher Desktop -- Better Docker desktop experience
  - Alfred -- Replaces spotlight for me
  - Amphetamine -- Keep laptop awake
  - Rectangle -- Window snapping
  - `notunes` -- Prevents iTunes from popping up (brew install notunes)

#CLI Tools  - Homebrew -- package manager
  - `lazyvim` -- neovim with a lot of stuff pre-configured.
  - `tmux` -- terminal multiplexer
  - PagerDuty CLI - https://github.com/martindstone/pagerduty-cli
  - Silver Searcher `ag` -- faster grep (brew intall the_silver_searcher)
  - Github cli -- `gh` (brew install gh)
  - `fzf` -- fuzzy finder (brew install fzf)
  - `jq` and `yq` -- Parse json and yaml respectively (brew install jq yq)   - Homebrew -- package manager
  - `lazyvim` -- neovim with a lot of stuff pre-configured.
  - `tmux` -- terminal multiplexer
  - PagerDuty CLI - https://github.com/martindstone/pagerduty-cli
  - Silver Searcher `ag` -- faster grep (brew intall the_silver_searcher)
  - Github cli -- `gh` (brew install gh)
  - `fzf` -- fuzzy finder (brew install fzf)
  - `jq` and `yq` -- Parse json and yaml respectively (brew install jq yq) 
reply

 Just a great mitm tool that I use for work but also for just looking at random apis that I come across on my day-to-day web use.
I just love it, you can do so much with it. 
reply

 It makes it VERY easy to keep your fingers on the keyboard almost all the time, which really helps things fly. It's an equivalent of the AceJump plugin for IntelliJ if you've used that, but it uses the accessibility tree instead of the contents of the editor. 
reply

 
reply

 
reply

 
reply

 AltTab - Give the same (sane) behaviour to cmd+tab as alt+tab on Windows (https://alt-tab-macos.netlify.app/)Rectangle - Window snapping (https://rectangleapp.com/)Maccy - A clipboard history manager (https://maccy.app/)DropZone - Add a ""shelf"" zone in the same way as Dropover. It's less good than Dropover, but it's available in Homebrew (whereas Dropover is only available in the app store) (https://aptonic.com/)Notion Calendar (previously cron) - I love having my next meetings displayed in the status bar, and its notifications are very useful (eg. they have a ""join google meet"" button) Rectangle - Window snapping (https://rectangleapp.com/)Maccy - A clipboard history manager (https://maccy.app/)DropZone - Add a ""shelf"" zone in the same way as Dropover. It's less good than Dropover, but it's available in Homebrew (whereas Dropover is only available in the app store) (https://aptonic.com/)Notion Calendar (previously cron) - I love having my next meetings displayed in the status bar, and its notifications are very useful (eg. they have a ""join google meet"" button) Maccy - A clipboard history manager (https://maccy.app/)DropZone - Add a ""shelf"" zone in the same way as Dropover. It's less good than Dropover, but it's available in Homebrew (whereas Dropover is only available in the app store) (https://aptonic.com/)Notion Calendar (previously cron) - I love having my next meetings displayed in the status bar, and its notifications are very useful (eg. they have a ""join google meet"" button) DropZone - Add a ""shelf"" zone in the same way as Dropover. It's less good than Dropover, but it's available in Homebrew (whereas Dropover is only available in the app store) (https://aptonic.com/)Notion Calendar (previously cron) - I love having my next meetings displayed in the status bar, and its notifications are very useful (eg. they have a ""join google meet"" button) Notion Calendar (previously cron) - I love having my next meetings displayed in the status bar, and its notifications are very useful (eg. they have a ""join google meet"" button) 
reply

 
reply

 
reply

 `karabiner elements` (https://karabiner-elements.pqrs.org/) to disable things like ""Apple + Q"" -> nothing worse than going to close a single tab and then your whole app quits. also able to re-map caps-lock into escape, ect`iterm2` for terminal (colored tabs are great; albeit i disable the hell out of many of the options like ""clickable urls"" ect)for cli, i try to gnu all-the-things (and i just explode my PATH to the paths `brew` installed dynamically - will try another package manager at a future date)`sublime text``firefox`/`librewolf` + plugins (containers, netmon, request interceptor, dark reader,  adnauseam) `iterm2` for terminal (colored tabs are great; albeit i disable the hell out of many of the options like ""clickable urls"" ect)for cli, i try to gnu all-the-things (and i just explode my PATH to the paths `brew` installed dynamically - will try another package manager at a future date)`sublime text``firefox`/`librewolf` + plugins (containers, netmon, request interceptor, dark reader,  adnauseam) for cli, i try to gnu all-the-things (and i just explode my PATH to the paths `brew` installed dynamically - will try another package manager at a future date)`sublime text``firefox`/`librewolf` + plugins (containers, netmon, request interceptor, dark reader,  adnauseam) `sublime text``firefox`/`librewolf` + plugins (containers, netmon, request interceptor, dark reader,  adnauseam) `firefox`/`librewolf` + plugins (containers, netmon, request interceptor, dark reader,  adnauseam) 
reply

 Dragging things around between desktops (especially with a track pad) is annoying and Yoink solves it. 
reply

 
reply

 Brightness Control https://www.splasm.com/brightnesscontrol/
The only macOS app that is actually able to properly dim my monitor beneath the lowest brightness setting without hacks like painting an overlay above your desktop such that it blinds my eyes when ever I switch workspaces.Cursorcerer https://doomlaser.com/cursorcerer-hide-your-cursor-at-will/
Lets me bind a shortcut key to hide my cursor. Cursorcerer https://doomlaser.com/cursorcerer-hide-your-cursor-at-will/
Lets me bind a shortcut key to hide my cursor. 
reply

 Dropover - Any file you are dragging, just wiggle it and a little shelf shows up where you can put it temporarilyShottr/Cleanshot - For markup and pinning info on the screenI also use quite a lot of my own written softwareScreenMemory - It's similar to Rewind/Recall (but without AI), I revisit days before standups and retrospectivesMonkey Notes - Sticky notes that attach to application windowsDevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. Shottr/Cleanshot - For markup and pinning info on the screenI also use quite a lot of my own written softwareScreenMemory - It's similar to Rewind/Recall (but without AI), I revisit days before standups and retrospectivesMonkey Notes - Sticky notes that attach to application windowsDevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. I also use quite a lot of my own written softwareScreenMemory - It's similar to Rewind/Recall (but without AI), I revisit days before standups and retrospectivesMonkey Notes - Sticky notes that attach to application windowsDevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. ScreenMemory - It's similar to Rewind/Recall (but without AI), I revisit days before standups and retrospectivesMonkey Notes - Sticky notes that attach to application windowsDevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. Monkey Notes - Sticky notes that attach to application windowsDevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. DevControls - Basically a list of repositories with shortcuts, this is a reimplementation of scripts I used to have in BitBar/xbar/SwiftBar (which in themselves are amazing applications)I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. I also have a custom fork of the much recommended Rectangle with some more mouse driven interactions that I've been using for almost two years. 
reply

 - Karabiner-Elements[0] for key remapping, specifically, for making caps lock into ctrl/esc. I don't know of anything else that does this job. Everyone who remaps keys seems to use this.- Kitty[1] as my terminal of choice. I spend most of my time logged in remotely to a server via ssh where I attach to a tmux session. Kitty was easy enough to configure/theme and seems well-documented.- Hammerspoon[2] for a DIY automation/keybinding/window management sys scriptable via lua. I use a private fork of this config: https://github.com/jasonrudolph/keyboard/tree/main- Vivid[3] to make my macbook's screen brighter when outdoors on sunny days. This is important for me, since I try to spend as much time outside as possible.[0] https://karabiner-elements.pqrs.org/[1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ - Kitty[1] as my terminal of choice. I spend most of my time logged in remotely to a server via ssh where I attach to a tmux session. Kitty was easy enough to configure/theme and seems well-documented.- Hammerspoon[2] for a DIY automation/keybinding/window management sys scriptable via lua. I use a private fork of this config: https://github.com/jasonrudolph/keyboard/tree/main- Vivid[3] to make my macbook's screen brighter when outdoors on sunny days. This is important for me, since I try to spend as much time outside as possible.[0] https://karabiner-elements.pqrs.org/[1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ - Hammerspoon[2] for a DIY automation/keybinding/window management sys scriptable via lua. I use a private fork of this config: https://github.com/jasonrudolph/keyboard/tree/main- Vivid[3] to make my macbook's screen brighter when outdoors on sunny days. This is important for me, since I try to spend as much time outside as possible.[0] https://karabiner-elements.pqrs.org/[1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ - Vivid[3] to make my macbook's screen brighter when outdoors on sunny days. This is important for me, since I try to spend as much time outside as possible.[0] https://karabiner-elements.pqrs.org/[1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ [0] https://karabiner-elements.pqrs.org/[1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ [1] https://sw.kovidgoyal.net/kitty/[2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ [2] https://www.hammerspoon.org/[3] https://www.getvivid.app/ [3] https://www.getvivid.app/ 
reply

 
reply

 MacOS can do caps lock to control or caps lock to escape. I bind caps lock to escape if pressed alone or control if pressed together with another key. 
reply

 Copy ‘Em: Copy/paste enhancer.Little Snitch: Hugely useful firewall.Parallels for virtualization.Find Any File: Search for stuff in /System and /Library not in Spotlight index.Cookie: Manage cookies. Little Snitch: Hugely useful firewall.Parallels for virtualization.Find Any File: Search for stuff in /System and /Library not in Spotlight index.Cookie: Manage cookies. Parallels for virtualization.Find Any File: Search for stuff in /System and /Library not in Spotlight index.Cookie: Manage cookies. Find Any File: Search for stuff in /System and /Library not in Spotlight index.Cookie: Manage cookies. Cookie: Manage cookies. 
reply

 
reply

 - https://github.com/zorgiepoo/Komet for Git/Hg/etc commit messages- https://apps.apple.com/th/app/multi-monitor-wallpaper/id5042... for splitting a single (large) wallpaper over multiple displays- https://proxie.app for network traffic inspection- https://apps.apple.com/th/app/the-clock/id488764545?mt=12 for a multi timezone-aware clock- https://apps.apple.com/th/app/patterns-the-regex-app/id42944... for quickly writing/checking Regular Expressions- https://tableplus.com for an RDBMS client - https://apps.apple.com/th/app/multi-monitor-wallpaper/id5042... for splitting a single (large) wallpaper over multiple displays- https://proxie.app for network traffic inspection- https://apps.apple.com/th/app/the-clock/id488764545?mt=12 for a multi timezone-aware clock- https://apps.apple.com/th/app/patterns-the-regex-app/id42944... for quickly writing/checking Regular Expressions- https://tableplus.com for an RDBMS client - https://proxie.app for network traffic inspection- https://apps.apple.com/th/app/the-clock/id488764545?mt=12 for a multi timezone-aware clock- https://apps.apple.com/th/app/patterns-the-regex-app/id42944... for quickly writing/checking Regular Expressions- https://tableplus.com for an RDBMS client - https://apps.apple.com/th/app/the-clock/id488764545?mt=12 for a multi timezone-aware clock- https://apps.apple.com/th/app/patterns-the-regex-app/id42944... for quickly writing/checking Regular Expressions- https://tableplus.com for an RDBMS client - https://apps.apple.com/th/app/patterns-the-regex-app/id42944... for quickly writing/checking Regular Expressions- https://tableplus.com for an RDBMS client - https://tableplus.com for an RDBMS client 
reply

 
reply

 
reply

 HiDock, which automatically switches my Dock between left-edge (when I'm using my laptop on its own) and bottom-edge (when I have it docked with the much larger screen on my desk).iStatMenus, which makes it vastly easier to tell when my Bluetooth mice and keyboards need charging.Fluor, which automatically switches my function keys between their macOS ""media/feature key"" setting and standard function keys based on app (primarily so I can use them as intended in games like Final Fantasy XIV).MacPorts, IMO still the superior macOS package manager. I honestly don't know why Homebrew suddenly started getting so much attention several years ago, to the point that many devs don't even appear to know that there is another option, when MacPorts is older and doesn't take over an otherwise highly useful directory (/usr/local; MacPorts uses /opt/local). iStatMenus, which makes it vastly easier to tell when my Bluetooth mice and keyboards need charging.Fluor, which automatically switches my function keys between their macOS ""media/feature key"" setting and standard function keys based on app (primarily so I can use them as intended in games like Final Fantasy XIV).MacPorts, IMO still the superior macOS package manager. I honestly don't know why Homebrew suddenly started getting so much attention several years ago, to the point that many devs don't even appear to know that there is another option, when MacPorts is older and doesn't take over an otherwise highly useful directory (/usr/local; MacPorts uses /opt/local). Fluor, which automatically switches my function keys between their macOS ""media/feature key"" setting and standard function keys based on app (primarily so I can use them as intended in games like Final Fantasy XIV).MacPorts, IMO still the superior macOS package manager. I honestly don't know why Homebrew suddenly started getting so much attention several years ago, to the point that many devs don't even appear to know that there is another option, when MacPorts is older and doesn't take over an otherwise highly useful directory (/usr/local; MacPorts uses /opt/local). MacPorts, IMO still the superior macOS package manager. I honestly don't know why Homebrew suddenly started getting so much attention several years ago, to the point that many devs don't even appear to know that there is another option, when MacPorts is older and doesn't take over an otherwise highly useful directory (/usr/local; MacPorts uses /opt/local). 
reply

 - Rectangle: window management [https://rectangleapp.com/]- KeepingYouAwake: a small program for the menu bar that wraps around the caffeinate command line utility [https://keepingyouawake.app/]- Maccy: clipboard manager [https://maccy.app/]- CotEditor: plain-text Editor [https://coteditor.com/]- Progressive Downloader: download manager [https://www.macpsd.net/]- AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] - KeepingYouAwake: a small program for the menu bar that wraps around the caffeinate command line utility [https://keepingyouawake.app/]- Maccy: clipboard manager [https://maccy.app/]- CotEditor: plain-text Editor [https://coteditor.com/]- Progressive Downloader: download manager [https://www.macpsd.net/]- AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] - Maccy: clipboard manager [https://maccy.app/]- CotEditor: plain-text Editor [https://coteditor.com/]- Progressive Downloader: download manager [https://www.macpsd.net/]- AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] - CotEditor: plain-text Editor [https://coteditor.com/]- Progressive Downloader: download manager [https://www.macpsd.net/]- AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] - Progressive Downloader: download manager [https://www.macpsd.net/]- AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] - AppCleaner: uninstall unwanted apps [https://freemacsoft.net/appcleaner/] 
reply

 
reply

 (reported it to the Developer. It basically runs some `ps -a …` command every x seconds.) 
reply

 I would be lost without it.  It's gotten me out of so many jams.Just have to be careful about not needlessly keeping around sensitive data. Just have to be careful about not needlessly keeping around sensitive data. 
reply

 Fork - one of the better git GUIs.Rectangle - open source app to manage window layouts Rectangle - open source app to manage window layouts 
reply

 Handbrake - Video conversionEagle (https://eagle.cool/) collecte and organize all design//visual inspiration at one place(this is also my default screengrab app)Monodraw - Flowchart, ASCII, Visual thinking app Eagle (https://eagle.cool/) collecte and organize all design//visual inspiration at one place(this is also my default screengrab app)Monodraw - Flowchart, ASCII, Visual thinking app Monodraw - Flowchart, ASCII, Visual thinking app 
reply

 * iTerm2: Awesome terminal* Karabiner/Elements: Set up keyboard mappings with more flexibility than the standard settings. https://karabiner-elements.pqrs.org/In terms of MacOS stuff to enhance the out-of-the-box:* Bartender to control what shows on the menu bar https://www.macbartender.com/ (note, it has recently changed hands and people are suggesting to use ""Ice"" instead)* Rectangle: To control windows and screens via the keyboard* Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Karabiner/Elements: Set up keyboard mappings with more flexibility than the standard settings. https://karabiner-elements.pqrs.org/In terms of MacOS stuff to enhance the out-of-the-box:* Bartender to control what shows on the menu bar https://www.macbartender.com/ (note, it has recently changed hands and people are suggesting to use ""Ice"" instead)* Rectangle: To control windows and screens via the keyboard* Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash In terms of MacOS stuff to enhance the out-of-the-box:* Bartender to control what shows on the menu bar https://www.macbartender.com/ (note, it has recently changed hands and people are suggesting to use ""Ice"" instead)* Rectangle: To control windows and screens via the keyboard* Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Bartender to control what shows on the menu bar https://www.macbartender.com/ (note, it has recently changed hands and people are suggesting to use ""Ice"" instead)* Rectangle: To control windows and screens via the keyboard* Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Rectangle: To control windows and screens via the keyboard* Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Arq: Better than Time Machine, allows selective backups and supports multiple destinations (OneDrive, NAS, etc)* Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Monitor Control: Controls brightness across multi-screen setups https://github.com/MonitorControl/MonitorControl#readme* Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Stats: Puts various meters in your menu bar (CPU, fans, network etc) https://github.com/exelban/stats* Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Spotify Notifications: Uses standard notifications to show latest spotify track playing etc https://www.spotify-notifications.app/* Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash * Dash: Awesome documentation tool for development, integrates with multiple other tools. https://kapeli.com/dash 
reply

 My personal use is Time Machine for local backups, and Arq for remote backups. My reasoning is that TM is built in, and allows me to rapidly restore my machine in case of disk failure.I've always found Arq to have a rather clumsy restore dialog, and you need to create a temporary user account to restore your normal user account, or at least you needed to do that last time i checked. I've always found Arq to have a rather clumsy restore dialog, and you need to create a temporary user account to restore your normal user account, or at least you needed to do that last time i checked. 
reply

 <fingers crossed> haven't had to restore, but have verified the backups.The problem I had with Time Machine is that I wanted to configure what to backup and avoid some things like work vs personal etc. The problem I had with Time Machine is that I wanted to configure what to backup and avoid some things like work vs personal etc. 
reply

 Like you, i've also never had to restore, but i somewhat frequently (every 30 days) verify my backups, and i've never encountered a problem with Arq. TimeMachine also appears to have become a whole lot better at not corrupting your backups every n days, but i guess that's APFS at work for you.The one remaining thing i have left is to figure out the ""proper"" way to backup iCloud only storage. Currently i have an app on each users device that uploads photos to a NAS, and each users laptop then backs up that share on the NAS to the cloud when Arq runs (i use scheduled snapshots on the NAS so no backup NAS to NAS for local).While it ""works"", i don't completely trust it, and i would much prefer a better way. I'm aware i can put the photo library on an external drive and download originals, but that's not very practical for people that bring their laptops with them, and also access photo libraries on the go.The only other solution i've come up with, is to have a dedicated ""always on"" machine, where each user logs in through remote desktop, and have that download originals for all users, but it requires me to remember to ask each person to login to the machine every time it's rebooted, which again is a chore, and i much prefer something automated that runs on the persons own devices instead of a centralized setup. The one remaining thing i have left is to figure out the ""proper"" way to backup iCloud only storage. Currently i have an app on each users device that uploads photos to a NAS, and each users laptop then backs up that share on the NAS to the cloud when Arq runs (i use scheduled snapshots on the NAS so no backup NAS to NAS for local).While it ""works"", i don't completely trust it, and i would much prefer a better way. I'm aware i can put the photo library on an external drive and download originals, but that's not very practical for people that bring their laptops with them, and also access photo libraries on the go.The only other solution i've come up with, is to have a dedicated ""always on"" machine, where each user logs in through remote desktop, and have that download originals for all users, but it requires me to remember to ask each person to login to the machine every time it's rebooted, which again is a chore, and i much prefer something automated that runs on the persons own devices instead of a centralized setup. While it ""works"", i don't completely trust it, and i would much prefer a better way. I'm aware i can put the photo library on an external drive and download originals, but that's not very practical for people that bring their laptops with them, and also access photo libraries on the go.The only other solution i've come up with, is to have a dedicated ""always on"" machine, where each user logs in through remote desktop, and have that download originals for all users, but it requires me to remember to ask each person to login to the machine every time it's rebooted, which again is a chore, and i much prefer something automated that runs on the persons own devices instead of a centralized setup. The only other solution i've come up with, is to have a dedicated ""always on"" machine, where each user logs in through remote desktop, and have that download originals for all users, but it requires me to remember to ask each person to login to the machine every time it's rebooted, which again is a chore, and i much prefer something automated that runs on the persons own devices instead of a centralized setup. 
reply

 
reply

 Apple's official documentation[1] simply says to login manually to icloud.com, select the photos you want to backup, and download a ZIP file. I have 3.5TB photos in iCloud...It's enough that i can't even purchase a Mac that has the needed amount of storage, nor should it be necessary to mirror all data locally before backing it up. All i want is a way to backup my iCloud Photos locally without storing them twice (locally). It works for Documents in iCloud, and Arq handles those well, but because Photos is ""special"", when it stores ""optimized versions"" of your photos, it actually replaces your local versions with lower resolution images, so even if you backup your iCloud photo library, you still don't have all the data.[1] https://support.apple.com/en-us/108306 It's enough that i can't even purchase a Mac that has the needed amount of storage, nor should it be necessary to mirror all data locally before backing it up. All i want is a way to backup my iCloud Photos locally without storing them twice (locally). It works for Documents in iCloud, and Arq handles those well, but because Photos is ""special"", when it stores ""optimized versions"" of your photos, it actually replaces your local versions with lower resolution images, so even if you backup your iCloud photo library, you still don't have all the data.[1] https://support.apple.com/en-us/108306 [1] https://support.apple.com/en-us/108306 
reply

 
reply

 Ultimately this is a problem for Apple to solve. 
reply

 - Rectangle: Window management- A Better Finder Rename: (not actually daily) A nice GUI for renaming large numbers of files- Day One: A journaling app. I'm not willing to pay a subscription for that (I have strong feelings about App subscriptions) but the unpaid version is fine for me. - A Better Finder Rename: (not actually daily) A nice GUI for renaming large numbers of files- Day One: A journaling app. I'm not willing to pay a subscription for that (I have strong feelings about App subscriptions) but the unpaid version is fine for me. - Day One: A journaling app. I'm not willing to pay a subscription for that (I have strong feelings about App subscriptions) but the unpaid version is fine for me. 
reply

 
reply

 
reply

 - Alfred -> Launcher and some small tools- Rectangle -> Simple keykinds to move windows around, easier/simpler than a full tile manager- Alacritty -> Anything other than the default Terminal- Obsidian -> Best note-taking app I've found- TickTick -> Todolist, Calendar and Habit Tracker, syncs with phone, love it - Rectangle -> Simple keykinds to move windows around, easier/simpler than a full tile manager- Alacritty -> Anything other than the default Terminal- Obsidian -> Best note-taking app I've found- TickTick -> Todolist, Calendar and Habit Tracker, syncs with phone, love it - Alacritty -> Anything other than the default Terminal- Obsidian -> Best note-taking app I've found- TickTick -> Todolist, Calendar and Habit Tracker, syncs with phone, love it - Obsidian -> Best note-taking app I've found- TickTick -> Todolist, Calendar and Habit Tracker, syncs with phone, love it - TickTick -> Todolist, Calendar and Habit Tracker, syncs with phone, love it 
reply

 
reply

 Owly - stop sleep / keep screen on, like caffeine app from years agoiterm2 - terminal that looks nice and just works, using zsh and oh-myzsh for basic theming.I user Nord color scheme everywhere https://www.nordtheme.com/ports iterm2 - terminal that looks nice and just works, using zsh and oh-myzsh for basic theming.I user Nord color scheme everywhere https://www.nordtheme.com/ports I user Nord color scheme everywhere https://www.nordtheme.com/ports 
reply

 
reply

 
reply

 Karabiner: mostly map my mouse back button to previous page gesture for web browsing.ITerm2: just a good terminalSublime Text: text editorIINA: video player ITerm2: just a good terminalSublime Text: text editorIINA: video player Sublime Text: text editorIINA: video player IINA: video player 
reply

 
reply

 However, VLC still provides the best subtitle style customizations. 
reply

 
reply

 
reply

 Fork (Git Client), RapidAPI, Fantastical (great for showing reminders on a calendar), openEmu (vintage game emulator), lulu/ lilsnitch (network monitor), craft (an alternative to obsidian), soundSource (because along with windows management, OSX also dosen’t have basic sound management), postgress app, paper (markdown editor), Zed (text editor)Finally, some very pricy but IMO, best of “Mac” software:  iA Writer/ Presenter, Omnisuite, Nova (Editor), Things(GTD), Little Snitch. Finally, some very pricy but IMO, best of “Mac” software:  iA Writer/ Presenter, Omnisuite, Nova (Editor), Things(GTD), Little Snitch. 
reply

 iAWriter, lightweight writing-focused text-editorLittle Snitch, network monitor, app firewall Little Snitch, network monitor, app firewall 
reply

 - Itsycal (https://www.mowglii.com/itsycal/)- Kitty (https://sw.kovidgoyal.net/kitty/)- Magnet (https://magnet.crowdcafe.com) - Kitty (https://sw.kovidgoyal.net/kitty/)- Magnet (https://magnet.crowdcafe.com) - Magnet (https://magnet.crowdcafe.com) 
reply

 • iTerm2 - macOS Terminal Replacement [2]• Dropshare App - upload anything anywhere on macOS [3]• Mimestream - A native macOS email client for Gmail [4]• Things - To-Do List for Mac & iOS [5][1] https://www.alfredapp.com[2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things • Dropshare App - upload anything anywhere on macOS [3]• Mimestream - A native macOS email client for Gmail [4]• Things - To-Do List for Mac & iOS [5][1] https://www.alfredapp.com[2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things • Mimestream - A native macOS email client for Gmail [4]• Things - To-Do List for Mac & iOS [5][1] https://www.alfredapp.com[2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things • Things - To-Do List for Mac & iOS [5][1] https://www.alfredapp.com[2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things [1] https://www.alfredapp.com[2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things [2] https://iterm2.com[3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things [3] https://dropshare.app[4] https://mimestream.com[5] https://culturedcode.com/things [4] https://mimestream.com[5] https://culturedcode.com/things [5] https://culturedcode.com/things 
reply

 
reply

 
reply

 - Obsidian- Jetbrains- Arc- 2 other side projects that solve personal problems---Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. - Jetbrains- Arc- 2 other side projects that solve personal problems---Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. - Arc- 2 other side projects that solve personal problems---Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. - 2 other side projects that solve personal problems---Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. ---Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. Kitty for all the reasons for alacritty but there are tabs. The other tools I mentioned just improve quality of life.Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. Obsidian for notes- everything markdown files synced with icloud, works with phone and windows PC.Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. Jetbrains is my favorite suite of IDEs by far due to what I think of as ""fearless coding"" - but vscode has come a long way.Arc is the least bad browser imo. It's hard to build a great browser. Arc is the least bad browser imo. It's hard to build a great browser. 
reply

 MeetingBar - simply does it's job. simple and effective. has inyourface functionality in place.Arc - wanna jump off to Safari but I think Arc is still the best one so far.Obsidian - I'm new to it but ""file-first"" approach looks good.1Password - still nothing beats it.KarabinerElements+goku - to have it configurable. have layers of keybinding to launch something. Like "".+i"" will open iTrem2 and so on.Ice - just landed my setup. Arc - wanna jump off to Safari but I think Arc is still the best one so far.Obsidian - I'm new to it but ""file-first"" approach looks good.1Password - still nothing beats it.KarabinerElements+goku - to have it configurable. have layers of keybinding to launch something. Like "".+i"" will open iTrem2 and so on.Ice - just landed my setup. Obsidian - I'm new to it but ""file-first"" approach looks good.1Password - still nothing beats it.KarabinerElements+goku - to have it configurable. have layers of keybinding to launch something. Like "".+i"" will open iTrem2 and so on.Ice - just landed my setup. 1Password - still nothing beats it.KarabinerElements+goku - to have it configurable. have layers of keybinding to launch something. Like "".+i"" will open iTrem2 and so on.Ice - just landed my setup. KarabinerElements+goku - to have it configurable. have layers of keybinding to launch something. Like "".+i"" will open iTrem2 and so on.Ice - just landed my setup. Ice - just landed my setup. 
reply

 - Rectangle
- Hazel
- iStat Menus
- Homebrew
- iTerm2Some others:- One Thing, puts a single task/note/etc. in your menu bar
- Übersicht, desktop widgets (uses React)
- Be Focused Pro, make using the Pomodoro method a breeze
- Informant, shows a selected file's size without using Get Info Some others:- One Thing, puts a single task/note/etc. in your menu bar
- Übersicht, desktop widgets (uses React)
- Be Focused Pro, make using the Pomodoro method a breeze
- Informant, shows a selected file's size without using Get Info - One Thing, puts a single task/note/etc. in your menu bar
- Übersicht, desktop widgets (uses React)
- Be Focused Pro, make using the Pomodoro method a breeze
- Informant, shows a selected file's size without using Get Info 
reply

 I switched to Focus. 
reply

 Fmail2 app for a more native fastmail client is also very nice. 
reply

 
reply

 
reply

 Raycast - better spotlightZed - fun text editor for pair programmingf.lux - makes the color temperature warmer at night, much more configurable than the built-in night mode Zed - fun text editor for pair programmingf.lux - makes the color temperature warmer at night, much more configurable than the built-in night mode f.lux - makes the color temperature warmer at night, much more configurable than the built-in night mode 
reply

 
reply

 - Typora : a markdown editor- Flux : screen color temperature adjuster- Rectangle : window management- Transmission : torrent downloader- Pika : color picker- IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - Flux : screen color temperature adjuster- Rectangle : window management- Transmission : torrent downloader- Pika : color picker- IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - Rectangle : window management- Transmission : torrent downloader- Pika : color picker- IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - Transmission : torrent downloader- Pika : color picker- IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - Pika : color picker- IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - IINA : video player- Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - Quickshade : to go below minimal luminosity- The Unarchiver : for unsupported compressed file - The Unarchiver : for unsupported compressed file 
reply

 
reply

 Firefox - WebBrowers Because it's not GoogleFolx - BitTorrent & Download ManagerWireguard - VPNDisplayLinkManager - Multi Display ManagerDrawIO - Diagram SoftwareWarp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management Folx - BitTorrent & Download ManagerWireguard - VPNDisplayLinkManager - Multi Display ManagerDrawIO - Diagram SoftwareWarp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management Wireguard - VPNDisplayLinkManager - Multi Display ManagerDrawIO - Diagram SoftwareWarp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management DisplayLinkManager - Multi Display ManagerDrawIO - Diagram SoftwareWarp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management DrawIO - Diagram SoftwareWarp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management Warp - TerminalIINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management IINA - Video PlayerCodeEdit - Text & Code EditorBitwarden - Password Management CodeEdit - Text & Code EditorBitwarden - Password Management Bitwarden - Password Management 
reply

 https://github.com/neontomo/hacker-tools 
reply

 Affinity - single pay Adobe alternativeKitty - terminal that gets out of your waySafari - most people hate it but I love how battery efficient it is Kitty - terminal that gets out of your waySafari - most people hate it but I love how battery efficient it is Safari - most people hate it but I love how battery efficient it is 
reply

 
reply

 https://www.popclip.app/ 
reply

 Homebrew to install stuff.SelfControl to block websites and be productive.iTerm is a better terminal. SelfControl to block websites and be productive.iTerm is a better terminal. iTerm is a better terminal. 
reply

 Path Finder. Better than Finder. 
reply

 
reply

 A little off topic, but were you aware that you'll never be able to use more then 1 monitor with that before your purchase?I use a MacBook pro for work. I would've preferred the air variant to, but the artificial segmentation forced me to go for the heavier Pro I use a MacBook pro for work. I would've preferred the air variant to, but the artificial segmentation forced me to go for the heavier Pro 
reply

 
reply

 https://support.apple.com/en-us/117373 
reply

 
reply

 - Inkscape- Reaper- iA Writer- Transmit- LocalSend- homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - Reaper- iA Writer- Transmit- LocalSend- homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - iA Writer- Transmit- LocalSend- homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - Transmit- LocalSend- homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - LocalSend- homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - homebrew/cli: ffmpeg, imagemagick, pyenv, nvm- Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. - Sublime, but I'm using it less and less. I tried so hard to support it and have bought multiple upgrades. But, the plugin system and environment handling is terrible. I dread setting it up on new installs or machines. 
reply

 * Secretive - Stores SSH keys in the secure enclave [https://github.com/maxgoedjen/secretive]* Alfred - Better spotlight [https://www.alfredapp.com/]* Hazel - File automations [https://www.noodlesoft.com/]* Arq - Excellent backup software for local and/or remote backups [https://arqbackup.com/]* ChronoSync - File synchronization on steoroids [https://www.econtechnologies.com/chronosync/overview.html]* Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Alfred - Better spotlight [https://www.alfredapp.com/]* Hazel - File automations [https://www.noodlesoft.com/]* Arq - Excellent backup software for local and/or remote backups [https://arqbackup.com/]* ChronoSync - File synchronization on steoroids [https://www.econtechnologies.com/chronosync/overview.html]* Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Hazel - File automations [https://www.noodlesoft.com/]* Arq - Excellent backup software for local and/or remote backups [https://arqbackup.com/]* ChronoSync - File synchronization on steoroids [https://www.econtechnologies.com/chronosync/overview.html]* Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Arq - Excellent backup software for local and/or remote backups [https://arqbackup.com/]* ChronoSync - File synchronization on steoroids [https://www.econtechnologies.com/chronosync/overview.html]* Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * ChronoSync - File synchronization on steoroids [https://www.econtechnologies.com/chronosync/overview.html]* Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Launch Control - Easily edit and control those Launchctl files [https://www.soma-zone.com/LaunchControl/]* Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Sublime Text - Excellent and fast text editor [https://www.sublimetext.com/]* Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Sublime Merge - Excellent Git UI [https://www.sublimemerge.com/]* Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Zed - Currently evaluating if it can replace Sublime Text [https://zed.dev/]* Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Little Snitch - Network Monitor and Application Firewall [https://obdev.at/products/littlesnitch/index.html]* KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * KnockKnock/BlockBlock/Oversight - Various malware monitoring and detection [https://objective-see.org/index.html]* Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Draw.io - Diagramming tool [https://www.drawio.com/]* Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) * Iterm2 - Terminal Replacement [https://iterm2.com/]I use a bunch of other apps, but the above are probably the most broadly applicable :) I use a bunch of other apps, but the above are probably the most broadly applicable :) 
reply

 SetApp - Mentioning now because I mention below ones included in SetApp, it's a monthly all-you-can-eat subscription to a few hundred mac apps. It's an alternative to purchasing them separately. It may well work out cheaper in the long run to just buy them but it's a useful option.Adjust third-party Monitor Brightness - Lunar.app for a standalone tool with the most features (can automate and sync the brightness adjustments with time of day, your laptop monitor, etc). But basic control with the keyboard buttons is possible also from BetterDisplay. DisplayBuddy is another tool in this space. They have varying features and pricepoints.BetterDisplay - Enables HiDPI support (e.g. ""more space"", ""more text"", etc) on third party displays - makes text size bigger for people that prefer it on 1440p/Ultrawide QHD displays nicer for many and apparently much nicer for 4K displays for most people though I've not used a 4K.Multitouch - My current favourite of the various tools that both let you snap windows to the left/right half (or third, etc) PLUS let's you assign three finger click on your touchpad to middle click for opening tabs in Chome. There are a bunch of others apps in these spaces but this is my current favourite in terms of the exact features I need, in 1 app, with a good price point. See also BetterTouchTool (also in SetApp), Rectangle)iTerm2 - Mostly I love Terminal.app, except, when screen sharing in chrome it won't share multiple tabs for some reason, plus, it's the only terminal emulator on any platform that supports tmux integration mode so you can open multiple screens on a remote SSH server that appear as physical tabs or windows locally.Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) Adjust third-party Monitor Brightness - Lunar.app for a standalone tool with the most features (can automate and sync the brightness adjustments with time of day, your laptop monitor, etc). But basic control with the keyboard buttons is possible also from BetterDisplay. DisplayBuddy is another tool in this space. They have varying features and pricepoints.BetterDisplay - Enables HiDPI support (e.g. ""more space"", ""more text"", etc) on third party displays - makes text size bigger for people that prefer it on 1440p/Ultrawide QHD displays nicer for many and apparently much nicer for 4K displays for most people though I've not used a 4K.Multitouch - My current favourite of the various tools that both let you snap windows to the left/right half (or third, etc) PLUS let's you assign three finger click on your touchpad to middle click for opening tabs in Chome. There are a bunch of others apps in these spaces but this is my current favourite in terms of the exact features I need, in 1 app, with a good price point. See also BetterTouchTool (also in SetApp), Rectangle)iTerm2 - Mostly I love Terminal.app, except, when screen sharing in chrome it won't share multiple tabs for some reason, plus, it's the only terminal emulator on any platform that supports tmux integration mode so you can open multiple screens on a remote SSH server that appear as physical tabs or windows locally.Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) BetterDisplay - Enables HiDPI support (e.g. ""more space"", ""more text"", etc) on third party displays - makes text size bigger for people that prefer it on 1440p/Ultrawide QHD displays nicer for many and apparently much nicer for 4K displays for most people though I've not used a 4K.Multitouch - My current favourite of the various tools that both let you snap windows to the left/right half (or third, etc) PLUS let's you assign three finger click on your touchpad to middle click for opening tabs in Chome. There are a bunch of others apps in these spaces but this is my current favourite in terms of the exact features I need, in 1 app, with a good price point. See also BetterTouchTool (also in SetApp), Rectangle)iTerm2 - Mostly I love Terminal.app, except, when screen sharing in chrome it won't share multiple tabs for some reason, plus, it's the only terminal emulator on any platform that supports tmux integration mode so you can open multiple screens on a remote SSH server that appear as physical tabs or windows locally.Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) Multitouch - My current favourite of the various tools that both let you snap windows to the left/right half (or third, etc) PLUS let's you assign three finger click on your touchpad to middle click for opening tabs in Chome. There are a bunch of others apps in these spaces but this is my current favourite in terms of the exact features I need, in 1 app, with a good price point. See also BetterTouchTool (also in SetApp), Rectangle)iTerm2 - Mostly I love Terminal.app, except, when screen sharing in chrome it won't share multiple tabs for some reason, plus, it's the only terminal emulator on any platform that supports tmux integration mode so you can open multiple screens on a remote SSH server that appear as physical tabs or windows locally.Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) iTerm2 - Mostly I love Terminal.app, except, when screen sharing in chrome it won't share multiple tabs for some reason, plus, it's the only terminal emulator on any platform that supports tmux integration mode so you can open multiple screens on a remote SSH server that appear as physical tabs or windows locally.Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) Secretive - Creates SSH keys in the secure enclave that cannot be exfiltrated by Malware, optionally it can either support ""No Auth"" or require TouchID/Password for each use. I have one of each style, for differing security levels of hosts.yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) yubikey-agent - Automates using your YubiKey as an SSH agent and makes it work every time you plug/replug.Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) Karabiner Elements - one of a few different ways to make home/end on third-party keyboards work on macOS.More commonly known ones: iStat Menus (also in SetApp) More commonly known ones: iStat Menus (also in SetApp) 
reply

 Free GPL app to record a screen recording directly to animated gif.I use it to add an embedded video of a bug or tutorial to an issue tracker. I use it to add an embedded video of a bug or tutorial to an issue tracker. 
reply

 
reply

 
reply

 
reply

 iTerm2 in Quake mode is also one of the first things i install. 
reply

 
reply

 https://sigmaos.com 
reply

 https://apps.apple.com/us/app/textgrabber/id1511809489 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Better touch tool - remote cursor access + window snapping and a huge amount of configurability.Iterm2 - don’t know how folks enjoy using the VSCode terminal all day.Backblaze - simple backup. Iterm2 - don’t know how folks enjoy using the VSCode terminal all day.Backblaze - simple backup. Backblaze - simple backup. 
reply

 - raycast (window management, shortcuts, etc.)- tailscale (private mesh vpn)- linear (issue management) - tailscale (private mesh vpn)- linear (issue management) - linear (issue management) 
reply

 - TripMode for reducing data usage while tethering- KeyboardCleanTool for disabling the keyboard when wiping it down - KeyboardCleanTool for disabling the keyboard when wiping it down 
reply

 DaVinci resolve for video editing.QuickTime for recording. QuickTime for recording. 
reply

 (+ alacritty and neovim) 
reply

 
reply

 
reply

 - 1clipboard- kitty terminal- raycast- yabai tiling WM ( i still prefer it over magnet or 
rectangle )- icemenubar ( i prefer it over bartender )- busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - kitty terminal- raycast- yabai tiling WM ( i still prefer it over magnet or 
rectangle )- icemenubar ( i prefer it over bartender )- busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - raycast- yabai tiling WM ( i still prefer it over magnet or 
rectangle )- icemenubar ( i prefer it over bartender )- busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - yabai tiling WM ( i still prefer it over magnet or 
rectangle )- icemenubar ( i prefer it over bartender )- busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - icemenubar ( i prefer it over bartender )- busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - busycalendar ( expensive, but so good )- trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - trillium notes- iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - iina video player- bitwarden- speedcrunch- firefox- jetbrains IDEs - bitwarden- speedcrunch- firefox- jetbrains IDEs - speedcrunch- firefox- jetbrains IDEs - firefox- jetbrains IDEs - jetbrains IDEs 
reply

 
reply

 
reply

 [0]: https://wiredrop.app 
reply

 
reply

 The split tab view is surprisingly handy for me, which is a group of two tabs you can drag around. It sounds like an inferior windows manager, but I use laptop with no monitor, so splitting into more than 2 windows doesn't make sense anyway. 
reply

 
reply

 
reply

 mailmate - best mailclient i've usedkarabiner-elements - great key mappings editor karabiner-elements - great key mappings editor 
reply

 
reply

 
reply

 

 
reply

 
reply

 
reply

 Dashlane for password managerOrbStack which is a much better docker alternativeDaisyDisk for disk cleanupIINA for video playback OrbStack which is a much better docker alternativeDaisyDisk for disk cleanupIINA for video playback DaisyDisk for disk cleanupIINA for video playback IINA for video playback 
reply

 
reply

 
reply

 
reply

 
reply

 In terms of built in stuff you may or may not already know about if coming from another platform...- Spotlight: (⌘space) launch apps, universal search, basic calculator, etc- QuickLook: (space when a file is selected in Finder, space again to close it) Preview a wide variety of files. This sometimes extends into apps as well, like previewing attachments in Outlook or Mail.- Preview: This app is much more powerful than it lets on.- Markup: Do basic annotation of images or documents in Preview or QuickLook.- TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Spotlight: (⌘space) launch apps, universal search, basic calculator, etc- QuickLook: (space when a file is selected in Finder, space again to close it) Preview a wide variety of files. This sometimes extends into apps as well, like previewing attachments in Outlook or Mail.- Preview: This app is much more powerful than it lets on.- Markup: Do basic annotation of images or documents in Preview or QuickLook.- TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - QuickLook: (space when a file is selected in Finder, space again to close it) Preview a wide variety of files. This sometimes extends into apps as well, like previewing attachments in Outlook or Mail.- Preview: This app is much more powerful than it lets on.- Markup: Do basic annotation of images or documents in Preview or QuickLook.- TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Preview: This app is much more powerful than it lets on.- Markup: Do basic annotation of images or documents in Preview or QuickLook.- TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Markup: Do basic annotation of images or documents in Preview or QuickLook.- TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - TextEdit has a plain text mode, I've seen countless ""authorities"" in Mac education get this wrong. The option to toggle rich text vs plain text is in the Format menu. The settings let you choose the default type of file when you open a new file. It's not going to be your code editor or anything, but it's good to know.- Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Image Capture can pull photos off a camera or iPhone, if you don't want to use Photos, or some random 3rd party app.- Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Script Editor: For a long time this only supported Apple Script, which made me think it was going to die. But they quietly updated it to support Javascript, so you can do some local desktop automation with Javascript now. Thought I don't think it's as well supported as it once was in some of Apple's new apps. Of course Shortcuts is also there for a more visual scripting option.- Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Finder: Show the Path Bar and Status Bar (in the View menu). This used to be the default for the OS, and I think it still should be.- Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Not sure if there is a name for it, but you can copy text out of images and videos. This has been a game changer for me. At work, when someone is sharing a website, I can screenshot the presentation, QuickLook the image, and click on the URL to open it in my browser. I do this almost daily.In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. In terms of 3rd party apps...- NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - NotePlan: I use this instead of more traditional To Do apps. I can plan based on the year, month, week, or day, with a free form text doc I can arrange how I want, with templates I can design. The files are plain text docs, so I'm not locked in. Obsidian can do something similar with enough plugins, but this seems cleaner to me.- Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Plex/PlexAmp: I have a Plex server running on a NAS. PlexAmp can use used on my mac or phone to play music in my library.- Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Hush: A Safari extension to turn off all those cookie prompts on websites- IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - IINA: Video player for when Quicktime can't handle something. I switch away from VLC, because I got so tired of it adding everything to a playlist, and there is no way to turn it off. With IINA I can simple open a file, watch it, and close it. A video player doesn't need to be any more than that.- 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - 1Password: Password manager. I've been using it basically forever. They seem to keep up on things pretty well and I haven't been left wanting.- Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. - Firefox: An alternative to Safari (my primary browser) when I need it. I don't want any Chromium browsers on my system.I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. I perged a lot of 3rd party stuff a while back and these are some of the things that made the cut. 
reply

 took me only a day to forget i ever used apple+space for apps (though for non cli apps i still open finder to app-window to find some obscure thing in Applications ive forgotten names of) 
reply

 I'm not always a fan of the order, but it's good enough for me. I used to head down the power user road for everything (I used Quicksilver in the pre-Spotlight days, used LaunchBar for a bit, PathFinder, etc), but I like being able to use a system without having to do a ton of setup. It also seemed like the people who had so many little utilities running that they needed yet another utility, like Bartender, to manage their menubar complained about their system being slow a lot. So the less I can run the better. These days something has to be really worth it, I tend to avoid installing something that replaces an OS function if it's just a marginal improvement.I've toyed with the idea of not installing any 3rd party apps to see how far that takes me, but that's tough given my current wants/needs.Is there a reason you go to Finder to open apps instead of using Launchpad? I throw it down in my dock, and even if I want to avoid the iOS-style full screen menu, a right-click on it works kind of like the start menu in Windows, listing all the apps/folders. I've toyed with the idea of not installing any 3rd party apps to see how far that takes me, but that's tough given my current wants/needs.Is there a reason you go to Finder to open apps instead of using Launchpad? I throw it down in my dock, and even if I want to avoid the iOS-style full screen menu, a right-click on it works kind of like the start menu in Windows, listing all the apps/folders. Is there a reason you go to Finder to open apps instead of using Launchpad? I throw it down in my dock, and even if I want to avoid the iOS-style full screen menu, a right-click on it works kind of like the start menu in Windows, listing all the apps/folders. 
reply

 i agree on this; i used to try to automate settings on macos but gaveup well over 10years ago as each os version changed plist files, and some settings only changeable via mouse-clicks; im sure there's been improvements nowadays but i wont hold my breath (just disable features i dispise now like notification-spam and auto-index/search ""features"")the reason i use finder is finder is always open; apple+tab to it, then some hotkey to open Applications. if i can avoid the mouse (on the laptop) i will - although since mac keyboards are tiny they have been giving my hands cramps lately - so ive just slowed down a little lol.launchpad: ive rarely used, typically disable its hot-corner thing too (i often prefer having layers of stacked windows vs ""fresh desktops"" or even tiling wm's)ps nice handle loledit: i forgot to mention, i also use `open /Applicatons/bla` but going into Applications and seeing icon + list of names triggers some memory of why that app is there) - going to Applications is basically an edge case that happens rarely (use dock for terminal/browser) and thats about all i open the reason i use finder is finder is always open; apple+tab to it, then some hotkey to open Applications. if i can avoid the mouse (on the laptop) i will - although since mac keyboards are tiny they have been giving my hands cramps lately - so ive just slowed down a little lol.launchpad: ive rarely used, typically disable its hot-corner thing too (i often prefer having layers of stacked windows vs ""fresh desktops"" or even tiling wm's)ps nice handle loledit: i forgot to mention, i also use `open /Applicatons/bla` but going into Applications and seeing icon + list of names triggers some memory of why that app is there) - going to Applications is basically an edge case that happens rarely (use dock for terminal/browser) and thats about all i open launchpad: ive rarely used, typically disable its hot-corner thing too (i often prefer having layers of stacked windows vs ""fresh desktops"" or even tiling wm's)ps nice handle loledit: i forgot to mention, i also use `open /Applicatons/bla` but going into Applications and seeing icon + list of names triggers some memory of why that app is there) - going to Applications is basically an edge case that happens rarely (use dock for terminal/browser) and thats about all i open ps nice handle loledit: i forgot to mention, i also use `open /Applicatons/bla` but going into Applications and seeing icon + list of names triggers some memory of why that app is there) - going to Applications is basically an edge case that happens rarely (use dock for terminal/browser) and thats about all i open edit: i forgot to mention, i also use `open /Applicatons/bla` but going into Applications and seeing icon + list of names triggers some memory of why that app is there) - going to Applications is basically an edge case that happens rarely (use dock for terminal/browser) and thats about all i open 
reply

 
reply

 Superhuman. Expensive and delightful email.Velja. Opens URLs in preferred browser (Safari for everything except Meet, which opens in Chrome).PS - I’m not a developer but really like Zed as a text editor. Velja. Opens URLs in preferred browser (Safari for everything except Meet, which opens in Chrome).PS - I’m not a developer but really like Zed as a text editor. PS - I’m not a developer but really like Zed as a text editor. 
reply

 I think what I missed was attachments... and when researching it really bothers me how people defend the design and invent the most interesting workarounds... 
reply

 - Obsidian notes (https://obsidian.md/)- Tailscale VPN (https://tailscale.com/)- iTerm terminal app (https://iterm2.com)- Rectangle Pro window manager (https://rectangleapp.com/pro) there's also a free version, I just prefer to support the author with a Pro purchase.- Homebrew packager manager (https://brew.sh/)- SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Tailscale VPN (https://tailscale.com/)- iTerm terminal app (https://iterm2.com)- Rectangle Pro window manager (https://rectangleapp.com/pro) there's also a free version, I just prefer to support the author with a Pro purchase.- Homebrew packager manager (https://brew.sh/)- SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - iTerm terminal app (https://iterm2.com)- Rectangle Pro window manager (https://rectangleapp.com/pro) there's also a free version, I just prefer to support the author with a Pro purchase.- Homebrew packager manager (https://brew.sh/)- SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Rectangle Pro window manager (https://rectangleapp.com/pro) there's also a free version, I just prefer to support the author with a Pro purchase.- Homebrew packager manager (https://brew.sh/)- SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Homebrew packager manager (https://brew.sh/)- SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - SwiftBar for menu bar applets. (https://swiftbar.app/)- Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Visual Studio Code (https://code.visualstudio.com/)- SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - SyncThing for file syncing across hosts (https://syncthing.net/)- Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Acorn image editor (https://flyingmeat.com/acorn/)- 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - 1Password password manager (don't necessarily recommend it, there's probably better/cheaper options.)- Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Fantastical calendar app (https://flexibits.com/fantastical)- MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - MonitorControl third-party monitor utility (https://github.com/MonitorControl/MonitorControl#readme)- DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - DB Browser for SQLite (https://sqlitebrowser.org/)- Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Handbrake for video conversion. (https://handbrake.fr/)- IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - IINA for videos. Prefer it over VLC Player. (https://iina.io/)- The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - The Unarchiver for misc compressed files. (https://theunarchiver.com/)- Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Wi-Fi Explorer Pro for wi-fi stuff. (https://www.intuitibits.com/products/wifiexplorer/)- Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) - Maestral if you want to use Dropbox without the cruft. (https://maestral.app/) 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
33,johnwheeler,Ask HN: Share Your YoutTube Channel,https://news.ycombinator.com/item?id=40618954,"Always looking for some new Hackers to follow on YouTube, the more obscure, the better! Waddya got?

Comments URL: https://news.ycombinator.com/item?id=40618954
Points: 12
# Comments: 0",2024-06-08T17:16:04Z,"mine: https://www.youtube.com/channel/UCPMnwxCk79CBtdurp3Hw-3w 
reply

 Ask HN: What is your favorite YouTube channel for developers? - https://news.ycombinator.com/item?id=12702651 (2016)Ask HN: Favorite teachers on YouTube? - https://news.ycombinator.com/item?id=17999659 (2018)Ask HN: What are your favorite YouTube channels to learn stuff? - https://news.ycombinator.com/item?id=20385679 (2019)Ask HN: Your favorite YouTube channels? - https://news.ycombinator.com/item?id=7609584 (2014)Ask HN: Share your favorite YouTube channels focused on mastering a skill/craft - https://news.ycombinator.com/item?id=34666777 (2023)Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: Favorite teachers on YouTube? - https://news.ycombinator.com/item?id=17999659 (2018)Ask HN: What are your favorite YouTube channels to learn stuff? - https://news.ycombinator.com/item?id=20385679 (2019)Ask HN: Your favorite YouTube channels? - https://news.ycombinator.com/item?id=7609584 (2014)Ask HN: Share your favorite YouTube channels focused on mastering a skill/craft - https://news.ycombinator.com/item?id=34666777 (2023)Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: What are your favorite YouTube channels to learn stuff? - https://news.ycombinator.com/item?id=20385679 (2019)Ask HN: Your favorite YouTube channels? - https://news.ycombinator.com/item?id=7609584 (2014)Ask HN: Share your favorite YouTube channels focused on mastering a skill/craft - https://news.ycombinator.com/item?id=34666777 (2023)Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: Your favorite YouTube channels? - https://news.ycombinator.com/item?id=7609584 (2014)Ask HN: Share your favorite YouTube channels focused on mastering a skill/craft - https://news.ycombinator.com/item?id=34666777 (2023)Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: Share your favorite YouTube channels focused on mastering a skill/craft - https://news.ycombinator.com/item?id=34666777 (2023)Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: What are some of your favorite YouTube channels? -  https://news.ycombinator.com/item?id=32378309 (2022)Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) Ask HN: Who are your favorite tech youtubers - https://news.ycombinator.com/item?id=40139538 (2024)(not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) (not quite what you're asking, but thought I'd post em - Have a great weekend y'all! :) 
reply

 It’s been transformational for me, having this work-in-public video sketchbook. Slowly moved from just uploading iPhone videos shot from the hip to mostly using DLog footage shot on a DJI Osmo Pocket 3 colour corrected/graded with sound design in Final Cut Pro, and I’m looking to add a Sony FX-30 to the mix this summer.As a whole I call it my “Dailies” project - the term of a course an old Hollywood practice of developing each shooting day’s footage so the studios could make sure the director is doing a good job.It’s also pushed me into a daily writing practice and hoping to do more sophisticated work this year, so would love to have some more eyeballs for this and all that. :)https://www.youtube.com/carrozo As a whole I call it my “Dailies” project - the term of a course an old Hollywood practice of developing each shooting day’s footage so the studios could make sure the director is doing a good job.It’s also pushed me into a daily writing practice and hoping to do more sophisticated work this year, so would love to have some more eyeballs for this and all that. :)https://www.youtube.com/carrozo It’s also pushed me into a daily writing practice and hoping to do more sophisticated work this year, so would love to have some more eyeballs for this and all that. :)https://www.youtube.com/carrozo https://www.youtube.com/carrozo 
reply

 My most popular video is the heavily armed military guys in Nigeria trying to get money out of me (spoiler, I didn’t pay)https://youtube.com/watch?v=7RTlDa2cg0o https://youtube.com/watch?v=7RTlDa2cg0o 
reply

 
reply

 Now I write for magazines, do youtube, have a few published books and anything else I can think of to earn some side income. 
reply

 Staged Functional Programming In SpiralI am doing a fully fused ML GPU library along with a poker game to run it on in my own programming language that I've worked on for many years. Currently, right at this very moment, I am trying to optimize compilation times along with register usage by doing more on the heap, so I am creating a reference counting Cuda backend for Spiral.Both the ML library and the poker game are designed to run completely on GPU for the sake of getting large speedups.Once I am done with this and have trained the agent, I'll test it out on play money sites, and if that doesn't get it eaten by the rake, with real money.I am doing fairly sophisticated functional programming in the videos, the kind you could only do in the Spiral language. Many parts of the series involve me working and improving the language itself in F#. I am doing a fully fused ML GPU library along with a poker game to run it on in my own programming language that I've worked on for many years. Currently, right at this very moment, I am trying to optimize compilation times along with register usage by doing more on the heap, so I am creating a reference counting Cuda backend for Spiral.Both the ML library and the poker game are designed to run completely on GPU for the sake of getting large speedups.Once I am done with this and have trained the agent, I'll test it out on play money sites, and if that doesn't get it eaten by the rake, with real money.I am doing fairly sophisticated functional programming in the videos, the kind you could only do in the Spiral language. Many parts of the series involve me working and improving the language itself in F#. Both the ML library and the poker game are designed to run completely on GPU for the sake of getting large speedups.Once I am done with this and have trained the agent, I'll test it out on play money sites, and if that doesn't get it eaten by the rake, with real money.I am doing fairly sophisticated functional programming in the videos, the kind you could only do in the Spiral language. Many parts of the series involve me working and improving the language itself in F#. Once I am done with this and have trained the agent, I'll test it out on play money sites, and if that doesn't get it eaten by the rake, with real money.I am doing fairly sophisticated functional programming in the videos, the kind you could only do in the Spiral language. Many parts of the series involve me working and improving the language itself in F#. I am doing fairly sophisticated functional programming in the videos, the kind you could only do in the Spiral language. Many parts of the series involve me working and improving the language itself in F#. 
reply

 
reply

 
reply

 
reply

 I have a repo with some of the stuff I use to produce my videos, too: https://gitlab.com/crgk/chadobear-monorepo/-/tree/main/studi...It’s very sloppy and hacky and maybe(?) more interesting to this audience than the videos themselves. It’s very sloppy and hacky and maybe(?) more interesting to this audience than the videos themselves. 
reply

 https://www.youtube.com/@WeLoveEveryGame/videos 
reply

 [0] https://youtube.com/playlist?list=PLPUSFL3ut4ibHYoBes2tku_XU... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
34,great_filter,Tell HN: Domain migrated from Google to Squarespace went down after 1 month,https://news.ycombinator.com/item?id=40623332,"When I first saw comments in HN advising people to transfer to someone else before the migration, I was hesitant to do it. Then it just happened automatically and all seemed well. Or so I thought!After more than 1 month, it randomly went down, at the worst ti…",2024-06-09T10:10:33Z,"After more than 1 month, it randomly went down, at the worst time possible (the weekend, when it's the busiest time for my platform and when all the engineers are off). My company's main domain and email have been down for more than 12 hours and customer support is now asking for us to wait even more.Not very hopeful posting here will help, but thought people should know.Here's the timeline:(1) Saturday, 6PM UTC - our customers start reaching out that they cannot load our platform.DNS requests are returning `ns1.unknown-nameservers.com` and `ns2.unknown-nameservers.com` as the name servers.I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Not very hopeful posting here will help, but thought people should know.Here's the timeline:(1) Saturday, 6PM UTC - our customers start reaching out that they cannot load our platform.DNS requests are returning `ns1.unknown-nameservers.com` and `ns2.unknown-nameservers.com` as the name servers.I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Here's the timeline:(1) Saturday, 6PM UTC - our customers start reaching out that they cannot load our platform.DNS requests are returning `ns1.unknown-nameservers.com` and `ns2.unknown-nameservers.com` as the name servers.I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (1) Saturday, 6PM UTC - our customers start reaching out that they cannot load our platform.DNS requests are returning `ns1.unknown-nameservers.com` and `ns2.unknown-nameservers.com` as the name servers.I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. DNS requests are returning `ns1.unknown-nameservers.com` and `ns2.unknown-nameservers.com` as the name servers.I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. I send an email to from my personal inbox to my work inbox. It doesn't arrive. So not only my platform is down, most of our customer emails don't arrive too!Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Trying to access Squarespace account just shows a message that says ""This account is currently unavailable. Please contact Customer Care.""Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Panic ensues and me and my co-founder start trying to reach out to customer support via email, their helpdesk, Twitter, Facebook, Linkedin. Even have someone we know who knows a PM at Squarespace escalate our case.Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Squarespace says they have 24/7 support but we cannot get anyone to respond. Various Facebook and Twitter messages indicate that this happens to others too.(2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (2) Saturday, 11:00 PM UTC - it's been 5 hours. Whatever users were able to access the platform will likely have had their DNS caches updated by now. My co-founder and I decide it's time to migrate to a different domain. So I spend the next 30 minutes deploying and updating third party services with our new domain name. I set up our voicemail to tell people to use the new domain while the main one is down. Hopefully they will find our number even if the main domain is down.(3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (3) Saturday, 11:30 PM UTC - Squarespace still has not responded on any of the channels. But now I notice they changed the name server to `ns-cloud-a1.googledomains.com.`. That's almost correct, but before they were randomly changed by Squarespace, they actually were `ns-cloud-e1.googledomains.com.` (with e instead of a)Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. Next 30 minutes I spend playing the lottery: I keep creating new Cloud DNS zones on GCP hoping that it would be assigned `ns-cloud-a1.googledomains.com.` as the name server (instead of b1, c1, e1 or d1). No luck. Seems GCP is now reserving `ns-cloud-a1.googledomains.com.` so I will need Squarespace to undo whatever they did for this to work.I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. I then send GCP an email asking them to create us a zone with `ns-cloud-a1.googledomains.com.` name server. It seems like their API for creating zones has a parameter called nameServerSets which may help (but the parameter documentation says to contact account manager if we want to use it).(4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (4) Sunday, 01:10 AM UTC - Squarespace finally responds on Facebook and Twitter. They suggest `ns-cloud-a1.googledomains.com.` is a default Squarespace name server and that it shouldn't matter whether it's e1 or a1.They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. They say it doesn't matter, but they refuse to change it back.What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. What's even more frustrating is that I can run `dig @ns-cloud-a1.googledomains.com mydomain.com` and `dig @ns-cloud-e1.googledomains.com mydomain.com` and see that the former doesn't work and the latter does work.They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. They send me a form to submit for account recovery. I submit the form.(5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (5) Sunday, 02:05 AM UTC - Squarespace responds via email to the form I submitted to gain access to my account. They say it will take 1 business day to get a response.(6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. (6) Sunday, 10:00 AM UTC - I managed to get some sleep. Squarespace is not responding. All the while thousands of customers are not able to access our platform and missing out on their sales. At least now that I know I've exhausted all the options, I can write this rant. For the future, here is something I learned, and I would suggest trying to decouple the services as much as possible. This is a much simpler version for a few-member teams, no round-robin, no nada -- just plain compartmentalization.- Have a separate Domain registrar. Whichever you are comfortable and happy with.- Then, host the DNS elsewhere. Again, whichever you choose - Cloudflare is pretty rock solid these days.- For other critical infrastructure, such as emails, which your business depends on, host it elsewhere. Google Workspace is still one of the best unless you really hate Google. Of course, alternatives exists but Google works when others gets involved (team, customers, etc).- Hosting your actual website (the marketing/landing pages) - foobar.com - host it with another reputable host. If this goes, make way to move within hours, if not minutes, if you need to.- Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. - Have a separate Domain registrar. Whichever you are comfortable and happy with.- Then, host the DNS elsewhere. Again, whichever you choose - Cloudflare is pretty rock solid these days.- For other critical infrastructure, such as emails, which your business depends on, host it elsewhere. Google Workspace is still one of the best unless you really hate Google. Of course, alternatives exists but Google works when others gets involved (team, customers, etc).- Hosting your actual website (the marketing/landing pages) - foobar.com - host it with another reputable host. If this goes, make way to move within hours, if not minutes, if you need to.- Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. - Then, host the DNS elsewhere. Again, whichever you choose - Cloudflare is pretty rock solid these days.- For other critical infrastructure, such as emails, which your business depends on, host it elsewhere. Google Workspace is still one of the best unless you really hate Google. Of course, alternatives exists but Google works when others gets involved (team, customers, etc).- Hosting your actual website (the marketing/landing pages) - foobar.com - host it with another reputable host. If this goes, make way to move within hours, if not minutes, if you need to.- Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. - For other critical infrastructure, such as emails, which your business depends on, host it elsewhere. Google Workspace is still one of the best unless you really hate Google. Of course, alternatives exists but Google works when others gets involved (team, customers, etc).- Hosting your actual website (the marketing/landing pages) - foobar.com - host it with another reputable host. If this goes, make way to move within hours, if not minutes, if you need to.- Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. - Hosting your actual website (the marketing/landing pages) - foobar.com - host it with another reputable host. If this goes, make way to move within hours, if not minutes, if you need to.- Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. - Your app, I'd also suggest decoupling it from the main marketing/landing website - app.foobar.com. Host this with another reputable host with a backup plan. 
reply

 PS. I have migrated all my domains off SquareSpace. I do not trust on Google business decisions. 
reply

 Host DNS yourself, always. But it won't help for a shitty registrars. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 There are a few registrars that can be used. I wish this list be bigger, but it's not only squarespace. 
reply

 
reply

 
reply

"
35,julienreszka,Ask HN: Why is nobody manufacturing low tech electric cars in 2024?,https://news.ycombinator.com/item?id=40668427,"Just let me drive. I don't need fancy screens.

Comments URL: https://news.ycombinator.com/item?id=40668427
Points: 8
# Comments: 12",2024-06-13T11:46:03Z,"If you want something more car-shaped, the Renault Zoe has very few tech feature.Similarly, Kia Soul has a reversing camera… and that's about it! No radar, lane assist, carplay or anything like that.Cstomers only want 3 things. A comfortable ride, a safe journey, and $thing. The problem is, everyone's one more thing is different. I want DAB radio, you want cruise control, she wants lane assist, he wants automatic parking.Creating a dozen different SKUs for all those things is complicated. Getting regulatory approval for every variation is expensive.So most manufacturers sell only a few variations of their models. Similarly, Kia Soul has a reversing camera… and that's about it! No radar, lane assist, carplay or anything like that.Cstomers only want 3 things. A comfortable ride, a safe journey, and $thing. The problem is, everyone's one more thing is different. I want DAB radio, you want cruise control, she wants lane assist, he wants automatic parking.Creating a dozen different SKUs for all those things is complicated. Getting regulatory approval for every variation is expensive.So most manufacturers sell only a few variations of their models. Cstomers only want 3 things. A comfortable ride, a safe journey, and $thing. The problem is, everyone's one more thing is different. I want DAB radio, you want cruise control, she wants lane assist, he wants automatic parking.Creating a dozen different SKUs for all those things is complicated. Getting regulatory approval for every variation is expensive.So most manufacturers sell only a few variations of their models. Creating a dozen different SKUs for all those things is complicated. Getting regulatory approval for every variation is expensive.So most manufacturers sell only a few variations of their models. So most manufacturers sell only a few variations of their models. 
reply

 The Renault Zoe has been discontinued, replaced by the Renault 5 e, which has ADAS and lots of other electric features.Starting with model year 2023, the Kia Soul also has all the tech required by law: https://thebrakereport.com/kia-enhances-adas-for-2023-soul 
It also has Car Play now. Starting with model year 2023, the Kia Soul also has all the tech required by law: https://thebrakereport.com/kia-enhances-adas-for-2023-soul 
It also has Car Play now. 
reply

 Every car has a radio.  And DAB support has no real effect on cost and I don't think the radio chip is what OP has in mind for ""low tech"".The rest of that has a very clear divide.  Cruise control is low tech and negligible cost, especially on an electric vehicle.  Lane assist and automatic parking are high tech and need pricey extra parts to implement.And this logic doesn't explain why plenty of low tech non-electric cars exist.Someone else already replied about how the examples you gave changed to add flashy high tech stuff. The rest of that has a very clear divide.  Cruise control is low tech and negligible cost, especially on an electric vehicle.  Lane assist and automatic parking are high tech and need pricey extra parts to implement.And this logic doesn't explain why plenty of low tech non-electric cars exist.Someone else already replied about how the examples you gave changed to add flashy high tech stuff. And this logic doesn't explain why plenty of low tech non-electric cars exist.Someone else already replied about how the examples you gave changed to add flashy high tech stuff. Someone else already replied about how the examples you gave changed to add flashy high tech stuff. 
reply

 Radar cruise control is not, and may be what the OP was thinking of. 
reply

 
reply

 This is the correct answer. And on top of this, new cars also compete with used cars. The very few people who don’t want any $thing are often not picky buyers and are more likely to just buy a cheaper used car. They wouldn’t be a buyer even if automakers did build a car for them. 
reply

 
reply

 
reply

 And really, the subset of the market that still follows these standards is small, and shrinking. The vast majority of PCs today are laptops with few, if any, swappable parts.Pretty much the only segment where this still exists is the enthusiast subset of the gaming PC market. Pretty much the only segment where this still exists is the enthusiast subset of the gaming PC market. 
reply

 It is a bit more complex than that of course and generally speaking you are right. 
reply

 Things like ATX power supplies, ATX/mATX motherboards, tower cases, are pretty squarely for the PC gaming segment now.  It's difficult to even find a ""business"" motherboard these days, where as 20 years ago, they were nearly all designed with this use-case first.  There's ASRock Rack type stuff that targets some custom server-type use cases, but the big server manufacturers make their own proprietary stuff. 
reply

 there are options out there for itx and matx server chassis, even ATX and EATX.Silverstone in particular has some interesting options for rack mount workstations based around 360mm AIO water-cooling, ATX boards and PSUs, consumer GPUs, etc. though those are meant more for the half and quarter rack enclosures designed to be installed in a home or office environment. Silverstone in particular has some interesting options for rack mount workstations based around 360mm AIO water-cooling, ATX boards and PSUs, consumer GPUs, etc. though those are meant more for the half and quarter rack enclosures designed to be installed in a home or office environment. 
reply

 But most of the market is Dell/Lenovo/HP/Supermicro (and in China, a couple other players).Silverstone is an absolutely tiny business by comparison.  Their US office is 1/6th of a shared warehouse space in an LA suburb, next to a laminate flooring retailer. Silverstone is an absolutely tiny business by comparison.  Their US office is 1/6th of a shared warehouse space in an LA suburb, next to a laminate flooring retailer. 
reply

 
reply

 
reply

 
reply

 
reply

 That’s no longer true for the most consumer laptops. 
reply

 https://www.tiktok.com/@hu_changwen/video/736154455749586460... 
reply

 
reply

 This stability thing is just a weak excuse used by car companies. 
reply

 
reply

 
reply

 
reply

 Before recent legislative troubles (lol), France was also working on a law that would give consumer unions (think iFixit but with publicly available finance) the right to give ""repairability indexes"" on multiple products, including cars, that would have to be presented to the buyer, even second-hand buyers. 
reply

 
reply

 And the reversing camera is necessary because modern cars have tiny submarine like windows. 
reply

 Luckily, modern technology solves this, and more, if you get the backup camera (now legally required in US) and the rear blind-spot-detection radar.  Visibility with those is much better than it was in the old days, as long as you know how to use them.  However, they do all come at a cost, especially the blind-spot radars. 
reply

 
reply

 
reply

 Different SKUs is an absolute non-issue in the car industry when it comes to tech gizmos and other optional extras. You want different suspension? No biggie. Manual vs automatic? Sure. Different kind of entertainment system? Of course. Different (branded) speakers? Yup.Anything is optionable. Anything is optionable. 
reply

 By contrast, budget-friendly Japanese cars don't have options like this; you get maybe 3 option packages to choose from and that's it.  Manufacturing is much simpler and gets better economies of scale when everyone gets the same thing. 
reply

 According to Kia’s website, the cheapest Soul you can buy has CarPlay/Android Auto.  Standard feature on the “LX”, 8in touchscreen.Does it even cost anything for an automaker to allow phones to use the screen for CarPlay/Android Auto?  The cost savings must be so miniscule, and the convenience of being able to use your phone to navigate/listen to music and other audio is immense. Does it even cost anything for an automaker to allow phones to use the screen for CarPlay/Android Auto?  The cost savings must be so miniscule, and the convenience of being able to use your phone to navigate/listen to music and other audio is immense. 
reply

 
reply

 The only reason an automaker does not include the ability to use CarPlay/Android Auto is because they want to lock-in the customer to their UI and avoid becoming a commodity. 
reply

 
reply

 
reply

 
reply

 > Citroën’s Ami, a small $6,000 electric “car,” is apparently coming to the US as part of new electric car subscription service.No thank you. No thank you. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Required safety systems include emergency breaking, emergency lane-keeping, intelligent speed assistance (car must use cameras or GPS to determine current speed limit), driver attention warning systems and many more.That fancy screen is really not a cost factor. These days you can buy after-market screens with Car Play and Android auto support for 100 EURs or less. But all the safety systems needs lots of sensors, and also the ability to auto-brake and auto-steer in emergency situations.https://bmdv.bund.de/SharedDocs/EN/Articles/StV/Roadtraffic/... That fancy screen is really not a cost factor. These days you can buy after-market screens with Car Play and Android auto support for 100 EURs or less. But all the safety systems needs lots of sensors, and also the ability to auto-brake and auto-steer in emergency situations.https://bmdv.bund.de/SharedDocs/EN/Articles/StV/Roadtraffic/... https://bmdv.bund.de/SharedDocs/EN/Articles/StV/Roadtraffic/... 
reply

 Which is a rather recent development and certainly a protectionist move and will hinder adaptation massively.You need the full suite for lane controls, attention monitoring, emergency brake systems, etc...It is simply impossible to now release low tech cars and it is a political decision by the EU that is highly questionable. You need the full suite for lane controls, attention monitoring, emergency brake systems, etc...It is simply impossible to now release low tech cars and it is a political decision by the EU that is highly questionable. It is simply impossible to now release low tech cars and it is a political decision by the EU that is highly questionable. 
reply

 
reply

 https://cinea.ec.europa.eu/publications/eu-road-safety-towar... 
reply

 Per Poi Dog Pondering:Well the ancient Egyptians and the other AfricansThe Mayans, the Incas, and all the PolynesiansAll around the world, a long long time agoPeople would walk wherever they had to go Well the ancient Egyptians and the other AfricansThe Mayans, the Incas, and all the PolynesiansAll around the world, a long long time agoPeople would walk wherever they had to go The Mayans, the Incas, and all the PolynesiansAll around the world, a long long time agoPeople would walk wherever they had to go All around the world, a long long time agoPeople would walk wherever they had to go People would walk wherever they had to go 
reply

 
reply

 
reply

 [0] https://assets.publishing.service.gov.uk/media/661d3b95ac3da... 
reply

 The problem is that even in reasonable sized towns not having a car is very limiting. The solution is much better public transport - more frequent is the big thing. That is the differenceOn the other hand I did not have a car in London (which has very frequent public transport until quite late in the night), nor in Manchester (not as good, but OK) until I had a child. It was no problem. paying for the occasional taxi and hiring cars for trips when needed was a lot cheaper than running a car and more convenient too. On the other hand I did not have a car in London (which has very frequent public transport until quite late in the night), nor in Manchester (not as good, but OK) until I had a child. It was no problem. paying for the occasional taxi and hiring cars for trips when needed was a lot cheaper than running a car and more convenient too. 
reply

 
reply

 > People would walk wherever they had to goOr had their slaves carry them in a litter Or had their slaves carry them in a litter 
reply

 Despite many years of hand-wringing about environmental impacts of air travel, almost nothing has been done to address this. 
reply

 
reply

 Wish this was true. I wanted to buy one for myself, but even the most expensive aftermarket CarPlay units are absolutely terrible. Laggy & unresponsive touch screens, underpowered internals, gaudy designs etc.I wonder why it’s still such a challenge to make something that feels as good as a first gen iPad from 2010. I wonder why it’s still such a challenge to make something that feels as good as a first gen iPad from 2010. 
reply

 Cars have a unique set of operating requirements. During the course of a year, my car could be -40F or 160F inside, depending on if it’s winter or summer. Electronics that operate reliably in that temp range are expensive. 
reply

 
reply

 Twizy and Ami are not regular passenger vehicles. I am sure there are less requirements for them. 
reply

 Edit: Correction, it's the most popular electric car un Europe.> by the end of 2020, the Zoe ranked as the all-time best selling plug-in car in Europehttps://en.wikipedia.org/wiki/Renault_Zoe#Sales_and_markets > by the end of 2020, the Zoe ranked as the all-time best selling plug-in car in Europehttps://en.wikipedia.org/wiki/Renault_Zoe#Sales_and_markets https://en.wikipedia.org/wiki/Renault_Zoe#Sales_and_markets 
reply

 
reply

 
reply

 Basic ICE cars are essentially sold at cost, sometimes as loss leaders, because the manufacturers make a long-tail of money supplying parts and maintenance for the cars over their lifetime; for 10-20 years they now have a (variable) recurring revenue stream. So a lot of automakers' incentives are to get as large of a fleet as possible.Electric cars inherently have much less of a maintenance burden because there are way fewer moving parts in a motor versus an engine. For example, there's no oil changes ever 3k miles or timing belts to replace ever 30k miles.That means, for electric car companies, business model options area) introduce SaaS subscriptions for electronic features (a - la Tesla Autopilot premium, supercharger network subscriptions)b) introduce unnecessary complexity to increase maintenance revenue (gullwing doors)c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. Electric cars inherently have much less of a maintenance burden because there are way fewer moving parts in a motor versus an engine. For example, there's no oil changes ever 3k miles or timing belts to replace ever 30k miles.That means, for electric car companies, business model options area) introduce SaaS subscriptions for electronic features (a - la Tesla Autopilot premium, supercharger network subscriptions)b) introduce unnecessary complexity to increase maintenance revenue (gullwing doors)c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. That means, for electric car companies, business model options area) introduce SaaS subscriptions for electronic features (a - la Tesla Autopilot premium, supercharger network subscriptions)b) introduce unnecessary complexity to increase maintenance revenue (gullwing doors)c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. a) introduce SaaS subscriptions for electronic features (a - la Tesla Autopilot premium, supercharger network subscriptions)b) introduce unnecessary complexity to increase maintenance revenue (gullwing doors)c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. b) introduce unnecessary complexity to increase maintenance revenue (gullwing doors)c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. c) sell at a profit margin off the factory. Can have higher margins and higher total profit for luxury cars versus basic carsAnd Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. And Tesla's recent push towards robotaxis of their existing fleet would be a totally killer disruption of the unit economics by generating recurring revenue off their fleet.So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. So all the incentives for electric cars point towards high tech luxury, not basic eco-cars. There may be an exception to the rule in some countries, and those may be related to government subsidies. 
reply

 Not just that but fuel economy regulations, (like CAFE in the USA) mandated average fleet fuel economy that must be met for automakers to avoid fines. GM had to sell a bunch of Cavaliers to be able to sell a bunch of (profitable) Silverados and Suburbans. With hybrids and EVs these days, regulations no longer favor the small car. 
reply

 All the manufacturing are talking about is the need for the 'vehicle as a platform' to sell subscriptions, services and driver data. I've seen so many PowerPoints about this, it's nauseating. 
reply

 A modern ICE outlasts the rest of the car. You might replace the alternator or water pump, but those are made by third parties not the OEM. You will replace the oil, but again, the OEM doesn't make that.The dealers make a lot of money on after sales, but (except Tesla) those are independent third parties. The manufacture doesn't get much after sales.OEM parts do sell for more than third party. And so there is money in OEM parts, but after 5 years most people are buying replacement parts from the third party (the OEM doesn't make those parts - they are buying from a third party and putting a markup on them).  Sometimes people will buy OEM parts instead of a third party as OEM tends to give much higher quality vs random third party. The dealers make a lot of money on after sales, but (except Tesla) those are independent third parties. The manufacture doesn't get much after sales.OEM parts do sell for more than third party. And so there is money in OEM parts, but after 5 years most people are buying replacement parts from the third party (the OEM doesn't make those parts - they are buying from a third party and putting a markup on them).  Sometimes people will buy OEM parts instead of a third party as OEM tends to give much higher quality vs random third party. OEM parts do sell for more than third party. And so there is money in OEM parts, but after 5 years most people are buying replacement parts from the third party (the OEM doesn't make those parts - they are buying from a third party and putting a markup on them).  Sometimes people will buy OEM parts instead of a third party as OEM tends to give much higher quality vs random third party. 
reply

 They sell you battery packs for $20,000 around every 8-10 years. 
reply

 Additionally, CarPlay/Android Auto is a hard requirement for me and many other consumers these days. I wouldn’t consider a car - gas or electric - without it. I opted for a Mercedes gas car in part because there was no overall good electric car with wireless CarPlay in my price range. 
reply

 But that doesn't explain why automakers are moving the regular controls from physical buttons to the touchscreen. That's the part that I consider a serious problem. 
reply

 
reply

 The big reason touchscreens are so favored is because they don't require that you finalize your user-interface design decisions so early in the design cycle.  With physical buttons, you have to design molds etc. to have the parts ready for final assembly.  What if you want to make a change?  Whereas with a touchscreen UI, you can worry about UI details any time and just make changes in software, even after the car has been sold if necessary.  So for the early design process, you just specify the size screen you want, and design the molds for the bezels etc. 
reply

 
reply

 If the added expense is so onerous to the automaker, then they can raise the price of the car to make up for it. I'd buy that, where I won't buy a car that has inferior controls. Why would I, when there is still a plethora of older cars available that better meet my needs? 
reply

 
reply

 I don't think I'm alone in this. 
reply

 I would definitely pay an extra $1,000 for a version with actual buttons... and a smaller screen. 
reply

 
reply

 But it doesn't matter how many are willing. All I'm saying is that this is a thing that matters a great deal to me. It's pretty close to a dealbreaker. Even if I'm the only one that feels that way, it's still how I feel.The auto industry appears to not want to make cars that I'd actually want to buy. Fair enough.But I do find it interesting that one of the things that I was always taught was a strength of our economic system is that it will produce a wide enough variety of goods that pretty much everyone will find a version of a product that they'd actually want. That it appears that it can't looks like a kind of failure to me. The auto industry appears to not want to make cars that I'd actually want to buy. Fair enough.But I do find it interesting that one of the things that I was always taught was a strength of our economic system is that it will produce a wide enough variety of goods that pretty much everyone will find a version of a product that they'd actually want. That it appears that it can't looks like a kind of failure to me. But I do find it interesting that one of the things that I was always taught was a strength of our economic system is that it will produce a wide enough variety of goods that pretty much everyone will find a version of a product that they'd actually want. That it appears that it can't looks like a kind of failure to me. 
reply

 heck, finding a sub-6"" cellphone is next to impossible, outright impossible if you want high end features. and phones are way easier to create in different configurations than cars are. 
reply

 
reply

 
reply

 
reply

 
reply

 No need for all that custom UI tech in the car, just provide a documented API and open-source app you can run on your phone or even dedicate a tablet for it.Proprietary screens and their supporting computers will be obsolete quickly, will break easily and be exorbitantly expensive to fix/replace, and of course there's a good chance they will also surveil everything you do, mostly for the benefit of the manufacturer.Just say no to smart appliances, especially something as central as your personal transport. Proprietary screens and their supporting computers will be obsolete quickly, will break easily and be exorbitantly expensive to fix/replace, and of course there's a good chance they will also surveil everything you do, mostly for the benefit of the manufacturer.Just say no to smart appliances, especially something as central as your personal transport. Just say no to smart appliances, especially something as central as your personal transport. 
reply

 
reply

 And for sure, assuming a popular standard physical/radio interface is used now, it will still be supported, either through backwards-compatibility in the standard, or with gateway dongles etc, far into the future.I have no confidence you'll be able to get a replacement screen or computer mainboard etc for any car you buy today, in 12 years, and almost certainly not in 20,30, etc. I have no confidence you'll be able to get a replacement screen or computer mainboard etc for any car you buy today, in 12 years, and almost certainly not in 20,30, etc. 
reply

 i agree screens won't exist at any price in 10 years. Hope youre lasts. 
reply

 
reply

 There is no reason it cannot work for 10 years, but also no reason it has to. Computer companies have a bad habit for dropping support for stuff when it is a few years old. 
reply

 So the question is, why do they keep re-designing the head unit as a monolithic brick, and make it non-replaceable?  I can't say for sure why, but my guess is that they've since added their own team for ""Smart this"" and ""subscription that"", and removing those sources of revenue is far more expensive than rebuilding the head unit each year. 
reply

 Fast forward to 2020s and that's exactly what's going on. There is a lot of EV ""cars"" cars in China that barely qualify as a car (e.g. Wuling Hongguang) and cost as low as 20,000 RMB (~US$3,000).I would not want to buy those, though. The current EV boom is forced by planned economy with huge subsidies, which always attracts ""wrong crowd"" in China. There are hundreds of brands right now, but once the subsidies dry up, 99% of them will shut down, leaving unsupported hastily slapped together cars to rot. I would not want to buy those, though. The current EV boom is forced by planned economy with huge subsidies, which always attracts ""wrong crowd"" in China. There are hundreds of brands right now, but once the subsidies dry up, 99% of them will shut down, leaving unsupported hastily slapped together cars to rot. 
reply

 If we changed something (either legal, planned obsolesce, ???) so that cars only last 3 years, there would be a large market for bare bones cars as people who are cheap would buy them.  (and many people who today buy new cars would be forced to buy a much cheaper car since their car no longer as more than scrap value).  However the economics of cars mean anyone who would buy a bare bones car buys used. 
reply

 
reply

 
reply

 
reply

 
reply

 We’re not going to see a low-tech EV for a long time. In my opinion, we’re not ever going to see one. And respectfully to you and all the other folks here who feel like you, I don’t think you represent the average driver in this regard. 
reply

 Have a look at last years low end BYD domestic market EV offers, there's a crazy amount of choice in style, design, and no frills offerings.By ""we"" I'm guessing you mean the tariff protected domestic north american and european markets.The domestic BYD Seagull sells for under $10K USD on home soil and isn't being exported much ATM:https://www.drive.com.au/news/2023-byd-seagull-unveiled-not-...China spins out a lot of variations on a theme, there's bound to be limited run versions with little more than the absolute bare essentials to have a functional EV - the asian phone market is an indicator of the kind of range that is just not seen in the western markets. By ""we"" I'm guessing you mean the tariff protected domestic north american and european markets.The domestic BYD Seagull sells for under $10K USD on home soil and isn't being exported much ATM:https://www.drive.com.au/news/2023-byd-seagull-unveiled-not-...China spins out a lot of variations on a theme, there's bound to be limited run versions with little more than the absolute bare essentials to have a functional EV - the asian phone market is an indicator of the kind of range that is just not seen in the western markets. The domestic BYD Seagull sells for under $10K USD on home soil and isn't being exported much ATM:https://www.drive.com.au/news/2023-byd-seagull-unveiled-not-...China spins out a lot of variations on a theme, there's bound to be limited run versions with little more than the absolute bare essentials to have a functional EV - the asian phone market is an indicator of the kind of range that is just not seen in the western markets. https://www.drive.com.au/news/2023-byd-seagull-unveiled-not-...China spins out a lot of variations on a theme, there's bound to be limited run versions with little more than the absolute bare essentials to have a functional EV - the asian phone market is an indicator of the kind of range that is just not seen in the western markets. China spins out a lot of variations on a theme, there's bound to be limited run versions with little more than the absolute bare essentials to have a functional EV - the asian phone market is an indicator of the kind of range that is just not seen in the western markets. 
reply

 Yes, I apologize for the western-centric approach there, though I would extend that position to the UAE and Saudi-Arabia.The NA OEMs are not interested in bringing very low-cost vehicles to market. And the low-cost OEMs from Europe haven’t really been able to reach the American market. aside from a very outlier products. The NA OEMs are not interested in bringing very low-cost vehicles to market. And the low-cost OEMs from Europe haven’t really been able to reach the American market. aside from a very outlier products. 
reply

 Odd aside, these days ""low tech"" (minimal effort, low cost) cars are going to have screens and control by wire interfaces for many things - it's 2024 and touch screens are a throw away disposable item compared to physical controls, tension cables, routing looms for every physical switch and interface light bulb, etc.In a sense the ideal notion of a ""low tech car"" is now a hand crafted artisan object. In a sense the ideal notion of a ""low tech car"" is now a hand crafted artisan object. 
reply

 It's pure nostalgia. 
reply

 Open source code, no phone home or hidden backdoors, optionally no wireless or external connectivity other than by on board physical port, etc.Cars of yore have car manuals, manifolds and heads can be replaced with official parts or scrap yard parts or third party vendor alternatives, etc.I use EV's for work related applications, I'm still holding off a personal EV until I can  find something in Australia that fits my list. Until then I do most local area travel via walking, electric scooter, or homebuilt EV trike with basket for shopping - there's a Land Cruiser for the rural trips and hauling loads but that's more a once per week driver. Cars of yore have car manuals, manifolds and heads can be replaced with official parts or scrap yard parts or third party vendor alternatives, etc.I use EV's for work related applications, I'm still holding off a personal EV until I can  find something in Australia that fits my list. Until then I do most local area travel via walking, electric scooter, or homebuilt EV trike with basket for shopping - there's a Land Cruiser for the rural trips and hauling loads but that's more a once per week driver. I use EV's for work related applications, I'm still holding off a personal EV until I can  find something in Australia that fits my list. Until then I do most local area travel via walking, electric scooter, or homebuilt EV trike with basket for shopping - there's a Land Cruiser for the rural trips and hauling loads but that's more a once per week driver. 
reply

 No, most cars of yore only had manuals available to dealership technicians, and no one else.  Genuine manufacturer-made manuals were difficult or impossible to find.Everyone else bought Haynes or Chilton ""manuals"" which were really done by reverse-engineering. Everyone else bought Haynes or Chilton ""manuals"" which were really done by reverse-engineering. 
reply

 
reply

 > Everyone else bought Haynes or Chilton ""manuals"" which were really done by reverse-engineering.They did the job and it was hardly difficult to access dealership manuals .. which were more often than not close to the Haynes manuals.There's a healthy trade in manuals and photocopies of such. The nearest city had an entire shop soley devoted to car manuals back in the 1980s .. it might still be there or not (given the torrents of manual PDFs kicking about today).I currently live in a town with a large motor museum (rocket cars and steamers and all sorts) and a wealth of machines from 100+ years of agriculture .. plenty of sheds with shops; old tractors, the last holden V8's, even one iteration of the sheep shearing robot we built (in the 1980s).It's not that difficult to maintain old cars, the parts can be hard to scrounge at times, failing that it can be a wait on a machinist to fab a replacement, but overall there's less mystery than with more recent vehicles. They did the job and it was hardly difficult to access dealership manuals .. which were more often than not close to the Haynes manuals.There's a healthy trade in manuals and photocopies of such. The nearest city had an entire shop soley devoted to car manuals back in the 1980s .. it might still be there or not (given the torrents of manual PDFs kicking about today).I currently live in a town with a large motor museum (rocket cars and steamers and all sorts) and a wealth of machines from 100+ years of agriculture .. plenty of sheds with shops; old tractors, the last holden V8's, even one iteration of the sheep shearing robot we built (in the 1980s).It's not that difficult to maintain old cars, the parts can be hard to scrounge at times, failing that it can be a wait on a machinist to fab a replacement, but overall there's less mystery than with more recent vehicles. There's a healthy trade in manuals and photocopies of such. The nearest city had an entire shop soley devoted to car manuals back in the 1980s .. it might still be there or not (given the torrents of manual PDFs kicking about today).I currently live in a town with a large motor museum (rocket cars and steamers and all sorts) and a wealth of machines from 100+ years of agriculture .. plenty of sheds with shops; old tractors, the last holden V8's, even one iteration of the sheep shearing robot we built (in the 1980s).It's not that difficult to maintain old cars, the parts can be hard to scrounge at times, failing that it can be a wait on a machinist to fab a replacement, but overall there's less mystery than with more recent vehicles. I currently live in a town with a large motor museum (rocket cars and steamers and all sorts) and a wealth of machines from 100+ years of agriculture .. plenty of sheds with shops; old tractors, the last holden V8's, even one iteration of the sheep shearing robot we built (in the 1980s).It's not that difficult to maintain old cars, the parts can be hard to scrounge at times, failing that it can be a wait on a machinist to fab a replacement, but overall there's less mystery than with more recent vehicles. It's not that difficult to maintain old cars, the parts can be hard to scrounge at times, failing that it can be a wait on a machinist to fab a replacement, but overall there's less mystery than with more recent vehicles. 
reply

 
reply

 >Euro NCAP – Europe’s leading automotive safety industry body – has stated that from 2026 new guidance will be introduced over physical buttons and touchscreens.>Euro NCAP’s rules are not mandatory for manufacturers to follow, but the threat of losing points will likely impact the decisions of many of the leading brands in the years ahead.Although I would prefer a hard ban of touchscreen-only car controls in EU countries, which would obviously have more of an impact.[1]: https://www.rac.co.uk/drive/news/driving-tech/is-the-beginni... (5th Mar 2024) >Euro NCAP’s rules are not mandatory for manufacturers to follow, but the threat of losing points will likely impact the decisions of many of the leading brands in the years ahead.Although I would prefer a hard ban of touchscreen-only car controls in EU countries, which would obviously have more of an impact.[1]: https://www.rac.co.uk/drive/news/driving-tech/is-the-beginni... (5th Mar 2024) Although I would prefer a hard ban of touchscreen-only car controls in EU countries, which would obviously have more of an impact.[1]: https://www.rac.co.uk/drive/news/driving-tech/is-the-beginni... (5th Mar 2024) [1]: https://www.rac.co.uk/drive/news/driving-tech/is-the-beginni... (5th Mar 2024) 
reply

 - dumb TVs, or open-source TVs.- dumb phones, or completely open-source smart phones.- dumb EVs, or completely open-source EVs.I think the profit for open source stuff is not guaranteed, so funding a company is hard.  People who fund companies want lock-in, patents, product monopoly.  They don't want something that can be copied and productized by another company that had no R&D costs and then undercut in price.that said, it is definitely something society wants. - dumb phones, or completely open-source smart phones.- dumb EVs, or completely open-source EVs.I think the profit for open source stuff is not guaranteed, so funding a company is hard.  People who fund companies want lock-in, patents, product monopoly.  They don't want something that can be copied and productized by another company that had no R&D costs and then undercut in price.that said, it is definitely something society wants. - dumb EVs, or completely open-source EVs.I think the profit for open source stuff is not guaranteed, so funding a company is hard.  People who fund companies want lock-in, patents, product monopoly.  They don't want something that can be copied and productized by another company that had no R&D costs and then undercut in price.that said, it is definitely something society wants. I think the profit for open source stuff is not guaranteed, so funding a company is hard.  People who fund companies want lock-in, patents, product monopoly.  They don't want something that can be copied and productized by another company that had no R&D costs and then undercut in price.that said, it is definitely something society wants. that said, it is definitely something society wants. 
reply

 What use are dumb phones (i.e., feature phones)?  They're only good for actually talking to people, and the only people I know who regularly use their phones for talking are my elderly relatives (in their 80s).  Everyone younger than that uses their phones for: texting, games, web, various apps such as banking, etc.  Actual talking is fairly rare, and usually only with some business (e.g. calling the doctor's office to schedule an appointment because they don't have a website reservation system, and even these places are dying out or moving online slowly). 
reply

 
reply

 
reply

 
reply

 This post says ""Just let me drive. I don't need fancy screens.""An analogy with a phone might be to just talk to people.There are plenty more reasons for a dumb phone.  Limited distraction for self/kids.  Long battery time.  privacy.  sovereignty would align with open source, not necessarily dumb phone (you control the software) An analogy with a phone might be to just talk to people.There are plenty more reasons for a dumb phone.  Limited distraction for self/kids.  Long battery time.  privacy.  sovereignty would align with open source, not necessarily dumb phone (you control the software) There are plenty more reasons for a dumb phone.  Limited distraction for self/kids.  Long battery time.  privacy.  sovereignty would align with open source, not necessarily dumb phone (you control the software) 
reply

 Sure, I'm just pointing out that I don't think very many people these days actually want such a thing.  Outside of HN (which seems to have a lot of very anti-tech people curiously), all the people I know, of all age ranges, simply don't actually use phones much for voice calling.  When they do, it's usually just for talking to businesses as I said before, not for family and friends.  Instead, people are using phones for so many other non-voice-calling things which simply won't work on a dumbphone.I feel like this is one of those things where people are appealing to nostalgia, but no one actually puts their money where their mouth is.  Also, last I heard, dumbphones (flipphones) really are still available in many markets for people who want them, but almost no one does except perhaps for some elderly people.  So I think this is really just people whining about the ""good ol' days"" while forgetting they weren't that good. I feel like this is one of those things where people are appealing to nostalgia, but no one actually puts their money where their mouth is.  Also, last I heard, dumbphones (flipphones) really are still available in many markets for people who want them, but almost no one does except perhaps for some elderly people.  So I think this is really just people whining about the ""good ol' days"" while forgetting they weren't that good. 
reply

 And the subsidies are fading but aren't gone for good.And because everyone's copying Tesla's unusable interface for some unknown reason. I doubt Musk would recognize a rotating physical a/c control if it fell off a Falcon and hit him on the head. And because everyone's copying Tesla's unusable interface for some unknown reason. I doubt Musk would recognize a rotating physical a/c control if it fell off a Falcon and hit him on the head. 
reply

 
reply

 Or when you simply can't ... figure ... out ... the ""smart"" turn stalk? 
reply

 They're from the same ""material design"" hipster insanity that removed shadowing and numerous other visual cues from UI design that we still suffer today. 
reply

 I wish there was a website that had a guide for how to disable the 4g chip for every car model. 
reply

 
reply

 
reply

 
reply

 Maybe it's just where I'm living?I thought it was because they increased the efficiency requirements for standard wheelbase vehicles.Intended effect: manufacturers make more efficient vehicles.Actual effect: manufacturers make gigantic, less efficient, more expensive vehicles. I thought it was because they increased the efficiency requirements for standard wheelbase vehicles.Intended effect: manufacturers make more efficient vehicles.Actual effect: manufacturers make gigantic, less efficient, more expensive vehicles. Intended effect: manufacturers make more efficient vehicles.Actual effect: manufacturers make gigantic, less efficient, more expensive vehicles. Actual effect: manufacturers make gigantic, less efficient, more expensive vehicles. 
reply

 
reply

 
reply

 (I assume you're asking about the US, because there are low-tech options in many other countries.)If you want a low-tech car, your best bet is to buy an early 2000s model of something that is well-regarded and can continue to be maintained long term (eg. Toyota). There are a lot of Internet resources that cherry-pick these desirable models and years for you. If you want a low-tech car, your best bet is to buy an early 2000s model of something that is well-regarded and can continue to be maintained long term (eg. Toyota). There are a lot of Internet resources that cherry-pick these desirable models and years for you. 
reply

 
reply

 
reply

 Most of those things are low cost, high margin extras. Removing them wouldn't really decrease the cost of the car for the manufacturer. A lot of the time, if you don't pay for the extra's, they are included in the car anyway because it's not worth the effort of customizing the build. They are just disabled in software. 
reply

 I first came across this 20+ years ago working for an office equipment manufacturer. We had to add code for the service people to enable a feature in the machine that was already present (and pretty expensive to build), but not turned on until the customer paid for it. I remember at the time asking if it wouldn't piss customers off to know that they were paying for something that was already installed, but it didn't seem to faze the Marketing people in the least. Then again, the buyer was someone in a corporate office who would probably never actually see the machine anyway. 
reply

 
reply

 From my research, it's boils down to:1. Car is still a wealth marker. Not enough people think about it just as a means of transpiration. If they do they mostly use public transport or uber/escooters.2. Car frame - you need to meet security standards, it cost a lot3. Battery - current technology is expensive4. Car lobby - especially in Europe, there are large tariffs to bring EV cars from Asia. 1. Car is still a wealth marker. Not enough people think about it just as a means of transpiration. If they do they mostly use public transport or uber/escooters.2. Car frame - you need to meet security standards, it cost a lot3. Battery - current technology is expensive4. Car lobby - especially in Europe, there are large tariffs to bring EV cars from Asia. 2. Car frame - you need to meet security standards, it cost a lot3. Battery - current technology is expensive4. Car lobby - especially in Europe, there are large tariffs to bring EV cars from Asia. 3. Battery - current technology is expensive4. Car lobby - especially in Europe, there are large tariffs to bring EV cars from Asia. 4. Car lobby - especially in Europe, there are large tariffs to bring EV cars from Asia. 
reply

 Definitely not in the US. 
reply

 
reply

 
reply

 I do think the reason we havn't seen this class yet is that EV's are yuppie cars. They are sold at a premium for people who think this is the thing that will solve CC. When really taking busses, even petrol ones would probably do more. 
reply

 
reply

 
reply

 The next biggest issue is regulation. Depending on jurisdiction, it's likely that things from backup cameras to autobraking and more are required or will be shortly. Even drowsy driver and drunk driver protections are already in laws/regs for future adoption. 
reply

 
reply

 
reply

 Reality: Fast N Furious guys realize the ECU is tunable, break all the parameters, remove the muffler, and make their engine explode within 20,000 miles in the noisiest way possible. 
reply

 Yes, it really is as simple as that. Legality aside, making such a car a reality is at the very least 1B€ in development cost (you have to do a new electronics architecture and probably a new platform variant). You will never make a profit on such a car. The customer base is tiny and expects low prices, but low prices can only be achieved with high volumes. 
reply

 
reply

 That it can't meet regulatory safety standards. E.g. drowsiness detection or crash detection to call emergency services mean that any car can not be ""low tech"" in any meaningful sense. So the best thing you can possibly get is a high tech car, where user facing technologies have been removed. Needlessly to say, the market for that is miniscule. 
reply

 
reply

 
reply

 
reply

 -William Adama, BSG 
reply

 
reply

 
reply

 
reply

 Try a coat.If you look around you discover that cycling cities tend to be places with harsh winters. While cycling dies off in winter, there are some die-hards go year round and they will report what you need if you ask them. If you look around you discover that cycling cities tend to be places with harsh winters. While cycling dies off in winter, there are some die-hards go year round and they will report what you need if you ask them. 
reply

 
reply

 The rest is all the automakers run by the same consultanting firm and they don't really compete all that hard with eachother anymore. 
reply

 https://en.wikipedia.org/wiki/Nissan_LeafStill much more expensive than the equivalent cars with a combustion engine though. Still much more expensive than the equivalent cars with a combustion engine though. 
reply

 
reply

 1. https://www.reuters.com/business/autos-transportation/japans... 
reply

 
reply

 It still has a big screen though. 
reply

 
reply

 
reply

 
reply

 
reply

 Unfortunately most citizens do not even understand the tech so they do not even know that the crappy car-app is actually connected to the OEM servers like the car, they do not even know the car collect gazillion of data and so on. So the OEM can do pretty whatever they want, the percentage of people who understand is so little that nobody hear them. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 The tech components of cars makes up a small fraction of the cost, but represents significant value. 
reply

 
reply

 
reply

 The pretty-easy-and-cheap part is adding glitzy screens to cars.  Doing that gets most people all excited...and willing to shell out far more money.In an extremely well-run socialist country, there'd probably be good, low-tech electric cars. In an extremely well-run socialist country, there'd probably be good, low-tech electric cars. 
reply

 However, the price you pay for a car is substantially more than the marginal cost of producing it.So that industry is a famine-or-feast industry. Either they are losing money in mind-boggling quantities, or they are making money in mind-boggling quantities. There is not a lot of in between.Unfortunately, the connection to the question the original poster asked is that they basically can't risk not selling a car because it doesn't have some hot feature that most of the market wants, so you won't see a screen-free car made today. Putting $100 of hardware in to seal the deal is a no-brainer in their profit model. (Though they will trim every penny on it, as they do everything else; it may seem like a contradiction but if you think about it enough it'll make sense. Consider the term ""bullet-point feature"" in our industry.) Until the market as a whole screams for it, it won't exist. So that industry is a famine-or-feast industry. Either they are losing money in mind-boggling quantities, or they are making money in mind-boggling quantities. There is not a lot of in between.Unfortunately, the connection to the question the original poster asked is that they basically can't risk not selling a car because it doesn't have some hot feature that most of the market wants, so you won't see a screen-free car made today. Putting $100 of hardware in to seal the deal is a no-brainer in their profit model. (Though they will trim every penny on it, as they do everything else; it may seem like a contradiction but if you think about it enough it'll make sense. Consider the term ""bullet-point feature"" in our industry.) Until the market as a whole screams for it, it won't exist. Unfortunately, the connection to the question the original poster asked is that they basically can't risk not selling a car because it doesn't have some hot feature that most of the market wants, so you won't see a screen-free car made today. Putting $100 of hardware in to seal the deal is a no-brainer in their profit model. (Though they will trim every penny on it, as they do everything else; it may seem like a contradiction but if you think about it enough it'll make sense. Consider the term ""bullet-point feature"" in our industry.) Until the market as a whole screams for it, it won't exist. 
reply

 Search profit margins for Toyota/Ford/Volkswagen/Mercedes/BMW/Honda/etcAll are in the 5% to 10% range, which is objectively a middle of the road profit margin.Mind boggling is what tech/oil/pharma/finance does, at 20%, 30%, even 40%+ profit margins.  Which is why they are at the top of market cap rankings.https://companiesmarketcap.com/ All are in the 5% to 10% range, which is objectively a middle of the road profit margin.Mind boggling is what tech/oil/pharma/finance does, at 20%, 30%, even 40%+ profit margins.  Which is why they are at the top of market cap rankings.https://companiesmarketcap.com/ Mind boggling is what tech/oil/pharma/finance does, at 20%, 30%, even 40%+ profit margins.  Which is why they are at the top of market cap rankings.https://companiesmarketcap.com/ https://companiesmarketcap.com/ 
reply

 Which is why the question is valid for EVs. There's about to be a revolutionary drop in the core cost of a car: batteries, motor, brakes. That's it! 
reply

 Yep, that's exactly what happened in the Soviet Union with the Lada...
... depending on your definition of a ""good car"". 
reply

 
reply

 https://en.wikipedia.org/wiki/ArcimotoMaybe it will live on if someone buys the IP. Maybe it will live on if someone buys the IP. 
reply

 
reply

 
reply

 But, there's a bound to how low tech a car can be, especially for companies who are looking ahead to increasingly prescriptive safety regulations in the future. Cars sold in the U.S. need a lot of sensors, computers, and mechanisms to take control of the vehicle away from you when it thinks it's necessary. It's just the law. The idea of a simple box with four wheels and some number of motors is pretty much not a viable option, legally speaking. 
reply

 indirect:because we live in ""capitalism""? eg. companies are ""in it"" for the money / the profit!?* if i sell you a car, i want to sell you the most expensive car you are willing to buy, because that increases my profit.cars are products, which you buy once every xx years, not every week, not 2 or 3 at once etc. so as a company i have to ""make out of this single sale"" as much as possible in terms of money.i call this the ""SUV effect"": make everything just a little bit ""bigger"" with every iteration of the product to justify a price-hike ... accompanied by ads, which tell you, why you need this & that additional feature ... repeat!! ;))just my 0.02€ because we live in ""capitalism""? eg. companies are ""in it"" for the money / the profit!?* if i sell you a car, i want to sell you the most expensive car you are willing to buy, because that increases my profit.cars are products, which you buy once every xx years, not every week, not 2 or 3 at once etc. so as a company i have to ""make out of this single sale"" as much as possible in terms of money.i call this the ""SUV effect"": make everything just a little bit ""bigger"" with every iteration of the product to justify a price-hike ... accompanied by ads, which tell you, why you need this & that additional feature ... repeat!! ;))just my 0.02€ * if i sell you a car, i want to sell you the most expensive car you are willing to buy, because that increases my profit.cars are products, which you buy once every xx years, not every week, not 2 or 3 at once etc. so as a company i have to ""make out of this single sale"" as much as possible in terms of money.i call this the ""SUV effect"": make everything just a little bit ""bigger"" with every iteration of the product to justify a price-hike ... accompanied by ads, which tell you, why you need this & that additional feature ... repeat!! ;))just my 0.02€ cars are products, which you buy once every xx years, not every week, not 2 or 3 at once etc. so as a company i have to ""make out of this single sale"" as much as possible in terms of money.i call this the ""SUV effect"": make everything just a little bit ""bigger"" with every iteration of the product to justify a price-hike ... accompanied by ads, which tell you, why you need this & that additional feature ... repeat!! ;))just my 0.02€ i call this the ""SUV effect"": make everything just a little bit ""bigger"" with every iteration of the product to justify a price-hike ... accompanied by ads, which tell you, why you need this & that additional feature ... repeat!! ;))just my 0.02€ just my 0.02€ 
reply

 
reply

 The battery bus should be 2 wires (+ and -) and automotive-grade Cat 6. The voltage on the 2 wires should vary between 200 V DC and 400 V DC as the batteries are charged and drained. Any kind of battery can be connected in parallel. You can connect NiCad, NiMH, Li-Ion, LiPo, and AGM batteries all in parallel provided you put the right number of cells in each battery module to get the correct voltage. You can not put 2 different chemistries of batteries in series. So everything on the battery bus should be connected in parallel. The Cat 6 should run a variant of CANbus tunneled through Ethernet. If a battery can not handle the voltage on the battery bus (for example because the bus is at 200 V, and the battery is charged to 400 V) then the battery should disconnect. This is easily accomplished with small DC motors driving screws, just like low-battery cut-offs do.Battery bays should be standard sizes. 18"" x 30"" x 6"" would be good. That can fit under seats, under a truck's bed, and under a trunk or frunk. They can even fit under floorboards.Motors should be housed in modular, sealed units with gearboxes and motor controllers. There should be spaces to install motors on every axle or even on every wheel. The gearing inside the motor units should give an output that is about the speed we expect from a car tire going down the road.All batteries and motors should connect to the some parallel battery bus. If you want more range, add another battery. If you want AWD, add another motor or two.All drive components should be connected by CANbus. Replacing your accelerator pedal should be as easy as a few screws and an electrical connector.Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. Battery bays should be standard sizes. 18"" x 30"" x 6"" would be good. That can fit under seats, under a truck's bed, and under a trunk or frunk. They can even fit under floorboards.Motors should be housed in modular, sealed units with gearboxes and motor controllers. There should be spaces to install motors on every axle or even on every wheel. The gearing inside the motor units should give an output that is about the speed we expect from a car tire going down the road.All batteries and motors should connect to the some parallel battery bus. If you want more range, add another battery. If you want AWD, add another motor or two.All drive components should be connected by CANbus. Replacing your accelerator pedal should be as easy as a few screws and an electrical connector.Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. Motors should be housed in modular, sealed units with gearboxes and motor controllers. There should be spaces to install motors on every axle or even on every wheel. The gearing inside the motor units should give an output that is about the speed we expect from a car tire going down the road.All batteries and motors should connect to the some parallel battery bus. If you want more range, add another battery. If you want AWD, add another motor or two.All drive components should be connected by CANbus. Replacing your accelerator pedal should be as easy as a few screws and an electrical connector.Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. All batteries and motors should connect to the some parallel battery bus. If you want more range, add another battery. If you want AWD, add another motor or two.All drive components should be connected by CANbus. Replacing your accelerator pedal should be as easy as a few screws and an electrical connector.Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. All drive components should be connected by CANbus. Replacing your accelerator pedal should be as easy as a few screws and an electrical connector.Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. Brakes and steering still need mechanical linkages to comply with safety laws, for now.A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. A standard battery bus would enable other cool things:
1. Any car could have a generator to make it a 2-stage hybrid.
2. RVs could use the same batteries and generators as electric cars.
3. Off-grid applications and grid-tie applications could use the same batteries as electric cars. This makes it even easier to tie car batteries into the power grid.
4. Because battery busses and battery bays are standard, a medium-sized company can build capacitor banks that drop in.
5. Power transfers between 2 batteries on the bus can work, coordinated by CANbus-over-Ethernet. If you are driving down a mountain, you can regeneratively brake into your capacitor bank, then slowly charge your batteries from that bank.
6. Grid-scale battery deployments can use the same batteries as cars. The marginal cost of making another 1 million batteries is a lot less if you already made 2 million of them.
7. Battery chargers that plug into wall power, power inverters, air compressors, and other devices can also be slotted into standard battery bays and interface into standard battery buses. This gives a lot more flexibility to a work truck than the built-in air compressor some brands like to include. Imagine a 2-stage diesel-electric medium-duty truck (that's the size of a UPS truck or a big Amazon delivery truck) that has a hydraulic compressor in a battery bay so it can lift or lower the truck and a lift gate on the rear end.
8. You could buy a cheap electric car with a single Li-Ion battery and a single motor on the front axle. Later, you could add 2 more batteries to almost triple the range and another motor on the rear axle. Not all motors have to deliver the same horsepower, so your little 85 horse-power commuter car could become a 300 horse-power AWD machine. More upgrades could turn it into a 700 horse-power muscle car. This would be the biggest selling point. Buying a stripped-down electric car would be an aspirational purchase. The buyer's goal would be to one day upgrade it to a long-range supercar. Cars could grow with buyers. A kid's first car could be upgrade to AWD when they realize it slides on snow and ice. After a wreck totals the car, the motors and batteries could be moved to a newer model.
9. Concerns over recycling batteries and motors go away if most cars use the same interfaces to the batteries and motors. Old electric cars can be parted out like old Chevys. There is never a reason for an old Chevy small-block V8 to go to waste; millions of cars can use them. Ditto standard electric batteries and motors.SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. SAE and IEEE should coordinate to establish standards, then we should be able to swap out drive train parts as easily as we swap out wheels and tires on our cars today.I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. I wonder if the free market will adopt such standards, or if it will take regulations to push big auto makers into standardizing battery buses, packs, and motors. 
reply

 However there are not that popular outside Japan, and inside Japan many are being used for food and home delivery.Not only they're small and lightweight for urban commuting, the fact that for countries with frequent raining and hot climates they're much better proposition compared to the more accident prone motorcycles and EV bikes.For normal and sub-compact EV car, BYD Seagull is a game changer and without country and state protections, they will sell by truck loads of them, and at less than USD10K selling price in China now it's a steal [4].I think Seagull is the main reason US, Europe and many countries around the world suddenly have the new tariffs for EV cars. Most of the tariffs were announced just several months Seagull was announced to the world, and they're not a coincident.  When EV cars are dirt cheap to buy, operate and maintain you can say good bye to the local car manufacturers (even the EV ones) if there's no protection. Apparently and obviously the much touted free trades policy only works when it's for you but not against you, c'est la vie [5][6].[1] Toyota C+pod:https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 Not only they're small and lightweight for urban commuting, the fact that for countries with frequent raining and hot climates they're much better proposition compared to the more accident prone motorcycles and EV bikes.For normal and sub-compact EV car, BYD Seagull is a game changer and without country and state protections, they will sell by truck loads of them, and at less than USD10K selling price in China now it's a steal [4].I think Seagull is the main reason US, Europe and many countries around the world suddenly have the new tariffs for EV cars. Most of the tariffs were announced just several months Seagull was announced to the world, and they're not a coincident.  When EV cars are dirt cheap to buy, operate and maintain you can say good bye to the local car manufacturers (even the EV ones) if there's no protection. Apparently and obviously the much touted free trades policy only works when it's for you but not against you, c'est la vie [5][6].[1] Toyota C+pod:https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 For normal and sub-compact EV car, BYD Seagull is a game changer and without country and state protections, they will sell by truck loads of them, and at less than USD10K selling price in China now it's a steal [4].I think Seagull is the main reason US, Europe and many countries around the world suddenly have the new tariffs for EV cars. Most of the tariffs were announced just several months Seagull was announced to the world, and they're not a coincident.  When EV cars are dirt cheap to buy, operate and maintain you can say good bye to the local car manufacturers (even the EV ones) if there's no protection. Apparently and obviously the much touted free trades policy only works when it's for you but not against you, c'est la vie [5][6].[1] Toyota C+pod:https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 I think Seagull is the main reason US, Europe and many countries around the world suddenly have the new tariffs for EV cars. Most of the tariffs were announced just several months Seagull was announced to the world, and they're not a coincident.  When EV cars are dirt cheap to buy, operate and maintain you can say good bye to the local car manufacturers (even the EV ones) if there's no protection. Apparently and obviously the much touted free trades policy only works when it's for you but not against you, c'est la vie [5][6].[1] Toyota C+pod:https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [1] Toyota C+pod:https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://en.wikipedia.org/wiki/Toyota_C%2Bpod[2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [2] Toyota COMS:https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://en.wikipedia.org/wiki/Toyota_COMS[3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [3] BYD Seagull:https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://en.wikipedia.org/wiki/BYD_Seagull[4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [4] Why a small China-made EV has global auto execs and politicians on edge:https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://www.cnbc.com/2024/03/22/byd-seagull-ev-puts-global-a...[5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [5] How will new EU tariffs on Chinese electric vehicles work?https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://www.theguardian.com/business/article/2024/jun/12/how...[6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 [6] Biden hits Chinese electric cars and solar cells with higher tariffs:https://www.bbc.com/news/business-69004520 https://www.bbc.com/news/business-69004520 
reply

 I had assumed the overly loud voices complaining about this ""issue"" were just the latest iteration of intelligent people inventing convoluted reasons to go along with their political tribe's insane policy preferences.Like if you're a Republican on HN you can't just openly deny climate change exists any more (though a few still try), you want plausible deniability that your intense love for nuclear power isn't just an excuse to spread outdated lies about renewables.Similarly you can loudly announce that you'll never buy an EV, and then when people put you in the ""coal rolling idiot"" bucket you can surprise them by revealing that it's actually a ridiculously niche concern about too much tech that you've invented to go along with your political peers in their hatred of EVs. And people reading then move you into a subtly different subsection of the anti-EV crank bucket in their mind. Like if you're a Republican on HN you can't just openly deny climate change exists any more (though a few still try), you want plausible deniability that your intense love for nuclear power isn't just an excuse to spread outdated lies about renewables.Similarly you can loudly announce that you'll never buy an EV, and then when people put you in the ""coal rolling idiot"" bucket you can surprise them by revealing that it's actually a ridiculously niche concern about too much tech that you've invented to go along with your political peers in their hatred of EVs. And people reading then move you into a subtly different subsection of the anti-EV crank bucket in their mind. Similarly you can loudly announce that you'll never buy an EV, and then when people put you in the ""coal rolling idiot"" bucket you can surprise them by revealing that it's actually a ridiculously niche concern about too much tech that you've invented to go along with your political peers in their hatred of EVs. And people reading then move you into a subtly different subsection of the anti-EV crank bucket in their mind. 
reply

 Every time I look at electric cars there's always some insane choice, e.g. the brake lights don't turn on when regenerative braking is active, even though your car is rapidly decelerating. The touch screens are also a safety concern - you can't change the music or skip ahead on a podcast without taking your eyes off the road for a meaningful amount of time. The fact that you're paying well over the median price for a new car makes it even less appealing.FWIW I don't own a car and I'm not in a hurry to get one. FWIW I don't own a car and I'm not in a hurry to get one. 
reply

"
36,skeptrune,Trieve (YC W24) Is Hiring an DevRel Software Engineer,https://www.ycombinator.com/companies/trieve/jobs/2jeeXLs-developer-relations-software-engineer,"Trieve Dev Rel
Trieve is all-in-one infrastructure for building search, recommendations, and RAG. This role focuses on producing sales and marketing collateral to support our customer acquisition strategy.
Compensation: $130-150K
San Francisco, CA, US | Full-…",2024-06-10T21:00:43Z,"Infrastructure for search teams building retrieval and RAG Trieve is all-in-one infrastructure for building search, recommendations, and RAG. This role focuses on producing sales and marketing collateral to support our customer acquisition strategy. Compensation: $130-150K San Francisco, CA, US | Full-time, in-person Trieve aims to power every search bar on the internet. Search has improved drastically over the past few years, however, it is still necessary to experiment and tune retrieval and recommendation systems for them to work well. To that end, Trieve combines the state of the art search language models with tools for fine-tuning ranking and relevance. We recently closed our seed round and have several years of runway. We're looking for developer relations talent to help increase our mostly sales-facing muscle. Check out (and star!) our repo at github.com/devflowinc/trieve Rust actix-web REST API SolidJS SPA frontends Rust workers with Redis for queueing Qdrant for vector storage Postgres for application data relating to multi-tenancy You are passionate about the vector space (no pun intended) and understand the differences between Pinecone, Qdrant, Weviate, etc. You've built with these tools and know enough to complain and praise the difference strategies and results you can find across the market. Candidates who have deep experience building with search-specific tools will be given stronger consideration. Competitive salary In-person position working in our office in downtown San Francisco Sales-focused team interested in closing high-ACV deals Your work will be public as to build your reputation and following Apply with a short blurb about your background and why you are a good fit for the role We'll hop on a short call to discuss the role and the interview assignment. The assignment will be writing an article/marketing collateral about our product relevant to our target audience. Candidates with substantial history of writing such content can by pass this stage. Upon completion, we'll evaluate the assignment and call back selected candidates for an in-person interview Job Offer Note: Regardless of outcome, approved assignments will be paid out $599. Trieve aims to power every search bar on the internet. Search has improved drastically over the past few years, however, it is still necessary to experiment and tune retrieval and recommendation systems for them to work well. To that end, Trieve combines the state of the art search language models with tools for fine-tuning ranking and relevance. We recently closed our seed round and have several years of runway. We're looking for a talented engineer to join the four of us in increasing the pace of our sales and the scope of clients we can service. © 2024 Y Combinator"
37,sonthonax,Is KDB a sane choice for a datalake in 2024?,https://news.ycombinator.com/item?id=40625800,"Pardon the vague question, but KDB is very much institutional knowledge hidden from the outside world. People have built their livelihoods around it and use it as a hammer for all sorts of nails.It's also extremely expensive and written in a language with ori…",2024-06-09T17:00:22Z,"It's also extremely expensive and written in a language with origins so obtuse that it's progenitor APL needed a custom keyboard laden with mathematical symbols.Within my firm, it's very hard to get an outside perspective, the KDB developers are true believers in KDB, but they they obviously don't want to be professionally replaced.  So I'm asking the more forward leaning HN.One nail in my job, is KDB as a data-lake and I'm being driven nuts by it.  I write code in Rust that prices options.  There's a lot of complex code involved in this, I use a mix of numeric simulations to calculate greeks and somewhat lengthy analytical formulas.The data that I save to KDB is quite raw, I save the market data and derived volatility surfaces, which are themselves complex-ish models needing some carefully unit-tested code to convert in to implied vols.Right now my desk has no proper tooling for backtesting that uses our own data.  And I'm constantly being asked to do something about it, and I don't know what to do!I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? Within my firm, it's very hard to get an outside perspective, the KDB developers are true believers in KDB, but they they obviously don't want to be professionally replaced.  So I'm asking the more forward leaning HN.One nail in my job, is KDB as a data-lake and I'm being driven nuts by it.  I write code in Rust that prices options.  There's a lot of complex code involved in this, I use a mix of numeric simulations to calculate greeks and somewhat lengthy analytical formulas.The data that I save to KDB is quite raw, I save the market data and derived volatility surfaces, which are themselves complex-ish models needing some carefully unit-tested code to convert in to implied vols.Right now my desk has no proper tooling for backtesting that uses our own data.  And I'm constantly being asked to do something about it, and I don't know what to do!I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? One nail in my job, is KDB as a data-lake and I'm being driven nuts by it.  I write code in Rust that prices options.  There's a lot of complex code involved in this, I use a mix of numeric simulations to calculate greeks and somewhat lengthy analytical formulas.The data that I save to KDB is quite raw, I save the market data and derived volatility surfaces, which are themselves complex-ish models needing some carefully unit-tested code to convert in to implied vols.Right now my desk has no proper tooling for backtesting that uses our own data.  And I'm constantly being asked to do something about it, and I don't know what to do!I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? The data that I save to KDB is quite raw, I save the market data and derived volatility surfaces, which are themselves complex-ish models needing some carefully unit-tested code to convert in to implied vols.Right now my desk has no proper tooling for backtesting that uses our own data.  And I'm constantly being asked to do something about it, and I don't know what to do!I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? Right now my desk has no proper tooling for backtesting that uses our own data.  And I'm constantly being asked to do something about it, and I don't know what to do!I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? I'm 99% sure KDB is the wrong tool for the job, because of three things:- It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? - It's not horizontally scalable. A divide and conquer algo on N<{small_number} cores is pointless.- I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? - I'm scared to do queries that return a lot of data. It's non trivial to get a day's worth of data. The query will just often freeze, it doesn't even buffer. Even if I'm just trying to fetch what should be a logical partition, the wire format is really inefficient and uncompressed.  I feel like I need to engineering work for trivial things.- The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? - The main thing is that I need to do complex math to convert my raw data, order-books and vol-surfaces into useful data to backtest.I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? I have no idea how do do any of this in KDB.  My firm is primarily a spot desk, and while I respect my colleagues, their answer is:> Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? > Other firms are really invested in KDB and use KDB for this, just figure it out.I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? I'm going nuts because I'm under the assumption that these other firms are way larger and have teams of KDB-quants doing the actual research.   While we have some quant traders who know a bit of KDB but they work in the spot side with far more simple math.I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? I keep on advocating for some Parquet style data-store with Spark/Dask/Arrow/Polars running on top of it that can be horizontally scaled and most importantly, with Polars, I can write my backtests in Rust and leverage the libraries I've already written.I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? I get shot down with ""we use KDB here"".  I just don't know how I can deliver a maintainable solution to my traders with this current infrastructure.  Bizarrely, and this is a financial firm, no one in a team of ~100 devs has ever touched Spark style tech other than me here.What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? What should I do?  Are my concerns overblown?  Am I misunderstanding the power of KDB? This feels like a ‘pick your poison’ situation. You’ve been told already you won’t be allowed to dump kdb; it’s probably embedded in your infra in a bunch of ways, and ripping it out is a no-go.OK, so, you have data in kdb. What you’re doing right now (it sounds like) is using it as literally just a raw data store. That’s the worst way to use it; a lot of work went into making it very fast to run summarization/grouping/sorting/etc all right on the kdb servers. Note that this is very unlike how an Apache project works.Unfortunately, you wrote a rust library that probably doesn’t really distinguish your kdb storage from, say, JSON files, so you are at a crossroads.Option 1: Get some good data cloning up, clone data over to your preferred generalized data lake tech, run rust against it.Option 2: Go through your rust code with a fine tooth comb and figure where exactly it’s doing things that cannot be done semantically in q/k. Start slimming down your Rust lib, or more exactly, rework what queries its sending, and what state of data it expectsOption 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) OK, so, you have data in kdb. What you’re doing right now (it sounds like) is using it as literally just a raw data store. That’s the worst way to use it; a lot of work went into making it very fast to run summarization/grouping/sorting/etc all right on the kdb servers. Note that this is very unlike how an Apache project works.Unfortunately, you wrote a rust library that probably doesn’t really distinguish your kdb storage from, say, JSON files, so you are at a crossroads.Option 1: Get some good data cloning up, clone data over to your preferred generalized data lake tech, run rust against it.Option 2: Go through your rust code with a fine tooth comb and figure where exactly it’s doing things that cannot be done semantically in q/k. Start slimming down your Rust lib, or more exactly, rework what queries its sending, and what state of data it expectsOption 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Unfortunately, you wrote a rust library that probably doesn’t really distinguish your kdb storage from, say, JSON files, so you are at a crossroads.Option 1: Get some good data cloning up, clone data over to your preferred generalized data lake tech, run rust against it.Option 2: Go through your rust code with a fine tooth comb and figure where exactly it’s doing things that cannot be done semantically in q/k. Start slimming down your Rust lib, or more exactly, rework what queries its sending, and what state of data it expectsOption 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Option 1: Get some good data cloning up, clone data over to your preferred generalized data lake tech, run rust against it.Option 2: Go through your rust code with a fine tooth comb and figure where exactly it’s doing things that cannot be done semantically in q/k. Start slimming down your Rust lib, or more exactly, rework what queries its sending, and what state of data it expectsOption 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Option 2: Go through your rust code with a fine tooth comb and figure where exactly it’s doing things that cannot be done semantically in q/k. Start slimming down your Rust lib, or more exactly, rework what queries its sending, and what state of data it expectsOption 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Option 3: dump your rust library and rewrite it in q or k.Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Of these, I would be willing to bet that for an ‘ideal’ developer, meaning a 160+ IQ dev skilled in Rust, vs a 160+ IQ dev skilled in kdb, vs a 160+IQ dev skilled in say Java + Spark, Option 3 is going to be by far the least resource intensive in terms of deployed hardware, and the fastest / lowest latency.That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) That said, given where you’re at, a principled Rustacean who’s looking at coming to grips with kdb realtime, I think I’d recommend you think hard about Option 2. By the end of Option 2, you will probably be like “Yeah, this could be all k, or nearly all,” but you’re likely going to have some learning to do.Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) Think of it this way, when you’re done, you’ll be on the other side of the cabal, and can double your base rate for your next gig. :) 
reply

 - has worked in finance for both hedge funds and banks- has managed a project where KDB was mandated to be used by mgmt.- on the above project, tasked one of the smartest developers I've ever worked with as the person to learn KDB and use it in the application- I'm a SRE (and former Operations) so that colors my perspective.Given the above, I list out the pros and cons:PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - has managed a project where KDB was mandated to be used by mgmt.- on the above project, tasked one of the smartest developers I've ever worked with as the person to learn KDB and use it in the application- I'm a SRE (and former Operations) so that colors my perspective.Given the above, I list out the pros and cons:PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - on the above project, tasked one of the smartest developers I've ever worked with as the person to learn KDB and use it in the application- I'm a SRE (and former Operations) so that colors my perspective.Given the above, I list out the pros and cons:PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - I'm a SRE (and former Operations) so that colors my perspective.Given the above, I list out the pros and cons:PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. Given the above, I list out the pros and cons:PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. PROS- KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - KDB is pretty fast (on some metrics of fast)CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. CONS- VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - VERY few people can write/read good Q (compared to say people who know Pandas/SKlearn etc)- The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - The learning curve is INCREDIBLY steep. Even the most cited documentation and tutorials have something like this in the intro ""are you really sure you need KDB? B/c Q is REALLY hard to learn""- As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. - As you mention, open source industry standards have come a LONG way since it made sense to have KDB (e.g. in the late 2000s/early 2010s)Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. Conclusion:If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. If you have a lot of in house expertise, then sure, it probably makes sense. If you are starting from scratch, I would not recommend it.On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. On that note, this point stood out:
> People have built their livelihoods around it and use it as a hammer for all sorts of nails.If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. If you work in the industry long enough, you will find a lot of complexity added to systems for three reasons:1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. 1. Some things in finance really do need to be complex due to the math etc2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. 2. Smart people with quant backgrounds tend to LOVE complex things.3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. 3. Smart, rational people realize that adding complexity is one way to build a fortress around their job. This is particularly true in high paying firms where people realize that it's their knowledge of the complex systems that is keeps them in that high paying job.Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. Give that, if you are looking to make a name for yourself at your firm: making things run faster, with fewer issues etc is a good way to stand out. Just be careful that you don't eliminate so much complexity that people get mad at you. 
reply

 The wire format is compressed.KDB horizontally scales (even their competitors comparison pages state this - https://www.influxdata.com/comparison/kdb-vs-tsdb/)A few things to consider that might help - you do not want a solution (in any language/tech) that involves pulling an entire day of market data off disk, across the wire and over to your process for analysis.  KDB will not excel for this, nor will anything else.  KDB shines when you learn to move your code to the data rather than your data to the code.What does ""move the code to the data"" mean in practice?You can do things like use PyKX which allows you to run your python & kdb code together on top of the data directly in the same process.You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. KDB horizontally scales (even their competitors comparison pages state this - https://www.influxdata.com/comparison/kdb-vs-tsdb/)A few things to consider that might help - you do not want a solution (in any language/tech) that involves pulling an entire day of market data off disk, across the wire and over to your process for analysis.  KDB will not excel for this, nor will anything else.  KDB shines when you learn to move your code to the data rather than your data to the code.What does ""move the code to the data"" mean in practice?You can do things like use PyKX which allows you to run your python & kdb code together on top of the data directly in the same process.You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. A few things to consider that might help - you do not want a solution (in any language/tech) that involves pulling an entire day of market data off disk, across the wire and over to your process for analysis.  KDB will not excel for this, nor will anything else.  KDB shines when you learn to move your code to the data rather than your data to the code.What does ""move the code to the data"" mean in practice?You can do things like use PyKX which allows you to run your python & kdb code together on top of the data directly in the same process.You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. What does ""move the code to the data"" mean in practice?You can do things like use PyKX which allows you to run your python & kdb code together on top of the data directly in the same process.You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. You can do things like use PyKX which allows you to run your python & kdb code together on top of the data directly in the same process.You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. You should do as much of the filter/aggregation/joins/etc over on the KDB side before pulling the results back.  You should also define, generate and use pre-aggregated data where it makes sense for your use case (second / minute / day bars).Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. Backtesting in KDB is relatively trivial as you have historical data organized by day and symbol.  Any half decent KDB dev should be able to cook one up of increasing complexity for you.Nick Psaris has a couple books that cover more advanced topics that may be of use. Nick Psaris has a couple books that cover more advanced topics that may be of use. 
reply

 Honest question - why? An entire day of market data for busy option series will be in low hundreds of gigabytes with proper wire format, maybe with some compression it'd be tens of gigabytes. Even with 10 Gbit/s networking (which is kinda slow - I believe you can get at least 40 Gbit/s for Amazon EC2<->EBS) the whole day of data will be transferred in a few minutes, which means your bottleneck will be compute, not IO/network. And compute can be parallelized pretty easily. 
reply

 that's assuming the data is in ram, but even a single nvme flash drive can reach 60 gigabits per second(disclaimer, i've never used kdb, just numpy, pandas, glsl, etc.) (disclaimer, i've never used kdb, just numpy, pandas, glsl, etc.) 
reply

 My questions implies the specific use case being discussed here. Backtesting is mostly about doing a lot of computations over the same data with different parameters, so you can prefetch data once and then iterate over it multiple times - the network penalty is paid only once. 
reply

 
reply

 
reply

 Personally I do this and just throw time / compute at the problem - mostly because I don't want to pay for KDB in $ or learning curve.If, however, one does it that way then the actual db is largely irrelevant - if the shop uses KDB, write a query once to pull symbol & timeframe and process locally. If, however, one does it that way then the actual db is largely irrelevant - if the shop uses KDB, write a query once to pull symbol & timeframe and process locally. 
reply

 This grasps at why I’m finding KDB so hard to use. I’ve written a pricing and risk library in Rust. Historical data really needs to be taken processed in Rust rather than KDB. 
reply

 It's about as isolated as mainframe engineering; great on paper, great in closed off circles, but practically dead in the tech community at large. 
reply

 I'd really appreciate some perspective from seasoned data-engineers who might have seen this KDB as a data-lake pattern before, and what they did about it.  Not just technically, but how they managed the organisational change of KDB for the KDB quants.I also just don't really know where else to ask.  There's not really an online KDB community, and you have a lot of KDB devs who are really good at KDB but know barely anything else which makes me skeptical of their advice. I also just don't really know where else to ask.  There's not really an online KDB community, and you have a lot of KDB devs who are really good at KDB but know barely anything else which makes me skeptical of their advice. 
reply

 https://www.timestored.com/kdb-guides/https://learninghub.kx.com/forums/forum/kdb/https://dataintellect.com/thoughts/?_sft_category=bloghttps://groups.google.com/g/personal-kdbplus?pli=1https://k4.topicbox.com/groups/k4?subscription_form=e1ca20f8...https://code.kx.com/q/kb/faq-listbox/ https://learninghub.kx.com/forums/forum/kdb/https://dataintellect.com/thoughts/?_sft_category=bloghttps://groups.google.com/g/personal-kdbplus?pli=1https://k4.topicbox.com/groups/k4?subscription_form=e1ca20f8...https://code.kx.com/q/kb/faq-listbox/ https://dataintellect.com/thoughts/?_sft_category=bloghttps://groups.google.com/g/personal-kdbplus?pli=1https://k4.topicbox.com/groups/k4?subscription_form=e1ca20f8...https://code.kx.com/q/kb/faq-listbox/ https://groups.google.com/g/personal-kdbplus?pli=1https://k4.topicbox.com/groups/k4?subscription_form=e1ca20f8...https://code.kx.com/q/kb/faq-listbox/ https://k4.topicbox.com/groups/k4?subscription_form=e1ca20f8...https://code.kx.com/q/kb/faq-listbox/ https://code.kx.com/q/kb/faq-listbox/ 
reply

 
reply

 
reply

 This answers the question for me: unless you are sure the performance lives up to your expectations AND it gives you a competitive advantage (which can be easily lost with the human in the loop), don't even think of it. Get the next best tech that's easy to use, and well documented, and remove the human in the loop to gain the edge. 
reply

 The old style of kdb integration you could compile a .so and load it in to extend the language.  Now people use PyKx to load in python modules.  I have a guy doing this on my team to load a Python wrapped Rust lib.It looks like you have a few options with Rust as per the link above.Note this allows you to do the ""move the code to the data"" trick I mentioned. It looks like you have a few options with Rust as per the link above.Note this allows you to do the ""move the code to the data"" trick I mentioned. Note this allows you to do the ""move the code to the data"" trick I mentioned. 
reply

 My concern with adding custom libraries into KDB, while better than writing duplicative Q code is the maintenance nightmare of keeping them up to date in KDB.It’s still an investment but I need to be aware of of the risks and downsides. It’s still an investment but I need to be aware of of the risks and downsides. 
reply

 It sounds like you are some sort of Quant Dev on a desk, and so it's really up to you what you want to do.  If you push against the grain to do a data lake rewrite, you'll own the time/effort/outcome of a big Data Engineering project.  So you better be very right and also very fast.If you are looking for solutions within your existing data lake, I've posted up a few sources / thoughts for you to get on and do your Quant Dev work.You sound very set on some sort of rewrite, so you should do what your heart desires. Just make sure you deliver value to your desk. If you are looking for solutions within your existing data lake, I've posted up a few sources / thoughts for you to get on and do your Quant Dev work.You sound very set on some sort of rewrite, so you should do what your heart desires. Just make sure you deliver value to your desk. You sound very set on some sort of rewrite, so you should do what your heart desires. Just make sure you deliver value to your desk. 
reply

 This is probably going to be what I do until KDB creaks over.> You sound very set on some sort of rewriteI vacillate between the two things.  I'm personally used to data engineering with parquet and spark, which are widely used outside of finance, and don't have expensive vendor lock in.And then I realise that I'd have to own this stuff, and my job isn't a data engineer, and I'm a quant dev. > You sound very set on some sort of rewriteI vacillate between the two things.  I'm personally used to data engineering with parquet and spark, which are widely used outside of finance, and don't have expensive vendor lock in.And then I realise that I'd have to own this stuff, and my job isn't a data engineer, and I'm a quant dev. I vacillate between the two things.  I'm personally used to data engineering with parquet and spark, which are widely used outside of finance, and don't have expensive vendor lock in.And then I realise that I'd have to own this stuff, and my job isn't a data engineer, and I'm a quant dev. And then I realise that I'd have to own this stuff, and my job isn't a data engineer, and I'm a quant dev. 
reply

 Work to change your organization, not your technology.Nuclear bombs used to be controlled by decades old systems that worked off floppy disks. Why? Because the systems were so important people worked around the tech.You’re in a similar spot.Even when using conventional languages and platforms, sometimes the decision has been made and you’re stuck with it.KDB might not be the best fit for a datalake, but plenty of people will sleep better just knowing it’s KDB.Change the people, not the tech. Nuclear bombs used to be controlled by decades old systems that worked off floppy disks. Why? Because the systems were so important people worked around the tech.You’re in a similar spot.Even when using conventional languages and platforms, sometimes the decision has been made and you’re stuck with it.KDB might not be the best fit for a datalake, but plenty of people will sleep better just knowing it’s KDB.Change the people, not the tech. You’re in a similar spot.Even when using conventional languages and platforms, sometimes the decision has been made and you’re stuck with it.KDB might not be the best fit for a datalake, but plenty of people will sleep better just knowing it’s KDB.Change the people, not the tech. Even when using conventional languages and platforms, sometimes the decision has been made and you’re stuck with it.KDB might not be the best fit for a datalake, but plenty of people will sleep better just knowing it’s KDB.Change the people, not the tech. KDB might not be the best fit for a datalake, but plenty of people will sleep better just knowing it’s KDB.Change the people, not the tech. Change the people, not the tech. 
reply

 So figure out how to make it work for you as its a powerful tool and more than adequate for the job, as you aren't going to find something 10x better for time series market data.Have your team talk to some consulting firms for one-off projects or advisory assistance within your team (like Data Intellect) if the central org is not responsive. Have your team talk to some consulting firms for one-off projects or advisory assistance within your team (like Data Intellect) if the central org is not responsive. 
reply

 (In normal companies i.e. non tech but especially finance) I have seen many promising careers destroyed by these, your corporate life is about the same as a bomb diffuser in a war zone.12 months and $10mil to roll out the entire system will become $100mil and 4 years to roll out half the system with hacky interconnects to the legacy systems and eventually everyone from IT to compliance will have the finger in the pie taking a cut. 12 months and $10mil to roll out the entire system will become $100mil and 4 years to roll out half the system with hacky interconnects to the legacy systems and eventually everyone from IT to compliance will have the finger in the pie taking a cut. 
reply

 Can you deploy to a host that has a  mount of the database and run a local q or are you forced to query via ipc? Are you on cloud or on prem?A fight for horizontal scaling and running a local q against the data might be an easier one to win than a full replacement of the database. A fight for horizontal scaling and running a local q against the data might be an easier one to win than a full replacement of the database. 
reply

 
reply

 
reply

 
reply

 It’s been around since the 90s and has built up a level of trust that’s incomparable.It’s also a completely closed language. You have to pay an insanely high license fee to use it. It’s also a completely closed language. You have to pay an insanely high license fee to use it. 
reply

 https://en.m.wikipedia.org/wiki/Kdb%2B 
reply

 
reply

     I get shot down with ""we use KDB here""

Well, so fundamentally a decision has been made already. You got shot down. Unless there's some significant new data that might change that decision, it is what it is. The next step is for you to decide if you can get on board with that, or if it's time to start planning your next move. I don't know anything about KDB and you might be right. But it sounds like the powers that be don't want to make this change.Sorry, but it makes no sense to swim against the tide in an organization where you don't have the rank to make the decisions.     I keep on advocating for some Parquet style data-store...

The worst thing you can do is to continue spending your time advocating for change, they've heard you. If you stay on and the current tech does become untenable, you are unlikely to be the hero even in that case. They might just remember you as the detractor. Sorry, but it makes no sense to swim against the tide in an organization where you don't have the rank to make the decisions.     I keep on advocating for some Parquet style data-store...

The worst thing you can do is to continue spending your time advocating for change, they've heard you. If you stay on and the current tech does become untenable, you are unlikely to be the hero even in that case. They might just remember you as the detractor.      I keep on advocating for some Parquet style data-store...

The worst thing you can do is to continue spending your time advocating for change, they've heard you. If you stay on and the current tech does become untenable, you are unlikely to be the hero even in that case. They might just remember you as the detractor. 
reply

 This is what I’m grasping at.Are the challenges of writing a KDB system for back testing derivatives data which needs to work in tandem with a rust pricing library substantially different from a KDB engineered for back testing spot data.One has complex and specific math and one doesn’t. Are the challenges of writing a KDB system for back testing derivatives data which needs to work in tandem with a rust pricing library substantially different from a KDB engineered for back testing spot data.One has complex and specific math and one doesn’t. One has complex and specific math and one doesn’t. 
reply

 
reply

 
reply

 
reply

 
reply

 KDB is in some respects as dumb as a bag of rocks. There is no execution profiler nor explain plan, no query analysis at all. When running your query over tabular data it simply applies the where-clause constraints in-order, passing the boolean vector result from one to the next, which refines the rows still under active consideration. It's for this reason that newbies are always told to put the date-constraint first, or they'll try to load the entire history (typically VOD.L) into memory.KDB really is very fast at processing vector data. Writing nested vectors or dictionaries to individual cells could easily be slowing you down; I've heard of one approach which writes nested dictionaries into vectors with the addition of a column to contain the dictionary keys. Then you get KDB to go faster over the 1-D data, nicely laid out on disk. You really do need to write it down in a way that is sympathetic to the way you will eventually process it.You can create hashmap indices over column data but the typical way of writing down equity L1 data is to ""partition by date"" (write it into a date directory) and ""apply the parted attribute"" to the symbol column (group by symbol, sort by time ascending). Each of the remaining vectors (time, price, size, exchange, whatnot) are obviously sorted to match and finding the next or previous trade for a given symbol is O1 simplicity itself. I've never worked on options data and so can't opine on the problems it presents, but if you've been asked to write this down without any help, then it's pretty ""rubbish"" of the KDB guys in your firm. You have asked for help, right?I'm really going on a bit but just a few more things:- KDB will compress IPC data — if it wants to. The data needs to exceed some size-threshold and you must, I think, be sending it between hosts. It won't bother compressing it to localhost, at least, according to some wisdom received from one of the guys at Kx, many moons ago. The IPC format itself is more or less a tag-length-value format, and good enough. It evolved to support vectors bigger than INT32_MAX a while ago but most IPC-interop libraries don't tend to advertise support for the later version that lets you send silly-big amounts of data around, so my guess is you may not want to load data out of KDB a day at a time. Try to do the processing in KDB!You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax KDB really is very fast at processing vector data. Writing nested vectors or dictionaries to individual cells could easily be slowing you down; I've heard of one approach which writes nested dictionaries into vectors with the addition of a column to contain the dictionary keys. Then you get KDB to go faster over the 1-D data, nicely laid out on disk. You really do need to write it down in a way that is sympathetic to the way you will eventually process it.You can create hashmap indices over column data but the typical way of writing down equity L1 data is to ""partition by date"" (write it into a date directory) and ""apply the parted attribute"" to the symbol column (group by symbol, sort by time ascending). Each of the remaining vectors (time, price, size, exchange, whatnot) are obviously sorted to match and finding the next or previous trade for a given symbol is O1 simplicity itself. I've never worked on options data and so can't opine on the problems it presents, but if you've been asked to write this down without any help, then it's pretty ""rubbish"" of the KDB guys in your firm. You have asked for help, right?I'm really going on a bit but just a few more things:- KDB will compress IPC data — if it wants to. The data needs to exceed some size-threshold and you must, I think, be sending it between hosts. It won't bother compressing it to localhost, at least, according to some wisdom received from one of the guys at Kx, many moons ago. The IPC format itself is more or less a tag-length-value format, and good enough. It evolved to support vectors bigger than INT32_MAX a while ago but most IPC-interop libraries don't tend to advertise support for the later version that lets you send silly-big amounts of data around, so my guess is you may not want to load data out of KDB a day at a time. Try to do the processing in KDB!You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax You can create hashmap indices over column data but the typical way of writing down equity L1 data is to ""partition by date"" (write it into a date directory) and ""apply the parted attribute"" to the symbol column (group by symbol, sort by time ascending). Each of the remaining vectors (time, price, size, exchange, whatnot) are obviously sorted to match and finding the next or previous trade for a given symbol is O1 simplicity itself. I've never worked on options data and so can't opine on the problems it presents, but if you've been asked to write this down without any help, then it's pretty ""rubbish"" of the KDB guys in your firm. You have asked for help, right?I'm really going on a bit but just a few more things:- KDB will compress IPC data — if it wants to. The data needs to exceed some size-threshold and you must, I think, be sending it between hosts. It won't bother compressing it to localhost, at least, according to some wisdom received from one of the guys at Kx, many moons ago. The IPC format itself is more or less a tag-length-value format, and good enough. It evolved to support vectors bigger than INT32_MAX a while ago but most IPC-interop libraries don't tend to advertise support for the later version that lets you send silly-big amounts of data around, so my guess is you may not want to load data out of KDB a day at a time. Try to do the processing in KDB!You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax I'm really going on a bit but just a few more things:- KDB will compress IPC data — if it wants to. The data needs to exceed some size-threshold and you must, I think, be sending it between hosts. It won't bother compressing it to localhost, at least, according to some wisdom received from one of the guys at Kx, many moons ago. The IPC format itself is more or less a tag-length-value format, and good enough. It evolved to support vectors bigger than INT32_MAX a while ago but most IPC-interop libraries don't tend to advertise support for the later version that lets you send silly-big amounts of data around, so my guess is you may not want to load data out of KDB a day at a time. Try to do the processing in KDB!You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax - KDB will compress IPC data — if it wants to. The data needs to exceed some size-threshold and you must, I think, be sending it between hosts. It won't bother compressing it to localhost, at least, according to some wisdom received from one of the guys at Kx, many moons ago. The IPC format itself is more or less a tag-length-value format, and good enough. It evolved to support vectors bigger than INT32_MAX a while ago but most IPC-interop libraries don't tend to advertise support for the later version that lets you send silly-big amounts of data around, so my guess is you may not want to load data out of KDB a day at a time. Try to do the processing in KDB!You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end? This may sound glib but you wouldn't be the first person to have been given a VM to do your dev-work on that isn't quite up to the job. You can find out the size of the payload you're trying to read by running the same query with the ""-22!"" system call. It'll tell you how many bytes it's trying to send. Surely there's help to be had from the KDB guys if you reach out?- I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax - I'm confused by the use of the term ""data lake"": to me this includes unstructured data. I'm not sure I'd ever characterise a KDB HDB as such.- If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax - If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.- KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax - KDB can scale horizontally. It can employ a number (I forget whether it's bounded) of slave instances and farm-out work. I think I read that the latest version has a better work-stealing algo. It's often about the data, though: if the data for a particular symbol/date tuple is on that one server over there, then you're probably better off doing big historic-reads on that one server alone. I doubt very much you're compute-bound or you'd have told us that your KDB licence limited you to a single or N (rather than any number) of cores.- Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax - Many years ago I was told never to run KDB on NFS. Except Solaris' NFS. I have no idea whether this is relevant ;)Good luck, sonthonax Good luck, sonthonax 
reply

 But firstly:> If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.Unfortunately my firm isn't that big ~150 in total and maybe about ~40 developers, if which there are 2 full time KDB devs who's job is mostly maintaining the ingestion and writing some quite basic functions like `as_of`.  There's only two people who work on our options desk as developers, so there's a lack of resourcing for KDB.  When I have these issues with KDB around performance, it's quite hard to get support within my firm from the two KDB devs (one of which is very junior).> I've never worked on options data and so can't opine on the problems it presentsThe thing about options data is that it's generally lower frequency but a lot more complex.  If spot data is 1 dimensional, and futures data is 2 dimensional, options are 3 dimensional.  You also have a lot more parameterizations which leads me to the second point :)> you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. > If your firm has had KDB for ages there's a good chance it's big enough to be signed up to one of the research groups who maintain a set of test-suites they will run over a vendor's latest hardware offering, letting them claim the crown for the fastest Greeks or something. If your firm is a member you may be able to access the test-suites and look at how the data in the options tests is being written and read, and there are quite a few, I think.Unfortunately my firm isn't that big ~150 in total and maybe about ~40 developers, if which there are 2 full time KDB devs who's job is mostly maintaining the ingestion and writing some quite basic functions like `as_of`.  There's only two people who work on our options desk as developers, so there's a lack of resourcing for KDB.  When I have these issues with KDB around performance, it's quite hard to get support within my firm from the two KDB devs (one of which is very junior).> I've never worked on options data and so can't opine on the problems it presentsThe thing about options data is that it's generally lower frequency but a lot more complex.  If spot data is 1 dimensional, and futures data is 2 dimensional, options are 3 dimensional.  You also have a lot more parameterizations which leads me to the second point :)> you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. Unfortunately my firm isn't that big ~150 in total and maybe about ~40 developers, if which there are 2 full time KDB devs who's job is mostly maintaining the ingestion and writing some quite basic functions like `as_of`.  There's only two people who work on our options desk as developers, so there's a lack of resourcing for KDB.  When I have these issues with KDB around performance, it's quite hard to get support within my firm from the two KDB devs (one of which is very junior).> I've never worked on options data and so can't opine on the problems it presentsThe thing about options data is that it's generally lower frequency but a lot more complex.  If spot data is 1 dimensional, and futures data is 2 dimensional, options are 3 dimensional.  You also have a lot more parameterizations which leads me to the second point :)> you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. > I've never worked on options data and so can't opine on the problems it presentsThe thing about options data is that it's generally lower frequency but a lot more complex.  If spot data is 1 dimensional, and futures data is 2 dimensional, options are 3 dimensional.  You also have a lot more parameterizations which leads me to the second point :)> you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. The thing about options data is that it's generally lower frequency but a lot more complex.  If spot data is 1 dimensional, and futures data is 2 dimensional, options are 3 dimensional.  You also have a lot more parameterizations which leads me to the second point :)> you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. > you may not want to load data out of KDB a day at a time. Try to do the processing in KDBJust to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. Just to give you a very specific example of the processing I need to do.  I have a data structure in KDB like this (sort of typescript notation):     row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s.      row = mapping<datetime, { a: number, b: number, mu: number: sigma: number, rho: number}>

This is vol surface. To convert that into volatility requires:    f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s.     f = log_moneyness - m;
    total_var = a + b * (rho * f + (f * f + sigma * sigma).sqrt())
    vol = total_var / time

Then in order to calculate the log_moneyness I need to calculate the forward price from an interest rate which is slightly more trivial.Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. Now I have a base in which I can start generating data like the delta, but this also requires a lot of math.I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. I was pulling this stuff out of KDB because I already had my code in rust that does all of this.> You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. > You said you're scared to do queries that return a lot of data, and that it often freezes. Are you sure the problem is at the KDB end?Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. Yeah, I'm pretty sure in my case.  We have some functions designed for getting data written by the KDB guys.  Even for functions that return 30 something rows, like an as_of query it takes ~10s. 
reply

 
reply

"
38,throw_that_away,Ask HN: Widespread Apathy?,https://news.ycombinator.com/item?id=40673039,"Not sure how to say this, but I've been developing code since 1999. Every company I've worked at everyone is super engaged until recently. I know it is easy to blame the pandemic, or remote work, threats of layoffs?... but lately nothing seems to be serious a…",2024-06-13T18:37:59Z,"Anyone else seeing this? 1999-2020 was 20+ years.That’s about the length of a long-term industry cycle.It’s also 20 yrs of selling a narrative about tech that recruited ambitious, value-driven people who also wanted to make money.Don’t want 18 hr days at Goldman or 10 years of medical school, but want the pay? Come work 8 at <tech co> and make the same pay without the intern and first years hazing by an alcoholic 45 y/o MD who hates their spouse and never goes home.And then if I was to get pretty negative: Then, ~2020 hits, the cracks in the ideology show, no way to hide the data revenue models behind every nice Change the World pitch, turns out tech also shredded social discourse and now looks like it might unemploy Mom and friends, and maybe undue democracy (who saw that coming haha), and so on. VCs always win and you’re tired of reading their same think piece blog posts, layoffs always win, a lot of places that seemed the polar opposite still became IBM accidentally. Work, don’t work, it’ll be several quarters before that catches up to you.  If you’re really introspective - why did I make $200k+ in my pajamas during COVID while someone made $15/hr at Whole Foods getting exposed to a pandemic all day long? Pretty sure people in that position actually got very sick… but HelloFresh kept getting delivered so I didn’t realize.The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. That’s about the length of a long-term industry cycle.It’s also 20 yrs of selling a narrative about tech that recruited ambitious, value-driven people who also wanted to make money.Don’t want 18 hr days at Goldman or 10 years of medical school, but want the pay? Come work 8 at <tech co> and make the same pay without the intern and first years hazing by an alcoholic 45 y/o MD who hates their spouse and never goes home.And then if I was to get pretty negative: Then, ~2020 hits, the cracks in the ideology show, no way to hide the data revenue models behind every nice Change the World pitch, turns out tech also shredded social discourse and now looks like it might unemploy Mom and friends, and maybe undue democracy (who saw that coming haha), and so on. VCs always win and you’re tired of reading their same think piece blog posts, layoffs always win, a lot of places that seemed the polar opposite still became IBM accidentally. Work, don’t work, it’ll be several quarters before that catches up to you.  If you’re really introspective - why did I make $200k+ in my pajamas during COVID while someone made $15/hr at Whole Foods getting exposed to a pandemic all day long? Pretty sure people in that position actually got very sick… but HelloFresh kept getting delivered so I didn’t realize.The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. It’s also 20 yrs of selling a narrative about tech that recruited ambitious, value-driven people who also wanted to make money.Don’t want 18 hr days at Goldman or 10 years of medical school, but want the pay? Come work 8 at <tech co> and make the same pay without the intern and first years hazing by an alcoholic 45 y/o MD who hates their spouse and never goes home.And then if I was to get pretty negative: Then, ~2020 hits, the cracks in the ideology show, no way to hide the data revenue models behind every nice Change the World pitch, turns out tech also shredded social discourse and now looks like it might unemploy Mom and friends, and maybe undue democracy (who saw that coming haha), and so on. VCs always win and you’re tired of reading their same think piece blog posts, layoffs always win, a lot of places that seemed the polar opposite still became IBM accidentally. Work, don’t work, it’ll be several quarters before that catches up to you.  If you’re really introspective - why did I make $200k+ in my pajamas during COVID while someone made $15/hr at Whole Foods getting exposed to a pandemic all day long? Pretty sure people in that position actually got very sick… but HelloFresh kept getting delivered so I didn’t realize.The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. Don’t want 18 hr days at Goldman or 10 years of medical school, but want the pay? Come work 8 at <tech co> and make the same pay without the intern and first years hazing by an alcoholic 45 y/o MD who hates their spouse and never goes home.And then if I was to get pretty negative: Then, ~2020 hits, the cracks in the ideology show, no way to hide the data revenue models behind every nice Change the World pitch, turns out tech also shredded social discourse and now looks like it might unemploy Mom and friends, and maybe undue democracy (who saw that coming haha), and so on. VCs always win and you’re tired of reading their same think piece blog posts, layoffs always win, a lot of places that seemed the polar opposite still became IBM accidentally. Work, don’t work, it’ll be several quarters before that catches up to you.  If you’re really introspective - why did I make $200k+ in my pajamas during COVID while someone made $15/hr at Whole Foods getting exposed to a pandemic all day long? Pretty sure people in that position actually got very sick… but HelloFresh kept getting delivered so I didn’t realize.The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. And then if I was to get pretty negative: Then, ~2020 hits, the cracks in the ideology show, no way to hide the data revenue models behind every nice Change the World pitch, turns out tech also shredded social discourse and now looks like it might unemploy Mom and friends, and maybe undue democracy (who saw that coming haha), and so on. VCs always win and you’re tired of reading their same think piece blog posts, layoffs always win, a lot of places that seemed the polar opposite still became IBM accidentally. Work, don’t work, it’ll be several quarters before that catches up to you.  If you’re really introspective - why did I make $200k+ in my pajamas during COVID while someone made $15/hr at Whole Foods getting exposed to a pandemic all day long? Pretty sure people in that position actually got very sick… but HelloFresh kept getting delivered so I didn’t realize.The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. The shine has worn off. That is all imo. Place that are both really changing the world, actually understand the second order effects and plan for those, and you can get hired at are few and far between. It’s still/just an industry where you can make a ton of money and keep your brain curious. 
reply

 There has been a quantitative shift in tech worker pay at the top end in the past twenty years.In other words, the past twenty years have seen the rise of Big Tech: billion-user products, trillion-dollar valuations, eating up entire industries (retail, publishing, consumer electronics, entertainment). What enabled them are software economies of scale (production + distribution), the US's ability to train and attract talent, cheap money, and access to massive markets abroad. In other words, the past twenty years have seen the rise of Big Tech: billion-user products, trillion-dollar valuations, eating up entire industries (retail, publishing, consumer electronics, entertainment). What enabled them are software economies of scale (production + distribution), the US's ability to train and attract talent, cheap money, and access to massive markets abroad. 
reply

 We're really only talking about the top employees at the top tech companies in the top most expensive COL areas. It's not like every tech employee in the world is making $500K and driving a Ferrari, despite what HN commenters might sometimes say.> There has been a quantitative shift in tech worker pay at the top end in the past twenty years.Bingo--we're comparing only the top end of tech pay. > There has been a quantitative shift in tech worker pay at the top end in the past twenty years.Bingo--we're comparing only the top end of tech pay. Bingo--we're comparing only the top end of tech pay. 
reply

 Cutting corners on details here - Jane, making $120-150k as an engineer at non-FAANG, but fully (or at least maximized risk controlled) on the right side of every gnarly automation unemployment theme we all know is coming simply because Jane knows how to code, link systems, and is ahead of the curve such that she can learn how to use AI in time, is in a much different and much more beneficial position than Sarah, at a bank, making $300k, knowledge stops at excel wizardry, and a LLM is about to unemploy her at 40 bc it gets better than a CFA 3. 
reply

 
reply

 Latter is possible for sure, but I don’t think anyone really thinks the tech hasn’t arrived, or isn’t on edge enough to give it the serious benefit of the doubt. Things just have to develop naturally from Netflix in 2013 (laggy and small library) to Netflix in 2024, and we’re there. IMO it’s a willful blind spot from those benefiting from this change to fully argue otherwise. 
reply

 I don't think that dream quite materialized.I doubt it will with AI either; they will just be supervising the AI, or spending time on more important things that the AI frees them up for.That's my ""prediction"", anyway... I doubt it will with AI either; they will just be supervising the AI, or spending time on more important things that the AI frees them up for.That's my ""prediction"", anyway... That's my ""prediction"", anyway... 
reply

 I’m guessing you’re being sarcastic but, I make that much at a tech company and absolutely can not afford a Ferrari. At least, not if I want a roof over my head. Of all the engineers I know making this much, and even double or triple that, the most expensive car driven is a model S.Actually the only person I know with a Ferrari is a cabinet contractor. He drove it over with paint cans that I requested for kitchen cabinet touch ups. Actually the only person I know with a Ferrari is a cabinet contractor. He drove it over with paint cans that I requested for kitchen cabinet touch ups. 
reply

 Don't worry, I'm sure your luck will turn around. 
reply

 
reply

 - WFH or at least hybrids enables a building or rebuilding of the social connections from neighborhoods, communities, and families. For about 2000 years, this was fulfilling to humans. From 2006-2020, Facebook became what’s fulfilling somehow. Good odds you’ll find the former fulfilling as a 101 human if you check it out.  Don’t have to be a 30+ y/o with a spouse and kids either. Just takes imagination, resources (fortunately, pay is great!) and some initial introspection and imagination to figure out who you are and what you want. Then go do it. Most others never get the chance (see my Whole Foods example)- technical knowledge and the time and freedom to think it through is a superpower to own your own life. WFH/hybrid removing commutes, to start, opened this all up. Go be a Capitalist Jr and spin up some companies. “Side hustle” doesn’t even do this situation justice. 2-5 years of work: you own your own internet conglomerate and have the next 30 years+ to benefit from it. - technical knowledge and the time and freedom to think it through is a superpower to own your own life. WFH/hybrid removing commutes, to start, opened this all up. Go be a Capitalist Jr and spin up some companies. “Side hustle” doesn’t even do this situation justice. 2-5 years of work: you own your own internet conglomerate and have the next 30 years+ to benefit from it. 
reply

 I'd like to add onto this particular comment, the mantra ""think small"".The process of focusing on the smaller-scale things that are within your sphere of influence (your neighborhood, your family, yourself) are slower, less instant-gratification, but they also deliver much higher ROI in long-term satisfaction. The process of focusing on the smaller-scale things that are within your sphere of influence (your neighborhood, your family, yourself) are slower, less instant-gratification, but they also deliver much higher ROI in long-term satisfaction. 
reply

 
reply

 I've been doing this for over 20 years and if you counted the number of days I worked on a weekend or more than 8 hours, it would probably add up to less than a month. 
reply

 
reply

 
reply

 Again - a majorly depressing blind spot for the RTO crowd, or the RTO crowd devalues/dislikes their families and communities I guess?Edit - touched the usual nerve, but it’s the truth and I’ll leave it at this: Work involves people, but not forced friendships and community, in the same way leadership involves people but not friendship.  People who expand past that at work tend to get burned and used by management, and have the blindspots I note, IME. People who instead expand into their families and communities don’t. And yes, you can build these community social bonds without slacking at work either. Such a false equivalency. Edit - touched the usual nerve, but it’s the truth and I’ll leave it at this: Work involves people, but not forced friendships and community, in the same way leadership involves people but not friendship.  People who expand past that at work tend to get burned and used by management, and have the blindspots I note, IME. People who instead expand into their families and communities don’t. And yes, you can build these community social bonds without slacking at work either. Such a false equivalency. 
reply

 Suffice it to say it's hard to focus on intellectually demanding work when a 2-year-old is throwing a fit because her juice box ran empty.And I honestly don't mind my co-workers, we have a fair bit in common.  It's nice to get some regular social exposure outside of kids + spouse, even if it is mostly surface-level. And I honestly don't mind my co-workers, we have a fair bit in common.  It's nice to get some regular social exposure outside of kids + spouse, even if it is mostly surface-level. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 

 I've had people present the perfect candidate with over 10 years of experience. On paper, you'd think they could rewrite the Linux kernel single-handedly in under a week, but when asked to write a Python script to check if a word is a palindrome, they have no idea. Similarly, candidates appear to know the TCP/IP stack inside out, but when asked to set up basic AWS VPC subnets and routing, they're completely clueless. They just parrot some bargain-basement course answer that is entirely incorrect. 
reply

 Sounds like you have some racist biases to work through. 
reply

 
reply

 

 
reply

 
reply

 
reply

 
reply

 
reply

 You may see great opportunities to improve metrics within your org, but for various reasons you cannot actually achieve these goals based on your own individual effort.  The reasons for failure are myriad, and I will avoid going down that path of sad tales.Finally now, when I'm just about out of energy, I recognize that the most likely way to do something of significance or otherwise effect real beneficial change is to strike out on your own, ideally with a partner or two, and build something new.  Of course that new thing will ultimately get bought by one of the bigger laggard companies who is incapable of allowing something like this to develop internally.  But you accept that reality and vow to build something new after that opportunity is closed out.At this point, we should be teaching classes on how to build great new things and get them sold off to the big slow giants.  Rinse, repeat.  I know there are people already doing this, but it's not well known or recognized. Finally now, when I'm just about out of energy, I recognize that the most likely way to do something of significance or otherwise effect real beneficial change is to strike out on your own, ideally with a partner or two, and build something new.  Of course that new thing will ultimately get bought by one of the bigger laggard companies who is incapable of allowing something like this to develop internally.  But you accept that reality and vow to build something new after that opportunity is closed out.At this point, we should be teaching classes on how to build great new things and get them sold off to the big slow giants.  Rinse, repeat.  I know there are people already doing this, but it's not well known or recognized. At this point, we should be teaching classes on how to build great new things and get them sold off to the big slow giants.  Rinse, repeat.  I know there are people already doing this, but it's not well known or recognized. 
reply

 https://www.ycombinator.com/https://www.startupschool.org/ https://www.startupschool.org/ 
reply

 Have we really reached a point where striking it out on your own is mostly an illusion? 
reply

 I changed companies twice between 2020 and 2024 and I've noticed this at both places. Not only is the average tenure of current employees everywhere much shorter (most of the people in the big tech where I work joined in the last 3 years), everyone works like they're only planning to stay for a short while. 
reply

 I feel guilty I’m a drag on the company but so hard to move in this market.So just why I haven’t been that engaged and burnout. Maybe others have similar experience. So just why I haven’t been that engaged and burnout. Maybe others have similar experience. 
reply

 
reply

 But honestly, I think it's better to find meaning outside of work. Work on something hard outside of work, or just find a few hobbies that make you happy. I'm not even 30 and I already personally feel the ""grind mindset"" leaving me as I find the things I thought were most important a decade ago don't matter so much any more e.g. lots of money and climbing the corporate ladder. 
reply

 
reply

 
reply

 It's easy to dismiss this as just a smart ass comment, but it's 100% real for me. My employer pretends to treat me fairly and I pretend to work hard. 
reply

 
reply

 And the market is also terrible so everyone takes what they can get and it shows on the effort put in. 
reply

 Yes, and most people have longed faced that without the pay of this quote: ""Don’t want 18 hr days at Goldman or 10 years of medical school, but want the pay? Come work 8 at <tech co> and make the same pay without the intern and first years hazing by an alcoholic 45 y/o MD who hates their spouse and never goes home.""- https://news.ycombinator.com/item?id=40673588 - https://news.ycombinator.com/item?id=40673588 
reply

 
reply

 Real estate is bought in bulk by the same people that rake in the big bucks in those companies as well. And rented out to people that can't afford to buy a house for premium profit.The same is happening online: companies are using the collective intelligence of everyone to train models to sell back to those same people for profit.We're getting screwed at both endsFor the first time in a long while a generation is worse off than their parents.
Food, housing, health, clean air and water. Every basic need from the bottom of Maslow's pyramid is currently under scrutiny. The same is happening online: companies are using the collective intelligence of everyone to train models to sell back to those same people for profit.We're getting screwed at both endsFor the first time in a long while a generation is worse off than their parents.
Food, housing, health, clean air and water. Every basic need from the bottom of Maslow's pyramid is currently under scrutiny. We're getting screwed at both endsFor the first time in a long while a generation is worse off than their parents.
Food, housing, health, clean air and water. Every basic need from the bottom of Maslow's pyramid is currently under scrutiny. For the first time in a long while a generation is worse off than their parents.
Food, housing, health, clean air and water. Every basic need from the bottom of Maslow's pyramid is currently under scrutiny. 
reply

 Something related I heard yesterday during consulting in a client:""Boss makes a dollar, I make a dime, that's why my code, comes from AI"" ""Boss makes a dollar, I make a dime, that's why my code, comes from AI"" 
reply

 is this actually an issue for tech workers? I don't know a single person in tech that can't afford a home within 30min of the city center. 
reply

 
reply

 $30k/mo income pre-tax or $360k/yr. Obviously not ideal, but a dual income family can afford this. My tech worker friends typically put more down 20% down (avoid jumbo loans), so their monthly could be much lower. 
reply

 
reply

 https://hbr.org/magazinehttps://hbr.org/https://teambuilding.com/blog/manager-magazinesRead the articles and imagine your company leaders are following this advice.  For example:""When Your Employee Feels Angry, Sad, or Dejected""https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? https://hbr.org/https://teambuilding.com/blog/manager-magazinesRead the articles and imagine your company leaders are following this advice.  For example:""When Your Employee Feels Angry, Sad, or Dejected""https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? https://teambuilding.com/blog/manager-magazinesRead the articles and imagine your company leaders are following this advice.  For example:""When Your Employee Feels Angry, Sad, or Dejected""https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? Read the articles and imagine your company leaders are following this advice.  For example:""When Your Employee Feels Angry, Sad, or Dejected""https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? ""When Your Employee Feels Angry, Sad, or Dejected""https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? https://hbr.org/2024/07/when-your-employee-feels-angry-sad-o...Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? Gives advice on what the right thing to do is, to get your employee performing again.  It's almost like the leaders do not know this stuff themselves and are learning how to fake empathy.  The article creates a two dimensional matrix for when to engage with employees and the two axes of that matrix are ""Is your employee focusing on a time-sensitive goal?"" and ""Does your employee seem to be coping?"".  If the employee is doing something time-sensitive and they don't seem to be coping the advice is to ""intervene and help that person focus"".  That is, help them focus on their work, ignore their problems, give them a pep talk, ""you can do this"", wink at them in meetings if they get shot down.I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? I've watched managers transform from nice people to tyrants due to absorbing stuff like this.  They share this kind of advice with their peers also.  ""10 tricks to get more out of your employees and accelerate meeting your project deadlines"".  Maybe you could buy your managers a subscription to Psychology Today or something else that you think would be a better influence on them? 
reply

 
reply

 
reply

 Looking at it from another point of view, even if your workplace objectively sucks and you don't want to be there, the lack of communication makes it worse:* You can't really ""see"" the stress in people's faces. Hell, there's Zoom airbrushing so you don't look dead. You don't see when they start the day, end the day, have a long lunch, etc. All of those were subtle cues for what you yourself could get away with doing and not doing yourself.* If your coworkers were phoning it in, it was relatively clear. Which isn't bad, it means you could phone it in. But we've had layoffs now. And since you can't really ""see"" people working, when they say ""I spent 8 hours sweating over my keyboard,"" you take it as face value. You think that you have to do the same and more just to be average.* If your coworkers aren't fulfilled with the work or another aspect, it's probably not well-articulated or even shared. These used to be things you simply ended up discussing over a beer. Now you end up intentionally Slacking each other (if at all), and probably when the sentiment has gone from ""this isn't great"" to ""I'm actively looking and stressed."" You don't get as much time to fix things, or as much time to realize you're not alone in it.All-in-all, I'd still hope we can have remote as a norm, but only a handful of people know how to communicate proactively imo. The rest probably need 2 straight weeks of in-person work every quarter or 2 days of hybrid work per week. * You can't really ""see"" the stress in people's faces. Hell, there's Zoom airbrushing so you don't look dead. You don't see when they start the day, end the day, have a long lunch, etc. All of those were subtle cues for what you yourself could get away with doing and not doing yourself.* If your coworkers were phoning it in, it was relatively clear. Which isn't bad, it means you could phone it in. But we've had layoffs now. And since you can't really ""see"" people working, when they say ""I spent 8 hours sweating over my keyboard,"" you take it as face value. You think that you have to do the same and more just to be average.* If your coworkers aren't fulfilled with the work or another aspect, it's probably not well-articulated or even shared. These used to be things you simply ended up discussing over a beer. Now you end up intentionally Slacking each other (if at all), and probably when the sentiment has gone from ""this isn't great"" to ""I'm actively looking and stressed."" You don't get as much time to fix things, or as much time to realize you're not alone in it.All-in-all, I'd still hope we can have remote as a norm, but only a handful of people know how to communicate proactively imo. The rest probably need 2 straight weeks of in-person work every quarter or 2 days of hybrid work per week. * If your coworkers were phoning it in, it was relatively clear. Which isn't bad, it means you could phone it in. But we've had layoffs now. And since you can't really ""see"" people working, when they say ""I spent 8 hours sweating over my keyboard,"" you take it as face value. You think that you have to do the same and more just to be average.* If your coworkers aren't fulfilled with the work or another aspect, it's probably not well-articulated or even shared. These used to be things you simply ended up discussing over a beer. Now you end up intentionally Slacking each other (if at all), and probably when the sentiment has gone from ""this isn't great"" to ""I'm actively looking and stressed."" You don't get as much time to fix things, or as much time to realize you're not alone in it.All-in-all, I'd still hope we can have remote as a norm, but only a handful of people know how to communicate proactively imo. The rest probably need 2 straight weeks of in-person work every quarter or 2 days of hybrid work per week. * If your coworkers aren't fulfilled with the work or another aspect, it's probably not well-articulated or even shared. These used to be things you simply ended up discussing over a beer. Now you end up intentionally Slacking each other (if at all), and probably when the sentiment has gone from ""this isn't great"" to ""I'm actively looking and stressed."" You don't get as much time to fix things, or as much time to realize you're not alone in it.All-in-all, I'd still hope we can have remote as a norm, but only a handful of people know how to communicate proactively imo. The rest probably need 2 straight weeks of in-person work every quarter or 2 days of hybrid work per week. All-in-all, I'd still hope we can have remote as a norm, but only a handful of people know how to communicate proactively imo. The rest probably need 2 straight weeks of in-person work every quarter or 2 days of hybrid work per week. 
reply

 
reply

 
reply

 
reply

 
reply

 The technology is ever boring. I've been studying CS papers from the 1960s-1990s and there is a lot of ingenuity and new avenues being explored. Now any random HN engineer can only ask ""how is this better than Rust?"" and I feel that not only we have remained stuck on languages and tech from the 1980s, we have regressed so much that most developers have forgotten or never even learned about ""futuristic"" environments such as Lisp or Smalltalk. People roll their eyes at these names for the simple reason that no one has been paid to improve upon these for the past 40 years, because companies only care about average productivity of the junior dev. We've spent the last 30 years reinventing C and UNIX; now the cool kids are adding coloured text in their VT100 terminals. Mindblowing.I am still consulting because being an employee is more and more like white-collar slavery, and post-pandemic it's not even that well-paid, what with the massive influx of low-quality, low-requirement workers and the post-2008 money tap being closed. I am spending my free time devouring old CS papers, and the thought of writing 1500 lines of YAML to deploy a Kubernetes sounds such a pointless, anachronistic castle of sands built by massive tech corps that have just found a way of turning the art of computer programming into a circus of Taylorist code monkeys following a script for 8 hours a days.Of course I'm apathetic. I'm too old for this./rant I am still consulting because being an employee is more and more like white-collar slavery, and post-pandemic it's not even that well-paid, what with the massive influx of low-quality, low-requirement workers and the post-2008 money tap being closed. I am spending my free time devouring old CS papers, and the thought of writing 1500 lines of YAML to deploy a Kubernetes sounds such a pointless, anachronistic castle of sands built by massive tech corps that have just found a way of turning the art of computer programming into a circus of Taylorist code monkeys following a script for 8 hours a days.Of course I'm apathetic. I'm too old for this./rant Of course I'm apathetic. I'm too old for this./rant /rant 
reply

 Pair this with this sick obsession the industry seems to have developed to replace humanity with chatbots, and yeah, here we are. 
reply

 
reply

 I feel like over the last year a lot of people around me have reached the point where they would naturally start looking around at other opportunities. But there just aren't that many opportunities around. So I suspect people are just hanging about, collecting a paycheque and waiting for the right time to bounce. 
reply

 
reply

 
reply

 The claim is to hide ""hot button topic"" but that includes a lot of topical, but not flamey, posts. It's a stupid rule IMO. 
reply

 What did people believe? In an ever-progressive world? That’s a limited and superficial perspective on life. Everything that is born, whether physical or not, will eventually die. The current circus will also come to an end.There is a time for everything......a time to tear down and a time to build...The natural cycle of things will unfold, regardless of human desire. There is a time for everything......a time to tear down and a time to build...The natural cycle of things will unfold, regardless of human desire. a time to tear down and a time to build...The natural cycle of things will unfold, regardless of human desire. The natural cycle of things will unfold, regardless of human desire. 
reply

 
reply

 I read this article a couple days ago: https://www.japantimes.co.jp/business/2024/06/12/japan-quiet...Japan is a great barometer for where many of the developed economies are heading.>Only 6% of the Japanese workforce is engaged, one of the lowest readings in the world,Labor Force Participation Rate in Japan increased to 63.10 percent in April, the highest in five months,Less then 4% of their 120 million citizens are actually working and doing things their society demands. Japan is a great barometer for where many of the developed economies are heading.>Only 6% of the Japanese workforce is engaged, one of the lowest readings in the world,Labor Force Participation Rate in Japan increased to 63.10 percent in April, the highest in five months,Less then 4% of their 120 million citizens are actually working and doing things their society demands. >Only 6% of the Japanese workforce is engaged, one of the lowest readings in the world,Labor Force Participation Rate in Japan increased to 63.10 percent in April, the highest in five months,Less then 4% of their 120 million citizens are actually working and doing things their society demands. Labor Force Participation Rate in Japan increased to 63.10 percent in April, the highest in five months,Less then 4% of their 120 million citizens are actually working and doing things their society demands. Less then 4% of their 120 million citizens are actually working and doing things their society demands. 
reply

 I now work at a really small company lead by people who seem genuine (they've managed to at least keep up the act for a few years I suppose). It doesn't pay particularly well (though not bad for where I live either), and there's no ""growth"" potential (I learn lots of new stuff, but the money isn't going to double or triple or anything like that). No ads or hyperscaling - we just make a product that people are willing to pay money for. I'm as engaged as I've ever been for an employer. 
reply

 Btw - I've been developing since 1999 as well, so there are plenty of people cleaning up the debt I left. 
reply

 
reply

 
reply

 
reply

 
reply

 The generation of young people in the 1960s thought this. Then the generation of young people in the 1970s thought this. Then the generation of young people in the 1980s thought this, and so on. I'll be 50 this year, I've gotten to see it twice myself. I've started reading about it historically (Days of Rage by Burrough is informative and neutral tone).Capitalism isn't a cancer. It's just a framework that gives you enough liberty to succeed or fail. Many fail. Many who fail spend years pouting about it, waste what little time they might have for any second attempts.> They're going to learn the hard way now.""They"" won't learn anything. They don't have to learn anything, but if they did, you don't have any leverage anyway to be able to force the issue. They're out there busy creating a world, right now, right this very minute, in which they don't need you or other malcontents at all. They're satisfied that they can create this world and soon. And they're not penciling in a place for you or those like you to exist within it. And you have no leverage. What leverage you might have managed to squirrel away before, you rejected it. You reject it now, even in this comment. There's that nagging little thought in the back of your mind, that if you were to try to fix the system from within the system, you might discover you no longer worry so much about fixing it, right? Capitalism isn't a cancer. It's just a framework that gives you enough liberty to succeed or fail. Many fail. Many who fail spend years pouting about it, waste what little time they might have for any second attempts.> They're going to learn the hard way now.""They"" won't learn anything. They don't have to learn anything, but if they did, you don't have any leverage anyway to be able to force the issue. They're out there busy creating a world, right now, right this very minute, in which they don't need you or other malcontents at all. They're satisfied that they can create this world and soon. And they're not penciling in a place for you or those like you to exist within it. And you have no leverage. What leverage you might have managed to squirrel away before, you rejected it. You reject it now, even in this comment. There's that nagging little thought in the back of your mind, that if you were to try to fix the system from within the system, you might discover you no longer worry so much about fixing it, right? > They're going to learn the hard way now.""They"" won't learn anything. They don't have to learn anything, but if they did, you don't have any leverage anyway to be able to force the issue. They're out there busy creating a world, right now, right this very minute, in which they don't need you or other malcontents at all. They're satisfied that they can create this world and soon. And they're not penciling in a place for you or those like you to exist within it. And you have no leverage. What leverage you might have managed to squirrel away before, you rejected it. You reject it now, even in this comment. There's that nagging little thought in the back of your mind, that if you were to try to fix the system from within the system, you might discover you no longer worry so much about fixing it, right? ""They"" won't learn anything. They don't have to learn anything, but if they did, you don't have any leverage anyway to be able to force the issue. They're out there busy creating a world, right now, right this very minute, in which they don't need you or other malcontents at all. They're satisfied that they can create this world and soon. And they're not penciling in a place for you or those like you to exist within it. And you have no leverage. What leverage you might have managed to squirrel away before, you rejected it. You reject it now, even in this comment. There's that nagging little thought in the back of your mind, that if you were to try to fix the system from within the system, you might discover you no longer worry so much about fixing it, right? 
reply

 I got to less worry by concluding that there's no fixing it at all. It's all an entropic reaction, like milk mixing in coffee. You can't freeze the mixture in time or reverse it. It's all deterministically headed toward its lowest energy state, whether that's some utopia or dystopia. And, in a roundabout way, that translates into it not needing fixing! The only thing that needs fixing is my approach/relationship to it. The fix to which is turning out to seem like taking everything (the system, people, life) less seriously and becoming a lolbertarian. Don't worry and just have a good time, man. :D (Luckily for me, that includes -- actually, is mostly -- coding.) Anyways, what was that about the '60s? 
reply

 In the 90's/2000's, the tech industry was seen as the place for visionaries and the hard workers who were there to change the world, to make it a better place. Google had the motto ""Don't be evil"", and wanted to make all of the world's information easily accessible. Apple was for the perfectionists, the artsy-tech crowd, Facebook was there to connect people, etc.But as those company's (and the industry) matured, those dreams were pushed to the side. As these companies grew, it became about shareholder profit (because remember, company's have to operate in the best interest of their shareholders legally, which means protecting and increasing their wealth). As such, those visionaries at Google who were making the world a better place by making information accessible, now collect data and advertise to the world in, objectively, unethical ways. Those at Facebook who wanted to connect people from all over the world to build communities and promote discussion, now just grab as much data as possible to promote hyper-targeted ads.The industry matured, interest rates rose, and VC's became more picky with where they spent their money. As such, these smaller slights against users and employees had to be accelerated in recent years. Teams and even entire departments were laid off, the quantity of ads was increased, while the quality decreased, free services locked behind paywalls, all in an effort to save money to meet a 5% profit growth that quarter.Tech workers are no longer viewed as the world changers leading the company's vision for greatness, some execs view us as an obstacle to their revenue goals. We're a liability that needs to be mitigated, and layoffs are an easy way to do that.Ultimately, we've all become kind of jaded to the tech industry. It's no longer about making the world a better place, it's about money, and we're not in the club. But as those company's (and the industry) matured, those dreams were pushed to the side. As these companies grew, it became about shareholder profit (because remember, company's have to operate in the best interest of their shareholders legally, which means protecting and increasing their wealth). As such, those visionaries at Google who were making the world a better place by making information accessible, now collect data and advertise to the world in, objectively, unethical ways. Those at Facebook who wanted to connect people from all over the world to build communities and promote discussion, now just grab as much data as possible to promote hyper-targeted ads.The industry matured, interest rates rose, and VC's became more picky with where they spent their money. As such, these smaller slights against users and employees had to be accelerated in recent years. Teams and even entire departments were laid off, the quantity of ads was increased, while the quality decreased, free services locked behind paywalls, all in an effort to save money to meet a 5% profit growth that quarter.Tech workers are no longer viewed as the world changers leading the company's vision for greatness, some execs view us as an obstacle to their revenue goals. We're a liability that needs to be mitigated, and layoffs are an easy way to do that.Ultimately, we've all become kind of jaded to the tech industry. It's no longer about making the world a better place, it's about money, and we're not in the club. The industry matured, interest rates rose, and VC's became more picky with where they spent their money. As such, these smaller slights against users and employees had to be accelerated in recent years. Teams and even entire departments were laid off, the quantity of ads was increased, while the quality decreased, free services locked behind paywalls, all in an effort to save money to meet a 5% profit growth that quarter.Tech workers are no longer viewed as the world changers leading the company's vision for greatness, some execs view us as an obstacle to their revenue goals. We're a liability that needs to be mitigated, and layoffs are an easy way to do that.Ultimately, we've all become kind of jaded to the tech industry. It's no longer about making the world a better place, it's about money, and we're not in the club. Tech workers are no longer viewed as the world changers leading the company's vision for greatness, some execs view us as an obstacle to their revenue goals. We're a liability that needs to be mitigated, and layoffs are an easy way to do that.Ultimately, we've all become kind of jaded to the tech industry. It's no longer about making the world a better place, it's about money, and we're not in the club. Ultimately, we've all become kind of jaded to the tech industry. It's no longer about making the world a better place, it's about money, and we're not in the club. 
reply

 Facebook really did connect everyone on Earth.  Google really did make all the world’s information available to everyone.  Apple really did put a device in everyone’s pocket to access all that information.But that’s also what gave us superhuman algorithms designed to suck all of your attention away from all the real world things humans need to be happy.  Like fresh air, exercise, and face to face interaction. But that’s also what gave us superhuman algorithms designed to suck all of your attention away from all the real world things humans need to be happy.  Like fresh air, exercise, and face to face interaction. 
reply

 
reply

 
reply

 There are two people on my team who have become extremely disengaged of late–and I think one has good reason–and one way this manifests is in their agreement to do or fix something, but those changes never actually being implemented. I find myself having to follow up many times to ensure things don't get lost in the shuffle. But I don't directly manage one of the people, and it seems like they just DGAF what I say–no matter how I approach them. ""Strong suggestions"" really don't go anywhere. Pretty apathetic, if you ask me.[1] https://en.wikipedia.org/wiki/Pocket_vetoedit: fixed typos [1] https://en.wikipedia.org/wiki/Pocket_vetoedit: fixed typos edit: fixed typos 
reply

 No one is going to hustle for a meh deal, unless they’re naive or unsophisticated. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
39,hakimk,Fini (YC S22) Is Hiring a Front-End Engineer,https://news.ycombinator.com/item?id=40657088,"Comments URL: https://news.ycombinator.com/item?id=40657088
Points: 0
# Comments: 0",2024-06-12T12:01:01Z,"The role: As a Front End Engineer, you'll lead front-end engineering, design intuitive UIs, create technical roadmaps, and collaborate with other frontend, backend and ML engineers.Must have 3-5 years of experience with React/Vue/Angular, leading architectural direction and a large dose of independence. Bonus for UX, AI/ML facing work. Our tech stack includes React, TypeScript/NodeJS, and Python ML APIs.Apply: The process includes a chat with the founders, and a tailored evaluation (work trial, take-home or code review) suited to your wishes. We offer competitive compensation, equity, flexible schedules, and the latest gear. Remote role with the opportunity for quarterly/biannual meetups. Office available in Amsterdam. Email your resume with the subject 'Front End Engineer Application' to hello [at] usefini.com Must have 3-5 years of experience with React/Vue/Angular, leading architectural direction and a large dose of independence. Bonus for UX, AI/ML facing work. Our tech stack includes React, TypeScript/NodeJS, and Python ML APIs.Apply: The process includes a chat with the founders, and a tailored evaluation (work trial, take-home or code review) suited to your wishes. We offer competitive compensation, equity, flexible schedules, and the latest gear. Remote role with the opportunity for quarterly/biannual meetups. Office available in Amsterdam. Email your resume with the subject 'Front End Engineer Application' to hello [at] usefini.com Apply: The process includes a chat with the founders, and a tailored evaluation (work trial, take-home or code review) suited to your wishes. We offer competitive compensation, equity, flexible schedules, and the latest gear. Remote role with the opportunity for quarterly/biannual meetups. Office available in Amsterdam. Email your resume with the subject 'Front End Engineer Application' to hello [at] usefini.com"
40,simonebrunozzi,Ask HN: Best way to remove CO2 in a bedroom?,https://news.ycombinator.com/item?id=40696110,"I know that CO2 sequestration/capture is imperfect and expensive; however, I was wondering if there is a doable way to remove CO2 in a bedroom at night, to improve air quality why we sleep?

Comments URL: https://news.ycombinator.com/item?id=40696110
Points: …",2024-06-16T10:52:13Z,"
reply

 Add a fan and it's hard to find something more optimal and cheap for this problem. 
reply

 
reply

 
reply

 
reply

 https://www.reddit.com/r/Damnthatsinteresting/comments/ul8mt... 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Have you maybe done measurements of what difference between the inside and outside temperature is enough to reduce CO2 without a fan? 
reply

 What we've found is that in the winter putting two windows open a crack makes a very significant different in CO2 and radon builup. CO2 without the cracked windows will be around 1200 or more, while with cracked windows can be as low as 600-800. Not perfect, but like I said, a major improvement. I don't have a precise way to measure if the heat comes off more often, but my experience is that it does not. 
reply

 Imagine a completely closed room surrounded by open atmosphere with the room air having twice the number of CO₂ molecules per m^3 as the open atmosphere. The room air and the outside air are at the same temperature.Now imagine opening a small vent in the room, and consider what happens to the air close to the vent. Molecules near the vent and moving toward it have a chance of crossing to the other side. At the vent we have a constant flow of molecules from inside to outside and a constant flow of molecules from outside to inside.What counts as ""near"" depends on the mean free path, which is proportional to temperature. With the temperatures the same the mean free path will be about the same.Since there are twice as many CO₂ molecules near the vent on the inside, twice as many CO₂ molecules will be flowing out of the room as are flowing in.A temperature difference would increase this, by increasing the mean free path on the hot side which increases what counts as ""near"" on that side. But what matters is what the temperature is above absolute 0. For a room at 40℃ (104℉) and an outside at 0℃ (32℉) that's only about a 15% temperature difference. Now imagine opening a small vent in the room, and consider what happens to the air close to the vent. Molecules near the vent and moving toward it have a chance of crossing to the other side. At the vent we have a constant flow of molecules from inside to outside and a constant flow of molecules from outside to inside.What counts as ""near"" depends on the mean free path, which is proportional to temperature. With the temperatures the same the mean free path will be about the same.Since there are twice as many CO₂ molecules near the vent on the inside, twice as many CO₂ molecules will be flowing out of the room as are flowing in.A temperature difference would increase this, by increasing the mean free path on the hot side which increases what counts as ""near"" on that side. But what matters is what the temperature is above absolute 0. For a room at 40℃ (104℉) and an outside at 0℃ (32℉) that's only about a 15% temperature difference. What counts as ""near"" depends on the mean free path, which is proportional to temperature. With the temperatures the same the mean free path will be about the same.Since there are twice as many CO₂ molecules near the vent on the inside, twice as many CO₂ molecules will be flowing out of the room as are flowing in.A temperature difference would increase this, by increasing the mean free path on the hot side which increases what counts as ""near"" on that side. But what matters is what the temperature is above absolute 0. For a room at 40℃ (104℉) and an outside at 0℃ (32℉) that's only about a 15% temperature difference. Since there are twice as many CO₂ molecules near the vent on the inside, twice as many CO₂ molecules will be flowing out of the room as are flowing in.A temperature difference would increase this, by increasing the mean free path on the hot side which increases what counts as ""near"" on that side. But what matters is what the temperature is above absolute 0. For a room at 40℃ (104℉) and an outside at 0℃ (32℉) that's only about a 15% temperature difference. A temperature difference would increase this, by increasing the mean free path on the hot side which increases what counts as ""near"" on that side. But what matters is what the temperature is above absolute 0. For a room at 40℃ (104℉) and an outside at 0℃ (32℉) that's only about a 15% temperature difference. 
reply

 
reply

 I sleep in very small room -- only 45 sq feet and 45 * 8 cubic feet. I don't have a CO2 meter, but I've been sleeping in the room for decades, so I have many data points, and I am pretty sure I can tell (by noticing that my thinking is duller and stupider than usual the next day) when CO2 levels were too high overnight.No matter how high the CO2 level are in the room, 20 minutes of having the door wide open will bring CO2 to levels I cannot distinguish from outdoor air even if there is nothing (no wind, fan or heat source) to cause convection. Here we see diffusion in action. But at night, I prefer to have the door open just an crack (about an inch). Configured that way, CO2 levels clearly get too high if I rely on just diffusion: I need convection to keep CO2 levels healthy, and a heater running inside the room provides sufficient convection (as does a fan pointed at the crack of the door).There is one exception: when the air outside the room is hot enough (and here I guess I should mention that the door to this very small room basically opens to the outdoors) then the heater might not provide enough convection (and even if I could be assured that it did, it would make me too warm on very warm night). I.e., my system of running a heater and having the door open only a crack should not be relied on to keep CO2 levels low in very warm weather unless you want to do research I have not done (e.g., with a CO2 meter).I should mention that this very small room is unusually airtight: even the round holes in the metal boxes inside the walls that contain the electrical outlets and light switches have been sealed. I mention this because it has made it easier for me to compare the effects of convection to the effects of diffusion because when there is only one opening (a door in my case) in an otherwise almost completely airtight room, the presence of a wind (and there is some wind or breeze most times in most places on earth) does not induce significant convection across the doorway.I used to rely on an alarm clock to wake me up every 105 minutes to air the room (which takes 6 minutes on very cold nights and 10 minutes on the warmest nights). (When sleeping this way, the door is completely closed during the 105-minute intervals of sleep.) I no longer sleep this way because I've become less tolerant of having my sleep interrupted every 105 minutes. I mention this to underline the fact that I have plenty (decades) of experience with diffusion and convection in the context of CO2 and sleep.(The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) No matter how high the CO2 level are in the room, 20 minutes of having the door wide open will bring CO2 to levels I cannot distinguish from outdoor air even if there is nothing (no wind, fan or heat source) to cause convection. Here we see diffusion in action. But at night, I prefer to have the door open just an crack (about an inch). Configured that way, CO2 levels clearly get too high if I rely on just diffusion: I need convection to keep CO2 levels healthy, and a heater running inside the room provides sufficient convection (as does a fan pointed at the crack of the door).There is one exception: when the air outside the room is hot enough (and here I guess I should mention that the door to this very small room basically opens to the outdoors) then the heater might not provide enough convection (and even if I could be assured that it did, it would make me too warm on very warm night). I.e., my system of running a heater and having the door open only a crack should not be relied on to keep CO2 levels low in very warm weather unless you want to do research I have not done (e.g., with a CO2 meter).I should mention that this very small room is unusually airtight: even the round holes in the metal boxes inside the walls that contain the electrical outlets and light switches have been sealed. I mention this because it has made it easier for me to compare the effects of convection to the effects of diffusion because when there is only one opening (a door in my case) in an otherwise almost completely airtight room, the presence of a wind (and there is some wind or breeze most times in most places on earth) does not induce significant convection across the doorway.I used to rely on an alarm clock to wake me up every 105 minutes to air the room (which takes 6 minutes on very cold nights and 10 minutes on the warmest nights). (When sleeping this way, the door is completely closed during the 105-minute intervals of sleep.) I no longer sleep this way because I've become less tolerant of having my sleep interrupted every 105 minutes. I mention this to underline the fact that I have plenty (decades) of experience with diffusion and convection in the context of CO2 and sleep.(The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) There is one exception: when the air outside the room is hot enough (and here I guess I should mention that the door to this very small room basically opens to the outdoors) then the heater might not provide enough convection (and even if I could be assured that it did, it would make me too warm on very warm night). I.e., my system of running a heater and having the door open only a crack should not be relied on to keep CO2 levels low in very warm weather unless you want to do research I have not done (e.g., with a CO2 meter).I should mention that this very small room is unusually airtight: even the round holes in the metal boxes inside the walls that contain the electrical outlets and light switches have been sealed. I mention this because it has made it easier for me to compare the effects of convection to the effects of diffusion because when there is only one opening (a door in my case) in an otherwise almost completely airtight room, the presence of a wind (and there is some wind or breeze most times in most places on earth) does not induce significant convection across the doorway.I used to rely on an alarm clock to wake me up every 105 minutes to air the room (which takes 6 minutes on very cold nights and 10 minutes on the warmest nights). (When sleeping this way, the door is completely closed during the 105-minute intervals of sleep.) I no longer sleep this way because I've become less tolerant of having my sleep interrupted every 105 minutes. I mention this to underline the fact that I have plenty (decades) of experience with diffusion and convection in the context of CO2 and sleep.(The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) I should mention that this very small room is unusually airtight: even the round holes in the metal boxes inside the walls that contain the electrical outlets and light switches have been sealed. I mention this because it has made it easier for me to compare the effects of convection to the effects of diffusion because when there is only one opening (a door in my case) in an otherwise almost completely airtight room, the presence of a wind (and there is some wind or breeze most times in most places on earth) does not induce significant convection across the doorway.I used to rely on an alarm clock to wake me up every 105 minutes to air the room (which takes 6 minutes on very cold nights and 10 minutes on the warmest nights). (When sleeping this way, the door is completely closed during the 105-minute intervals of sleep.) I no longer sleep this way because I've become less tolerant of having my sleep interrupted every 105 minutes. I mention this to underline the fact that I have plenty (decades) of experience with diffusion and convection in the context of CO2 and sleep.(The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) I used to rely on an alarm clock to wake me up every 105 minutes to air the room (which takes 6 minutes on very cold nights and 10 minutes on the warmest nights). (When sleeping this way, the door is completely closed during the 105-minute intervals of sleep.) I no longer sleep this way because I've become less tolerant of having my sleep interrupted every 105 minutes. I mention this to underline the fact that I have plenty (decades) of experience with diffusion and convection in the context of CO2 and sleep.(The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) (The 6 to 10 minutes of having the door wide open does not reliably reduce CO2 to levels indistinguishable from outdoor air, but I consider it good enough, and I wish to reduce the duration of the discomfort of lying in bed with the door wide open.) 
reply

 
reply

 If you have an air quality concern, you can start by installing an indoor air quality monitor with a CO2 sensor.[1] https://en.wikipedia.org/wiki/Carbon_dioxide_scrubber [1] https://en.wikipedia.org/wiki/Carbon_dioxide_scrubber 
reply

 
reply

 Of course the tech exists, it's just not common. Some submersible tech and space tech used rebreathers or scrubbers to remove CO2 and increase O2 levels. Of course the reason it's not common is that outside of those use cases you can generally just open a window. 
reply

 
reply

 It would be awesome if there were a way to actually capture and sequester in-home CO2, so that your in-home number could be lower than the outdoors. But I’ve never heard of such a thing. 
reply

 
reply

 
reply

 
reply

 Will that help calm my anxiety and help me accept the inevitability of death and see it as the indivisible half of the miracle of life? 
reply

 
reply

 
reply

 
reply

 
reply

 The algae route is cheaper, but needs a lot of algae. 
reply

 Doing some napkin math based on quickly googled(maybe incorrect) numbers, 100g of lime soda can absorb 10-20L of CO2 depending on the setup. Random offer off a Google search is $30 for 1kg, and I can get it cheaper locally. To go from 1200 ppm to atmospheric 421, you need to remove ~0.8L/m³. For my 50m³ room, that's 200-400g of lime soda. CO2 takes several hours with closed windows to build up that high, though, and it'd need a control loop to avoid wasting the lime soda by scrubbing below atmospheric CO2 levels...I thought you were being hyperbolic but, damn, yeah, this doesn't sound very viable ): I thought you were being hyperbolic but, damn, yeah, this doesn't sound very viable ): 
reply

 I'd ideally want the CO2 to be the preindustrial level of under 300 ppm. The reason is that I suspect it could lead to maximum alertness and a feeling of well-being.Note that some ventilation still is needed during the day to get O2 and remove VOCs, so the calculations are affected.In your calculation, remember to account for the presence of people who constantly breathe out CO2. This and the need for some ventilation add to the cost. Note that some ventilation still is needed during the day to get O2 and remove VOCs, so the calculations are affected.In your calculation, remember to account for the presence of people who constantly breathe out CO2. This and the need for some ventilation add to the cost. In your calculation, remember to account for the presence of people who constantly breathe out CO2. This and the need for some ventilation add to the cost. 
reply

 I doubt you'd have much benefit going down to 300 instead of 400, and it introduces a whole other problem - aiming at sub-ambient CO2 targets makes ventilation increase the amount of scrubbing you need to do instead of decreasing it. I imagine the increase in cost would be massive.But yeah it'd probably be better to base the calculations on co2 breathed out by people. But like I said, that's just some quick, likely incorrect math to land in the right ballpark. But yeah it'd probably be better to base the calculations on co2 breathed out by people. But like I said, that's just some quick, likely incorrect math to land in the right ballpark. 
reply

 Amines are traditionally used instead in a closed loop system, but they are corrosive and unsafe for use at home, although refrigerators and ACs too make use of similar loops. GPT says that some non-corrosive common amino acid salts can be used instead, but I find it difficult to believe. 
reply

 
reply

 Often times the best way to solve the OPs problem is just to run the central fan (assuming there is central air) as that will exchange bedroom air with the rest of the house, which assuming the house is significantly larger than the bedroom, will basically solve the problem.If you are going to do an ERV I would recommend adding a filter box for allergens/dust/etc assuming the ERV you select doesn’t have one built in. Not expensive, it’s just a sheet metal box you put filters in, HVAC guys buy and make them all the time.If you want to spend even less money, and don’t have central air, you can install a bathroom fan in the ceiling/wall of the bedroom, and have it vent to the rest of the house but this takes a bit of thought with regards to airflow and how the air will mix. But even if all you are doing is effectively doubling the volume of your bedroom, that makes a big difference. If you are going to do an ERV I would recommend adding a filter box for allergens/dust/etc assuming the ERV you select doesn’t have one built in. Not expensive, it’s just a sheet metal box you put filters in, HVAC guys buy and make them all the time.If you want to spend even less money, and don’t have central air, you can install a bathroom fan in the ceiling/wall of the bedroom, and have it vent to the rest of the house but this takes a bit of thought with regards to airflow and how the air will mix. But even if all you are doing is effectively doubling the volume of your bedroom, that makes a big difference. If you want to spend even less money, and don’t have central air, you can install a bathroom fan in the ceiling/wall of the bedroom, and have it vent to the rest of the house but this takes a bit of thought with regards to airflow and how the air will mix. But even if all you are doing is effectively doubling the volume of your bedroom, that makes a big difference. 
reply

 
reply

 
reply

 I’ve installed mine in about 6hours (but I do have moderately accessible attic).They are somewhat cheap too - at $1k or so. They are somewhat cheap too - at $1k or so. 
reply

 
reply

 When I brought the monitor home, I was surprised all over again by 1000+ ppm levels with just a couple of people and a cat. All the efforts to seal the house for energy efficiency were in direct opposition to advice to lower CO2 levels. The only reasonably effective solution that isn't absurdly expensive is to open the windows a little. All the time. You pay more on heating and cooling, but.. there is no alternative.The good news is that it gives you a reason to leave the drafty window air conditioners installed all winter long.And house plants have negligible impact on the levels. Keep plants for the aesthetic, but they aren't going to solve the problem. The good news is that it gives you a reason to leave the drafty window air conditioners installed all winter long.And house plants have negligible impact on the levels. Keep plants for the aesthetic, but they aren't going to solve the problem. And house plants have negligible impact on the levels. Keep plants for the aesthetic, but they aren't going to solve the problem. 
reply

 
reply

 
reply

 Before that, overnight CO2 levels exceeded 2,600ppm. Now 
around 700 or so. Can go lower if I crank the fan up.Now I have the new problem of poor thermal regulation. My window is directly above my HVAC duct, so cool air goes straight from my air conditioner through the fan and out the window.I plan to wire up a microcontroller to turn the window fan on and off based on both CO2 levels and A/C activity, but I'm not really happy with the the setup. Too hacky, too much noise, and I need to seal the window screen better to keep bugs out.I've tried just keeping a window open, with no fan, but my CO2 sensor indicated it wasn't super effective. Plus you have to make sure you close the window when it rains otherwise muggy air fills the bedroom. Now I have the new problem of poor thermal regulation. My window is directly above my HVAC duct, so cool air goes straight from my air conditioner through the fan and out the window.I plan to wire up a microcontroller to turn the window fan on and off based on both CO2 levels and A/C activity, but I'm not really happy with the the setup. Too hacky, too much noise, and I need to seal the window screen better to keep bugs out.I've tried just keeping a window open, with no fan, but my CO2 sensor indicated it wasn't super effective. Plus you have to make sure you close the window when it rains otherwise muggy air fills the bedroom. I plan to wire up a microcontroller to turn the window fan on and off based on both CO2 levels and A/C activity, but I'm not really happy with the the setup. Too hacky, too much noise, and I need to seal the window screen better to keep bugs out.I've tried just keeping a window open, with no fan, but my CO2 sensor indicated it wasn't super effective. Plus you have to make sure you close the window when it rains otherwise muggy air fills the bedroom. I've tried just keeping a window open, with no fan, but my CO2 sensor indicated it wasn't super effective. Plus you have to make sure you close the window when it rains otherwise muggy air fills the bedroom. 
reply

 So the CO2 is removed regularly. 
reply

 
reply

 I studied for like 12 years in the biomedical field and I don’t really understand why OP is worried about this. 
reply

 
reply

 
reply

 Opening a window can be an option. So can an open bedroom door.The best option to me is to just leave your air handler fan set to ""on"" rather than ""auto"". Of course you need forced air for this. My house is relatively newer and moderately sized. It still seems to keep the whole house CO2 levels like 50-100ppm over outdoor levels. The bonus here if you're looking for ""air quality"" and nor just CO2 is that your air handler filter should catch many particulates (although most aren't capable of high merv ratings, it still seems to help). The best option to me is to just leave your air handler fan set to ""on"" rather than ""auto"". Of course you need forced air for this. My house is relatively newer and moderately sized. It still seems to keep the whole house CO2 levels like 50-100ppm over outdoor levels. The bonus here if you're looking for ""air quality"" and nor just CO2 is that your air handler filter should catch many particulates (although most aren't capable of high merv ratings, it still seems to help). 
reply

 
reply

 Then keep a window open enough to keep the air fresh.I find a few centimeters of gap is all that's needed. I find a few centimeters of gap is all that's needed. 
reply

 
reply

 This realization has made me quite anxious about the Keeling curve. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 If it's closer to the floor, it will be moving colder air, so you may want to point it inwardsCloser to the ceiling and you'll be moving warmer air, so you want it to go out Closer to the ceiling and you'll be moving warmer air, so you want it to go out 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 video: https://www.youtube.com/watch?v=6_2SdLEbHcM 
reply

 
reply

 
reply

 > When windows are replaced, a background ventilator or ‘trickle vent’ should be placed in the new window. This will replace any ventilation you lost, when installing a new window, because your previous window was leaky. If replacing your window did not reduce the amount of useful ventilation, this should be proven, and more ventilation is not needed.[0] https://www.gov.uk/government/publications/home-user-guide-t... [0] https://www.gov.uk/government/publications/home-user-guide-t... 
reply

 
reply

 A few quick thoughts – first in defense of Simone – CO2 levels while you sleep do have a large impact on sleep quality.  I would assume this to be largely non-controversial because most people have experienced a bad nights sleep in a stuffy hotel room for instance, but I did see some dismissive comments.What was surprising for me anyway was that the impact on sleep quality (particularly for women and children) happens at relatively low levels.  It would not be surprising to learn that CO2 levels of 3000 have a big impact on sleep, but at 1000?In fact, increasingly people are starting to think that the negative impacts of CO2 happen at much lower levels than previously thought (starting at around 600). Time will tell, but what complicates the research is that every person is different – so some people seem unaffected by numbers as high as 1500 while others feel terrible.In any event a recent sleep study (that you can find on pubmed) focused on three levels of CO2 exposure 800, 1900 and 3000.  You can find the study here – [Experimental study on sleep quality affected by carbon dioxide concentration] - https://pubmed.ncbi.nlm.nih.gov/32979003/The conclusions of the study (in my opinion anyway) were not surprising in that the researchers found that “Both subjective and physiological results showed that sleep quality decreased significantly with the increase of CO2 concentration.”Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. What was surprising for me anyway was that the impact on sleep quality (particularly for women and children) happens at relatively low levels.  It would not be surprising to learn that CO2 levels of 3000 have a big impact on sleep, but at 1000?In fact, increasingly people are starting to think that the negative impacts of CO2 happen at much lower levels than previously thought (starting at around 600). Time will tell, but what complicates the research is that every person is different – so some people seem unaffected by numbers as high as 1500 while others feel terrible.In any event a recent sleep study (that you can find on pubmed) focused on three levels of CO2 exposure 800, 1900 and 3000.  You can find the study here – [Experimental study on sleep quality affected by carbon dioxide concentration] - https://pubmed.ncbi.nlm.nih.gov/32979003/The conclusions of the study (in my opinion anyway) were not surprising in that the researchers found that “Both subjective and physiological results showed that sleep quality decreased significantly with the increase of CO2 concentration.”Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. In fact, increasingly people are starting to think that the negative impacts of CO2 happen at much lower levels than previously thought (starting at around 600). Time will tell, but what complicates the research is that every person is different – so some people seem unaffected by numbers as high as 1500 while others feel terrible.In any event a recent sleep study (that you can find on pubmed) focused on three levels of CO2 exposure 800, 1900 and 3000.  You can find the study here – [Experimental study on sleep quality affected by carbon dioxide concentration] - https://pubmed.ncbi.nlm.nih.gov/32979003/The conclusions of the study (in my opinion anyway) were not surprising in that the researchers found that “Both subjective and physiological results showed that sleep quality decreased significantly with the increase of CO2 concentration.”Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. In any event a recent sleep study (that you can find on pubmed) focused on three levels of CO2 exposure 800, 1900 and 3000.  You can find the study here – [Experimental study on sleep quality affected by carbon dioxide concentration] - https://pubmed.ncbi.nlm.nih.gov/32979003/The conclusions of the study (in my opinion anyway) were not surprising in that the researchers found that “Both subjective and physiological results showed that sleep quality decreased significantly with the increase of CO2 concentration.”Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. The conclusions of the study (in my opinion anyway) were not surprising in that the researchers found that “Both subjective and physiological results showed that sleep quality decreased significantly with the increase of CO2 concentration.”Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. Now the reason why I offer this study is because I think it’s important to firstly be scientific (is there evidence that CO2 exposure when sleeping is likely to matter), but once that has been established then switch to being pragmatic.This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. This is an N=1 kind of thing – all you need to know is how you feel and at what levels of CO2.You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. You tell me that you sleep great at 1200 – then sleep at 1200 if it’s a pain to lower it to 600.  You tell me you sleep terribly at 800 then try to get it down to 525 or whatever the ambient level is in your area.  The science can be a guide – but this is something largely personal – akin to what is the optimal temperature for sleeping (answer being whatever temperature you sleep optimally at – where you are free to define optimally as you like – I personally use time in deep sleep)That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. That being said – based on what you find out about yourself and your environment this will drive your approach to improving your sleep (notice the mission shouldn’t be to narrowly eliminate CO2, but holistically improve sleep – so don’t forget things like humidity, temperature, noise, light).Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. Anyhow – If the level of CO2 in your bedroom is 1200 when you sleep – chances are just cracking a window will do the trick (“natural ventilation”).  If it’s 2000 - 3000 then perhaps you need some kind of exhaust fan that is sized appropriately to your problem (“mechanical ventilation”).  Over 3K and you probably should call in an engineer/HVAC guy and figure out what’s going on in your house – because 3K means that you can safely assume that your whole house likely has poor ventilation – which is not good.This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. This is a long way of saying – measure first.I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. I assume you’ve already done this – but if not get an air quality sensor.So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. So in sum – I would suggest a stepwise approach:
Step 1: Try Natural Ventilation 
Step 2: Try Simple Mechanical Ventilation (fans or turn on the bathroom extractor fan)If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. If these fail then I would have an engineer come in and look at the air flow/HVAC or whatever you have.Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. Finally you mentioned CO2 capture – As a final option (if you have money to burn) perhaps consider DAC (Direct Air Capture)  solutions but it might be cheaper to just move out of the place to be frank.While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. While it is possible to capture CO2 in your bedroom – it’s almost certainly not going to be quiet (unless you use plants) and while from a scientific standpoint removing CO2 from the air is basically a solved problem (in space craft they use Lithium Dioxide canisters – here is a link to one used in an Apollo mission https://airandspace.si.edu/collection-objects/lithium-hydrox... ) current DAC approaches are almost guaranteed to be either labor intensive, expensive or noisy or most likely all three.In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. In terms of plants – I saw a somewhat dismissive comment about plants – all I would say here is that plants vary tremendously in their abilities to capture CO2 (and they have the added benefit of cleaning the air) but plant walls DO work. But . . . again it depends on how big your problem is and how much space you have for something like that -- and it will be labor intensive. YMMV.If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. If you want to know more about the power of plants here’s a link to an interesting article –https://phys.org/news/2013-07-air-hidden-indoor.htmlYou can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. You can find more information about green walls etc here -– https://airguard.ai/insights.Good luck with finding a solution! Breathe well. Good luck with finding a solution! Breathe well. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
41,bazil376,Ask HN: What are your personal red flags when you're interviewing at a company?,https://news.ycombinator.com/item?id=40649536,"The sort of stuff where if an employee interviewer says it you think to yourself “nope, this isn’t the place for me.”

Comments URL: https://news.ycombinator.com/item?id=40649536
Points: 8
# Comments: 13",2024-06-11T18:09:13Z,"* If they are a small company who outsources any step of their interview process to another company. If you're only interviewing for a couple positions—people you will work with every single day—take the time to do it yourself.* If they are a startup that says they are looking for people who are interested in solving exciting problems. For some people, this is going to be an enticement, but based on my experience, what I hear is ""we're going to work you like a dog and pay you in equity, and at the end neither your work nor your equity will matter because we're definitely going to go out of business"". I recognize this is a bias, but it's happened to me a couple times, and I'm in my 40s now and just not having it anymore. Plus, the problems are never that exciting, they're usually ""how to sell a SaaS product that is basically a CRUD app, in a crowded marketplace with lots of competitors"".* If the interview is composed of like 10 rounds of 30 minute interviews, each with different groups in the company, that to me is an indicator that Conway's Law is at the helm of that organization: lots of groups that want input into everything, nobody empowered to make a decision on their own. Plus, it's just not a very good format. Give me a smaller number of hour long sessions where we can actually get into it, rather than racing through pro forma questions. * If they are a startup that says they are looking for people who are interested in solving exciting problems. For some people, this is going to be an enticement, but based on my experience, what I hear is ""we're going to work you like a dog and pay you in equity, and at the end neither your work nor your equity will matter because we're definitely going to go out of business"". I recognize this is a bias, but it's happened to me a couple times, and I'm in my 40s now and just not having it anymore. Plus, the problems are never that exciting, they're usually ""how to sell a SaaS product that is basically a CRUD app, in a crowded marketplace with lots of competitors"".* If the interview is composed of like 10 rounds of 30 minute interviews, each with different groups in the company, that to me is an indicator that Conway's Law is at the helm of that organization: lots of groups that want input into everything, nobody empowered to make a decision on their own. Plus, it's just not a very good format. Give me a smaller number of hour long sessions where we can actually get into it, rather than racing through pro forma questions. * If the interview is composed of like 10 rounds of 30 minute interviews, each with different groups in the company, that to me is an indicator that Conway's Law is at the helm of that organization: lots of groups that want input into everything, nobody empowered to make a decision on their own. Plus, it's just not a very good format. Give me a smaller number of hour long sessions where we can actually get into it, rather than racing through pro forma questions. 
reply

 This and other grandiose language is an immediate red flag. I fully expect the people writing these to be the equivalent of used car salesmen. 
reply

 
reply

 
reply

 
reply

 
reply

 I guess in this day and age, I need to add ""using a chatbot as a stand-in for a real person"". 
reply

 I'm torn on this.  Having dedicated recruiting staff isn't cheap, and I'm not sure a small company could justify this unless they're constantly hiring.  But I've gotten soooo much low-effort, generic recruiting spam from third-party recruiters that, were I running a company, I'd only resort to those sorts of recruiters if I had no choice. 
reply

 I'm specifically thinking of the time I was asked to do a karat technical screen when applying for a position with a small company, and it was a big red flag for me. This is a service that does a remote, screen-share-based technical screening. My view is, you're only going to get a worse outcome with this approach compared to doing the screening yourself: either you're spending a lot of time going through the recording afterward, in which case you might as well have just done it yourself in the first place, or else you are just looking at the feedback by the third party company and deciding based on what they tell you. Since the third-party screener doesn't know you business, product, culture, or tech stack, that seems like a terrible idea.People will often acknowledge that hiring (or not hiring) is the riskiest thing a company can do, and yet take stupid shortcuts to save a little time on it. That's the mentality of companies I want to avoid. People will often acknowledge that hiring (or not hiring) is the riskiest thing a company can do, and yet take stupid shortcuts to save a little time on it. That's the mentality of companies I want to avoid. 
reply

 
reply

 
reply

 
reply

 Maybe it's modern attention spans but I generally push back on analyst briefings/presentations/etc. that get much beyond the 30 minute mark. 
reply

 It quickly became obvious to me that there was a flaw in the method: If the candidate didn't get a chance to answer all the questions, their score would be really low. This is through no fault of their own: they don't know they're on question 4 of 12, and there's only 15 minutes left in the interview. They think they're just answering the question thoroughly and thoughtfully. So, it left me in the position of having to do a ""lightning round"" style assault at the end of the interview, to make sure they at least got a chance to answer everything, and not be torpedoed by the scoring system.The solution to this is likely one of:* ask everyone different questions, or different numbers of questions* ask fewer questions to everyone, and potentially not cover some areas.* timebox each response, and cut them off to say ""time's up, let's move on"".* ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. The solution to this is likely one of:* ask everyone different questions, or different numbers of questions* ask fewer questions to everyone, and potentially not cover some areas.* timebox each response, and cut them off to say ""time's up, let's move on"".* ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. * ask everyone different questions, or different numbers of questions* ask fewer questions to everyone, and potentially not cover some areas.* timebox each response, and cut them off to say ""time's up, let's move on"".* ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. * ask fewer questions to everyone, and potentially not cover some areas.* timebox each response, and cut them off to say ""time's up, let's move on"".* ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. * timebox each response, and cut them off to say ""time's up, let's move on"".* ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. * ignore questions they didn't answer, which means deciding on a candidate you know less about.* increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. * increase the length of the interview.I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. I think I'd be happy asking everyone a different set of questions, but companies are apparently scared about the bias that could introduce (at any rate, we were instructed not to do that). Of the remaining options, the best one seems to be to increase the length of the meeting. 
reply

 
reply

 
reply

 * No remote or hybrid* Unlimited PTO can potentially be a red flag depending on other aspects* Dinners at the office* Business model that is not generating any revenue* Needing 5 references for a junior position and they had to be people I worked with(my team was 3 devs). So, I listed other people I knew. One of them a VP of a tech company, who worked for large tech companies. They called him and grilled him. He told me he did his best but not to take the job and maybe just come work for him.* Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. * Unlimited PTO can potentially be a red flag depending on other aspects* Dinners at the office* Business model that is not generating any revenue* Needing 5 references for a junior position and they had to be people I worked with(my team was 3 devs). So, I listed other people I knew. One of them a VP of a tech company, who worked for large tech companies. They called him and grilled him. He told me he did his best but not to take the job and maybe just come work for him.* Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. * Dinners at the office* Business model that is not generating any revenue* Needing 5 references for a junior position and they had to be people I worked with(my team was 3 devs). So, I listed other people I knew. One of them a VP of a tech company, who worked for large tech companies. They called him and grilled him. He told me he did his best but not to take the job and maybe just come work for him.* Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. * Business model that is not generating any revenue* Needing 5 references for a junior position and they had to be people I worked with(my team was 3 devs). So, I listed other people I knew. One of them a VP of a tech company, who worked for large tech companies. They called him and grilled him. He told me he did his best but not to take the job and maybe just come work for him.* Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. * Needing 5 references for a junior position and they had to be people I worked with(my team was 3 devs). So, I listed other people I knew. One of them a VP of a tech company, who worked for large tech companies. They called him and grilled him. He told me he did his best but not to take the job and maybe just come work for him.* Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. * Another time, I was told my code was wrong and wouldn't compile during the interview, I said ""I am certain it will"", but the dev said unless I change the answer is wrong. I changed it, he was wrong. I got the offer, and did not take the job. 
reply

 The key on this one is to then ask your interviewers how much PTO they usually take per year.  If the answers are below what would make you happy, then that's a problem.At my last company with unlimited PTO, at my height I was taking ~8 weeks per year.  I was highly productive and my boss knew that even losing me for two months out of the year, I was getting much more useful work done than most people who were taking 2-3 weeks.  (At least I hope that was his thought process, and not just that he wasn't paying attention.)> Business model that is not generating any revenueDo you mean profit?  Not generating any revenue either means they're very young and don't have a product yet (fair to not want to work on something like that, but every company has to go through that phase), or that they have a product but are somehow not charging for it at all, and don't have any other monetization strategies like ads (gross) or selling user data (even grosser).But if you limit yourself to only companies that are turning a profit, you're essentially saying that you'll mostly only work for older, established companies, and for the most part nothing that's VC-backed.  (Which, again: fair, but also pretty limiting.) At my last company with unlimited PTO, at my height I was taking ~8 weeks per year.  I was highly productive and my boss knew that even losing me for two months out of the year, I was getting much more useful work done than most people who were taking 2-3 weeks.  (At least I hope that was his thought process, and not just that he wasn't paying attention.)> Business model that is not generating any revenueDo you mean profit?  Not generating any revenue either means they're very young and don't have a product yet (fair to not want to work on something like that, but every company has to go through that phase), or that they have a product but are somehow not charging for it at all, and don't have any other monetization strategies like ads (gross) or selling user data (even grosser).But if you limit yourself to only companies that are turning a profit, you're essentially saying that you'll mostly only work for older, established companies, and for the most part nothing that's VC-backed.  (Which, again: fair, but also pretty limiting.) > Business model that is not generating any revenueDo you mean profit?  Not generating any revenue either means they're very young and don't have a product yet (fair to not want to work on something like that, but every company has to go through that phase), or that they have a product but are somehow not charging for it at all, and don't have any other monetization strategies like ads (gross) or selling user data (even grosser).But if you limit yourself to only companies that are turning a profit, you're essentially saying that you'll mostly only work for older, established companies, and for the most part nothing that's VC-backed.  (Which, again: fair, but also pretty limiting.) Do you mean profit?  Not generating any revenue either means they're very young and don't have a product yet (fair to not want to work on something like that, but every company has to go through that phase), or that they have a product but are somehow not charging for it at all, and don't have any other monetization strategies like ads (gross) or selling user data (even grosser).But if you limit yourself to only companies that are turning a profit, you're essentially saying that you'll mostly only work for older, established companies, and for the most part nothing that's VC-backed.  (Which, again: fair, but also pretty limiting.) But if you limit yourself to only companies that are turning a profit, you're essentially saying that you'll mostly only work for older, established companies, and for the most part nothing that's VC-backed.  (Which, again: fair, but also pretty limiting.) 
reply

 I also disagree with asking interviewers how much vacation they take in an unlimited PTO situation. Instead just ask, “What’s the limit?” Any company that offers an unlimited PTO policy should be able to answer this easily. The only objectively incorrect answer is “There is no limit.” 
reply

 - The interviewer is wearing a suit.- The interviewer asks ""you've worked with [person who now works at our company] before, what do you think about them?"". Bonus points if they insist after I give a diplomatic answer.- ""Why are you using microservices?"" ""Because everyone is doing it""- Not following up. For weeks.- ""Can you send us your high school diploma?""- Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - The interviewer asks ""you've worked with [person who now works at our company] before, what do you think about them?"". Bonus points if they insist after I give a diplomatic answer.- ""Why are you using microservices?"" ""Because everyone is doing it""- Not following up. For weeks.- ""Can you send us your high school diploma?""- Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - ""Why are you using microservices?"" ""Because everyone is doing it""- Not following up. For weeks.- ""Can you send us your high school diploma?""- Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - Not following up. For weeks.- ""Can you send us your high school diploma?""- Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - ""Can you send us your high school diploma?""- Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - Take home assignment with a time limit.- No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - No feedback on take home assignment except ""we didn't like your approach"".- Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - Developers use separate laptops for coding and for internet access.- There are three architects on a single project. - There are three architects on a single project. 
reply

 What's your concern there? (Honest question!) I feel terrible about asking for home assignments but I feel like it's good for people like myself who are terrible about coding live. (I usually have a choice of live or homework.) I put a ""limit"" as a guideline about what kind of quality to expect, usually with language about things not to worry about. I don't expect/want folks to burn a bunch of time on things. 
reply

 
reply

 But a hard limit (you will get the assignment at X o'clock and you will have to turn it in within 3 hours) is just bonkers. It's totally unnecessary and artificial time pressure. Maybe I'm having a bad day and I make a silly mistake that takes time to fix - or the assignment is complicated and it takes me half an hour to even understand it and decide on an approach. Or I could implement the assignment in a maintainable way, but the time pressure requires me to do it in the most hacky way possible. Basically, I don't do my best work under time pressure, so I have no idea why you would impose it on me. In my professional experience, there's very rarely ever been any time pressure like that, so it's not like it measures something important. 
reply

 That said, as I wrote elsewhere, if you can't pull a reasonable version of a work product out of a folder, I may be asking you to create one. I'm not necessarily talking code but I absolutely am looking for some proof that you can do the work if it's not already in the wild. 
reply

 
reply

 If not, why?How would you feel if they insisted on you doing home assignments? How would you feel if they insisted on you doing home assignments? 
reply

 
reply

 Maybe that's fine for you, but maybe not. 
reply

 Both interviews (live and homework) have downsides, referrals don't work for all and hiring blindly isn't an option. I need some kind of signal, some way to choose one of hundreds. I have successfully used contract to hire before, and while that does lower the anxiety on the interview track, many can't consider that option. And that (again) unfairly advantages some.I.. don't really know. Just over here trying my best. The market is broken in many ways. I.. don't really know. Just over here trying my best. The market is broken in many ways. 
reply

 Can you think? Are you curious? Those are hard to distill in an interview and harder still in formulaic interviews. 
reply

 
reply

 There is nothing wrong with wearing a suit, and it may be common in some workplaces/cultures, but in others it can be corollary to a work culture you are not compatible with. 
reply

 When I last interviewed 15 years or so ago, I wore a jacket and tie (though not a suit) when I interviewed in person. I certainly didn't think it was necessary but I'd have been shocked if anyone had considered it to be a ding. 
reply

 
reply

 
reply

 
reply

 Came here to say this, specifically.> - ""Can you send us your high school diploma?""Related: asks questions about that McDonald's job you had in high school, even though you have a master's degree and years of experience in the actual posted job requirements.> - There are three architects on a single project.Related: there are more than three layers of management between you and the Big Boss. Two is better. One is best. Too many layers means that it's probably going to take months to get approval for anything, meanwhile management is giving you the stink-eye for ""not producing"". > - ""Can you send us your high school diploma?""Related: asks questions about that McDonald's job you had in high school, even though you have a master's degree and years of experience in the actual posted job requirements.> - There are three architects on a single project.Related: there are more than three layers of management between you and the Big Boss. Two is better. One is best. Too many layers means that it's probably going to take months to get approval for anything, meanwhile management is giving you the stink-eye for ""not producing"". Related: asks questions about that McDonald's job you had in high school, even though you have a master's degree and years of experience in the actual posted job requirements.> - There are three architects on a single project.Related: there are more than three layers of management between you and the Big Boss. Two is better. One is best. Too many layers means that it's probably going to take months to get approval for anything, meanwhile management is giving you the stink-eye for ""not producing"". > - There are three architects on a single project.Related: there are more than three layers of management between you and the Big Boss. Two is better. One is best. Too many layers means that it's probably going to take months to get approval for anything, meanwhile management is giving you the stink-eye for ""not producing"". Related: there are more than three layers of management between you and the Big Boss. Two is better. One is best. Too many layers means that it's probably going to take months to get approval for anything, meanwhile management is giving you the stink-eye for ""not producing"". 
reply

 * They don't leave time for you to interview them.* They're stuck on looking for particular, specific answers to their questions, even if other answers are valid and workable.* The questions/problems given are one-sided and don't invite discussion.  I really enjoy interviews where the interviewer will kick off a design or architecture question, and then instead of just sitting there, waiting for me to respond, taking notes and moving on, they engage with me on the problem and we discuss it mutually, like peers, with a lot of back and forth.  This might not be a strong ""nope"" signal (some people just aren't very good at interviewing, and often that doesn't reflect all that poorly on the company), but it's definitely concerning.* Being inflexible on compensation mix.  If I think the salary is too low, I might ask for more equity.  If they can't budge on the financial part of compensation, and have fixed/accrued PTO rather than unlimited, I might accept starting out with more vacation days instead.  Answers like ""sorry, this is the standard that everyone gets and it can't be changed"" are big red flags.* If we get to the offer stage and they want me to sign things that I'm uncomfortable signing, and their response is ""oh, it's just standard boilerplate, we'd never enforce something like that"".  Well, I'm not comfortable with selective enforcement, either.  ""Never"" really means ""as long as we don't end up having an axe to grind with you later on"". * They're stuck on looking for particular, specific answers to their questions, even if other answers are valid and workable.* The questions/problems given are one-sided and don't invite discussion.  I really enjoy interviews where the interviewer will kick off a design or architecture question, and then instead of just sitting there, waiting for me to respond, taking notes and moving on, they engage with me on the problem and we discuss it mutually, like peers, with a lot of back and forth.  This might not be a strong ""nope"" signal (some people just aren't very good at interviewing, and often that doesn't reflect all that poorly on the company), but it's definitely concerning.* Being inflexible on compensation mix.  If I think the salary is too low, I might ask for more equity.  If they can't budge on the financial part of compensation, and have fixed/accrued PTO rather than unlimited, I might accept starting out with more vacation days instead.  Answers like ""sorry, this is the standard that everyone gets and it can't be changed"" are big red flags.* If we get to the offer stage and they want me to sign things that I'm uncomfortable signing, and their response is ""oh, it's just standard boilerplate, we'd never enforce something like that"".  Well, I'm not comfortable with selective enforcement, either.  ""Never"" really means ""as long as we don't end up having an axe to grind with you later on"". * The questions/problems given are one-sided and don't invite discussion.  I really enjoy interviews where the interviewer will kick off a design or architecture question, and then instead of just sitting there, waiting for me to respond, taking notes and moving on, they engage with me on the problem and we discuss it mutually, like peers, with a lot of back and forth.  This might not be a strong ""nope"" signal (some people just aren't very good at interviewing, and often that doesn't reflect all that poorly on the company), but it's definitely concerning.* Being inflexible on compensation mix.  If I think the salary is too low, I might ask for more equity.  If they can't budge on the financial part of compensation, and have fixed/accrued PTO rather than unlimited, I might accept starting out with more vacation days instead.  Answers like ""sorry, this is the standard that everyone gets and it can't be changed"" are big red flags.* If we get to the offer stage and they want me to sign things that I'm uncomfortable signing, and their response is ""oh, it's just standard boilerplate, we'd never enforce something like that"".  Well, I'm not comfortable with selective enforcement, either.  ""Never"" really means ""as long as we don't end up having an axe to grind with you later on"". * Being inflexible on compensation mix.  If I think the salary is too low, I might ask for more equity.  If they can't budge on the financial part of compensation, and have fixed/accrued PTO rather than unlimited, I might accept starting out with more vacation days instead.  Answers like ""sorry, this is the standard that everyone gets and it can't be changed"" are big red flags.* If we get to the offer stage and they want me to sign things that I'm uncomfortable signing, and their response is ""oh, it's just standard boilerplate, we'd never enforce something like that"".  Well, I'm not comfortable with selective enforcement, either.  ""Never"" really means ""as long as we don't end up having an axe to grind with you later on"". * If we get to the offer stage and they want me to sign things that I'm uncomfortable signing, and their response is ""oh, it's just standard boilerplate, we'd never enforce something like that"".  Well, I'm not comfortable with selective enforcement, either.  ""Never"" really means ""as long as we don't end up having an axe to grind with you later on"". 
reply

 
reply

 Relying on these kind of signals as a main input is a sign that company didn't think through their hiring process and rather just cargo-culting.But all that are still secondary concerns: good people can make bad process work, bad people tend to ruin the best of processes.So for me the only important ""flags"" are specific people I contact — their attitudes, levels of professionalism, questions they ask, answers they give, their decision process etc.On all steps of the interview process. But all that are still secondary concerns: good people can make bad process work, bad people tend to ruin the best of processes.So for me the only important ""flags"" are specific people I contact — their attitudes, levels of professionalism, questions they ask, answers they give, their decision process etc.On all steps of the interview process. So for me the only important ""flags"" are specific people I contact — their attitudes, levels of professionalism, questions they ask, answers they give, their decision process etc.On all steps of the interview process. On all steps of the interview process. 
reply

 Some people I've worked with in the past scoff at this idea. When I ask them how they would prefer I evaluate technical ability they seem to all meander around the question basically saying you know a good hire when you see one.It's tough to hire good people. I've been in the hiring process for Stanford graduates who could barely code in their take-home. I've also hired candidates who freshly changed their careers later in life and wowed us with their take-home. The 4 hour take-home for us has been wildly helpful in identifying the best hires, but I do get it can feel like a burden to some.I just don't think I could really trust the outcome of leetcode. To me, I feel like anyone can grind leetcode for a couple months and ace a test on it. Does that mean they can create anything of value? Not really. It's tough to hire good people. I've been in the hiring process for Stanford graduates who could barely code in their take-home. I've also hired candidates who freshly changed their careers later in life and wowed us with their take-home. The 4 hour take-home for us has been wildly helpful in identifying the best hires, but I do get it can feel like a burden to some.I just don't think I could really trust the outcome of leetcode. To me, I feel like anyone can grind leetcode for a couple months and ace a test on it. Does that mean they can create anything of value? Not really. I just don't think I could really trust the outcome of leetcode. To me, I feel like anyone can grind leetcode for a couple months and ace a test on it. Does that mean they can create anything of value? Not really. 
reply

 I've been involved in hiring developers, and I get it, you want to make sure. But just because something can be measured that doesn't mean that it's a good idea.I like to suggest a time limited evaluation period instead. I like to suggest a time limited evaluation period instead. 
reply

 That said, when I was a tech industry analyst, a writing sample--maybe a presentation--on a topic (probably of your choice) wasn't really a negotiable requirement and if you couldn't just pull one out of a folder that you could share, you were probably going to have to spend a bunch of time creating. 
reply

 An interviewer looked at me with this vicious, incredulous look when I described my side project in ~2019, which was a weather network built on the sensors inside phones. Guy said, “a weather app, really?! You think that’s a good use of your time in 2019? What makes you think a weather app is useful to make today?”MFer, it was a good idea in 2011 and it’s a good idea today and it’ll be a good idea in 10 years.And it wasn’t just a weather app omg! But he didn’t care, just kept pressing me for like 5 mins why I would ever think making a weather network service was useful. No amount of explaining the complexity or novel recently-developed techniques that made it possible would convince him I wasn’t wasting my time. MFer, it was a good idea in 2011 and it’s a good idea today and it’ll be a good idea in 10 years.And it wasn’t just a weather app omg! But he didn’t care, just kept pressing me for like 5 mins why I would ever think making a weather network service was useful. No amount of explaining the complexity or novel recently-developed techniques that made it possible would convince him I wasn’t wasting my time. And it wasn’t just a weather app omg! But he didn’t care, just kept pressing me for like 5 mins why I would ever think making a weather network service was useful. No amount of explaining the complexity or novel recently-developed techniques that made it possible would convince him I wasn’t wasting my time. 
reply

 
reply

 
reply

 And ignoring that, even if the project was just a toy that isn't particularly useful, that's not really the point.  Developing and building a project/product from the ground up is useful experience, whatever it is.  Demonstrating a valuable skill should never be a prompt for scorn. 
reply

 A heat map heat map, so to speak.Forest fires? Outdoor events on hot days? This is a good idea.And yes, I am a marketing guy. Forest fires? Outdoor events on hot days? This is a good idea.And yes, I am a marketing guy. And yes, I am a marketing guy. 
reply

 
reply

 But also some of these examples could be from companies who understand the bidirectional dynamic.  E.g. if you consider wearing a suit to be a bad sign the company might just as well be glad you don't want to work at a place like that.  Win-win!My contribution to the argument: people who use vapid business buzzwords/ like ""win-win"" except in the rare cases where it really is appropriate. My contribution to the argument: people who use vapid business buzzwords/ like ""win-win"" except in the rare cases where it really is appropriate. 
reply

 To be fair, I think that's a more recent phenomenon, at least when it comes to hiring low- to mid-career rank-and-file (in the past I think this was a consideration mainly only when trying to hire executives or people with specialized talents).  And even then, that only works in a job market that is relatively at equilibrium, or one where applicants are in high demand.  Beggars can't be choosers, as the saying goes. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 2. Interviewer asking template questions and doesn't show any interest
- if interviewer asking those basic questions and don't understand even what the job means, it's a sign that they don't even bother, they are just there to filter you3. Interviewer pushing for the interview ASAP
- it's very likely the position is needed as soon as possible, sometimes this could be something really serious and they are hiring someone to put out the fire, sometimes it's already a crisis and they expect someone to save the day 3. Interviewer pushing for the interview ASAP
- it's very likely the position is needed as soon as possible, sometimes this could be something really serious and they are hiring someone to put out the fire, sometimes it's already a crisis and they expect someone to save the day 
reply

 Things that I think indicate a poor fit for me include places where it's expected that people work more than 40 hours per week (I have no problem doing that in unusual circumstances, but if it's part of routine practice, that's a problem); where it's expected that you'll take part in extra-curricular activities; where they take agile methodologies too seriously; where there's too much social stratification in the workplace; and such.Concrete red flags include using leetcode tests, using personality tests, absurd interviewing hoops (too many interview rounds, too many days to complete the interviewing process, etc.).Not being interviewed by (or at least meeting) the members of the team I'd be working with is a bad sign, as is the interviewer not knowing the position I'm being considered for. The interviewer not answering my questions (or being vague or evasive in their answer).I pay attention to the other devs I see. If most of them look unhappy or stressed, that's an enormous red flag. If in-person, most of the desks in use being pretty bare (little in the way of knick-knacks, personal photos, funny or interesting things hung on the cube wall, etc.) is bad. A lack of enthusiasm about what the devs are working on is bad.Immediate showstoppers are having an open office plan or hot-desking.Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. Concrete red flags include using leetcode tests, using personality tests, absurd interviewing hoops (too many interview rounds, too many days to complete the interviewing process, etc.).Not being interviewed by (or at least meeting) the members of the team I'd be working with is a bad sign, as is the interviewer not knowing the position I'm being considered for. The interviewer not answering my questions (or being vague or evasive in their answer).I pay attention to the other devs I see. If most of them look unhappy or stressed, that's an enormous red flag. If in-person, most of the desks in use being pretty bare (little in the way of knick-knacks, personal photos, funny or interesting things hung on the cube wall, etc.) is bad. A lack of enthusiasm about what the devs are working on is bad.Immediate showstoppers are having an open office plan or hot-desking.Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. Not being interviewed by (or at least meeting) the members of the team I'd be working with is a bad sign, as is the interviewer not knowing the position I'm being considered for. The interviewer not answering my questions (or being vague or evasive in their answer).I pay attention to the other devs I see. If most of them look unhappy or stressed, that's an enormous red flag. If in-person, most of the desks in use being pretty bare (little in the way of knick-knacks, personal photos, funny or interesting things hung on the cube wall, etc.) is bad. A lack of enthusiasm about what the devs are working on is bad.Immediate showstoppers are having an open office plan or hot-desking.Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. I pay attention to the other devs I see. If most of them look unhappy or stressed, that's an enormous red flag. If in-person, most of the desks in use being pretty bare (little in the way of knick-knacks, personal photos, funny or interesting things hung on the cube wall, etc.) is bad. A lack of enthusiasm about what the devs are working on is bad.Immediate showstoppers are having an open office plan or hot-desking.Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. Immediate showstoppers are having an open office plan or hot-desking.Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. Having too fancy of an office is a bad sign, but more of a yellow flag than red.I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. I'm sure that I've omitted a bunch of things here. I don't have a literal list in my mind. What I tend to do complete the interview process and then put it out of my mind until the next day. Then I go through my notes and examine to totality of what I observed, both things that pleased me and things that didn't. 
reply

 Yes. Not just because it's an unpleasant environment (though it is), but it's a sign of major management cluelessness. ""Wait: you're hiring me to think, and putting me in an environment that makes it harder for me to think? Um...okay.""The other side of the coin is that there needs to be somewhere to hang out when you do* want company. It doesn't have to be one of these places where every floor has its own executive chef. A comfortable break room with a selection of hot and cold beverages is fine. Snacks aren't necessary if there are food options nearby. The other side of the coin is that there needs to be somewhere to hang out when you do* want company. It doesn't have to be one of these places where every floor has its own executive chef. A comfortable break room with a selection of hot and cold beverages is fine. Snacks aren't necessary if there are food options nearby. 
reply

 
reply

 Engineering leadership doesn't understand (or care about) the business side.Trying to shoehorn you into a role obviously you're overqualified for.A focus more on time spent and dedication rather than achievements and outcomes.No clear business model. Maybe it isn't an issue today, but for 99% of businesses it will be an issue soon.A pattern of getting interns or juniors to do an initial chunk of work, and then getting seniors to clean up after them, rather than letting seniors lay a foundation and the juniors/interns filling in the gaps. Trying to shoehorn you into a role obviously you're overqualified for.A focus more on time spent and dedication rather than achievements and outcomes.No clear business model. Maybe it isn't an issue today, but for 99% of businesses it will be an issue soon.A pattern of getting interns or juniors to do an initial chunk of work, and then getting seniors to clean up after them, rather than letting seniors lay a foundation and the juniors/interns filling in the gaps. A focus more on time spent and dedication rather than achievements and outcomes.No clear business model. Maybe it isn't an issue today, but for 99% of businesses it will be an issue soon.A pattern of getting interns or juniors to do an initial chunk of work, and then getting seniors to clean up after them, rather than letting seniors lay a foundation and the juniors/interns filling in the gaps. No clear business model. Maybe it isn't an issue today, but for 99% of businesses it will be an issue soon.A pattern of getting interns or juniors to do an initial chunk of work, and then getting seniors to clean up after them, rather than letting seniors lay a foundation and the juniors/interns filling in the gaps. A pattern of getting interns or juniors to do an initial chunk of work, and then getting seniors to clean up after them, rather than letting seniors lay a foundation and the juniors/interns filling in the gaps. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 Specific red flag signals:1. Dominated by Windows2. Too many people in formals3. Nobody wears badges (and other indicators of a lax security policy)4. Old/worn out office furniture5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 1. Dominated by Windows2. Too many people in formals3. Nobody wears badges (and other indicators of a lax security policy)4. Old/worn out office furniture5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 2. Too many people in formals3. Nobody wears badges (and other indicators of a lax security policy)4. Old/worn out office furniture5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 3. Nobody wears badges (and other indicators of a lax security policy)4. Old/worn out office furniture5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 4. Old/worn out office furniture5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 5. Low resolution displays6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 6. Old laptops7. No evidence of people collaborating or chatting at a microkitchen etc. 7. No evidence of people collaborating or chatting at a microkitchen etc. 
reply

 Depending on the size and age of the company, most of those hint towards a product-focused organization that often cultures careful, reliable engineers. It might not be fun or flashy, but there's good odds that a place like that knowns how to build their product and does a consistent job of it. They're often a great place for senior engineers to settle down and focus on low-drama productivity and for junior engineers to witness durable best practices in action. 
reply

 
reply

 Salesmen have Mac Pros or fully decked-out gaming rigs, programmers are still on Pentiums. 
reply

 But seriously, we'd fail 1, 3 (we've never had anything like badges to wear), 4 (some of it is old, not too much us worn out though - chairs get replaced, desks are pushing 25 or more now), 5 (every one, including receptionist has multiple monitors but they're standard 300dpi), 6 (depends what you mean by old), probably 7 as well as most folk are remote now.I guess we're not for you.On the up side we dress very informally. I guess we're not for you.On the up side we dress very informally. On the up side we dress very informally. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 I wasn't offered the job, but I regret nothing. 
reply

 I've done plenty of code tests in the past, these days it would take A LOT to motivate me.Usually I just say thanks, but no thanks if they insist on testing me. Usually I just say thanks, but no thanks if they insist on testing me. 
reply

 
reply

 I know I probably would, so I'm curious. 
reply

 Then again, not completely sure what the GP means about ""screening stage""; if a take-home assignment is given before any kind of substantive interaction between the company and me, that'd be a definite red flag.  I'm not going to spend 45 minutes doing your resume screening for you. 
reply

 
reply

 The thing is that any kind of test is going to signal a lack of trust, and that's not a great way to start. 
reply

 
reply

 * Live coding during an interview sucks.  I'm not convinced interviewers actually learn all that much useful during those, and I know a lot of people who perform well on the job but choke up during interviews when there's a live coding component.* It's not like there isn't precedent for this sort of thing outside tech.  For example, marketing/sales positions will often require the interviewee to prep a mock presentation specifically for the interview.  (That is, not something generic they can use for multiple interviews.)I get that people have commitments outside of work, and that the ideal situation is that you're interviewing for a job while you already have one (so interviewing work is going to be on top of all your existing responsibilities).  But at the same time, take-home assignments in tech are becoming more common, and refusing to do them is going to limit your options.  And I don't think the usual ""well I probably wouldn't enjoy working at a company that does $THING during their interviews"" really applies here. * It's not like there isn't precedent for this sort of thing outside tech.  For example, marketing/sales positions will often require the interviewee to prep a mock presentation specifically for the interview.  (That is, not something generic they can use for multiple interviews.)I get that people have commitments outside of work, and that the ideal situation is that you're interviewing for a job while you already have one (so interviewing work is going to be on top of all your existing responsibilities).  But at the same time, take-home assignments in tech are becoming more common, and refusing to do them is going to limit your options.  And I don't think the usual ""well I probably wouldn't enjoy working at a company that does $THING during their interviews"" really applies here. I get that people have commitments outside of work, and that the ideal situation is that you're interviewing for a job while you already have one (so interviewing work is going to be on top of all your existing responsibilities).  But at the same time, take-home assignments in tech are becoming more common, and refusing to do them is going to limit your options.  And I don't think the usual ""well I probably wouldn't enjoy working at a company that does $THING during their interviews"" really applies here. 
reply

 2. I once had a technical interview where I was given a Jupyter notebook that set up a problem and then asked me several questions about it. The interviewer was on the other side of the desk watching me on a separate monitor. The interview itself was 1 hour long but he wouldn't stop talking for more than a minute or so. I didn't have time to read and understand the problem, nevermind design and execute a solution. Instead, he kept asking me questions, breaking my concentration... just a total nightmare.3. Keeping me locked in a room all day. I've interviewed at several places over the years where I'd go, sit in a meeting room, and have a day's worth of interviews. Sure, I got a brief tour of the office, but even my lunch I'd eat in that meeting room. If I can't talk with employees in their natural habitat then how am I supposed to get a real feel for the office culture?4. Interviewers who don't seem to know why they're interviewing you. I've had this happen many times. They don't know what the position is for, they never work with the person in that position, why bother?5. Your potential boss can't give you a reasonable description of the work you'll do. Huge red flag.6. Too many detailed questions about work I do at my current job that I obviously cannot get in to. If they can't respect my inability to tell them company secrets then there's a problem. 3. Keeping me locked in a room all day. I've interviewed at several places over the years where I'd go, sit in a meeting room, and have a day's worth of interviews. Sure, I got a brief tour of the office, but even my lunch I'd eat in that meeting room. If I can't talk with employees in their natural habitat then how am I supposed to get a real feel for the office culture?4. Interviewers who don't seem to know why they're interviewing you. I've had this happen many times. They don't know what the position is for, they never work with the person in that position, why bother?5. Your potential boss can't give you a reasonable description of the work you'll do. Huge red flag.6. Too many detailed questions about work I do at my current job that I obviously cannot get in to. If they can't respect my inability to tell them company secrets then there's a problem. 4. Interviewers who don't seem to know why they're interviewing you. I've had this happen many times. They don't know what the position is for, they never work with the person in that position, why bother?5. Your potential boss can't give you a reasonable description of the work you'll do. Huge red flag.6. Too many detailed questions about work I do at my current job that I obviously cannot get in to. If they can't respect my inability to tell them company secrets then there's a problem. 5. Your potential boss can't give you a reasonable description of the work you'll do. Huge red flag.6. Too many detailed questions about work I do at my current job that I obviously cannot get in to. If they can't respect my inability to tell them company secrets then there's a problem. 6. Too many detailed questions about work I do at my current job that I obviously cannot get in to. If they can't respect my inability to tell them company secrets then there's a problem. 
reply

 These are all signs of an immature data science function- which predicts working on ill posed problems and a problematic business justification. If the people already there are mediocre it’s not a great place to join. A strong sign of that is if the interviewers don’t know enough to construct thoughtful questions about real, non trivial, issues from their work. There are too many people in data science who, sadly, are at this level. 
reply

 My current role has a somewhat misleading title, but to offset that I make sure I really highlight my experience and the projects I've worked on. If an interviewer starts asking me about my title and why I'm applying for something more 'generic' I immediately know they didn't read my resume or pay attention and I'm out.Years ago I walked out of an all day interview, maybe 2 hours in, because one of the engineers was on his phone the entire time, seemingly just scrolling and not paying attention. Years ago I walked out of an all day interview, maybe 2 hours in, because one of the engineers was on his phone the entire time, seemingly just scrolling and not paying attention. 
reply

 
reply

 
reply

 - how many hours a week does a typical dev work?- what source control do you use- what ticket system do you use- how long does a typical, at-desk incremental dev build take?- do you have automated builds (CICD, Jenkins, pipelines, nightly build system, etc)? - what source control do you use- what ticket system do you use- how long does a typical, at-desk incremental dev build take?- do you have automated builds (CICD, Jenkins, pipelines, nightly build system, etc)? - what ticket system do you use- how long does a typical, at-desk incremental dev build take?- do you have automated builds (CICD, Jenkins, pipelines, nightly build system, etc)? - how long does a typical, at-desk incremental dev build take?- do you have automated builds (CICD, Jenkins, pipelines, nightly build system, etc)? - do you have automated builds (CICD, Jenkins, pipelines, nightly build system, etc)? 
reply

 
reply

 
reply

 
reply

 In too many cases the top candidates are completely omitted from scoring let alone for an interview.Not everyone has an unbiased process, it's common. Not everyone has an unbiased process, it's common. 
reply

 
reply

 When one or more people on the interview panel behaves extremely unprofessionally. ie, ridicules the interviewee, or makes inappropriately offensive comments.When the interviewer decides to give an interviewee they particularly like a tour of the premise and introduce them to other staff before they've even offered the person a job.When there are heaps of relatives, or best/close friends within the management structure of the company. When the interviewer decides to give an interviewee they particularly like a tour of the premise and introduce them to other staff before they've even offered the person a job.When there are heaps of relatives, or best/close friends within the management structure of the company. When there are heaps of relatives, or best/close friends within the management structure of the company. 
reply

 
reply

 
reply

 
reply

 - not offering full-remote for all jobs actually doable from remote;- trying to start selling itself as a super-duper-enterprise naming vague roles with unclear responsibility and so on;- choosing external recruiters who have no clue about real opened position so they just run HR games and absurd questions;- talking about proprietary software they use, requirements like ""you will use this IDE"", finding normal using a laptop for desk-fixed works;- not possessing anything themselves living on someone else iron and even worse develop on someone else services. - trying to start selling itself as a super-duper-enterprise naming vague roles with unclear responsibility and so on;- choosing external recruiters who have no clue about real opened position so they just run HR games and absurd questions;- talking about proprietary software they use, requirements like ""you will use this IDE"", finding normal using a laptop for desk-fixed works;- not possessing anything themselves living on someone else iron and even worse develop on someone else services. - choosing external recruiters who have no clue about real opened position so they just run HR games and absurd questions;- talking about proprietary software they use, requirements like ""you will use this IDE"", finding normal using a laptop for desk-fixed works;- not possessing anything themselves living on someone else iron and even worse develop on someone else services. - talking about proprietary software they use, requirements like ""you will use this IDE"", finding normal using a laptop for desk-fixed works;- not possessing anything themselves living on someone else iron and even worse develop on someone else services. - not possessing anything themselves living on someone else iron and even worse develop on someone else services. 
reply

 
reply

 This was for an open ended coding test.  I just wanted to know if they wanted to see if I could work fast, or produce a better structured solution.I should have left right then.  The interview did not get any better.  At the end they asked repeatedly how I would deal with problem employees. I had just about figured they were problem employers by then. I should have left right then.  The interview did not get any better.  At the end they asked repeatedly how I would deal with problem employees. I had just about figured they were problem employers by then. 
reply

 
reply

 Or will interviewers actually be sending me homework for an interview where I have to code something when the job is a SOC analyst or incident response? 
reply

 
reply

 
reply

 Unwillingness to compromise.Unwillingness to evolve.Lack of empathy.Lack of trust.Lack of flexibility.A fetish for telling people what to do. Unwillingness to evolve.Lack of empathy.Lack of trust.Lack of flexibility.A fetish for telling people what to do. Lack of empathy.Lack of trust.Lack of flexibility.A fetish for telling people what to do. Lack of trust.Lack of flexibility.A fetish for telling people what to do. Lack of flexibility.A fetish for telling people what to do. A fetish for telling people what to do. 
reply

 
reply

 But too much of that and I'm out. 
reply

 
reply

 
reply

 
reply

 
reply

 Another time went for a code screen that said we could use any language on our own machine. When I go there the hiring manager handed me a Mac and told me I'd be using Angular to code a given problem. That's great. I had no experience with Macs, no experience with WebStorm, no experience with Angular. What a waste of time. I asked why he even brought me in if I didn't have any of this listed on my resume and the recruiter told me it'd my choice of machine and language? His response was that maybe I had the experience but just didn't list it on my resume. Fuck you too. 
reply

 Again, not sure if that’s what was happening in your case, and giving someone a different OS would only hamper them if they were unfamiliar with the environment. Personally I like the challenge of learning a new framework, so long as that’s the intention of the interviewer. 
reply

 I once got a whiteboarding problem and proposed a solution, and the interviewer gave me a flat out ""that's not the one I had in mind"". I'd already asked clarifying questions and thought my proposal was reasonable in light of the constraints as I understood them. After a few minutes of trying to play mind reader, I asked, ""Is there some constraint or requirement I'm missing?"" and they said no. I retrospect, I should have walked out on that one, too. I still have no idea what they wanted from me. Communication goes both ways. 
reply

 Did a round of interviews for staff engineer at Catawiki that felt more like trying to guess the right words than actual problem solving.But I get it. People get dragged into the process, usually without compensation. And it's much easier and safer to reject than to accept.The tragedy is that everyone knows that the approach isn't working, I haven't met a single person who thinks SWE hiring is working; but we still seem unable do fix it. But I get it. People get dragged into the process, usually without compensation. And it's much easier and safer to reject than to accept.The tragedy is that everyone knows that the approach isn't working, I haven't met a single person who thinks SWE hiring is working; but we still seem unable do fix it. The tragedy is that everyone knows that the approach isn't working, I haven't met a single person who thinks SWE hiring is working; but we still seem unable do fix it. 
reply

 
reply

 
reply

 Oh jeez.  The impatient, combative side of me would want to respond, ""so you're not open to other people's ideas, or open to the possibility that your approaches may not be the only good possibilities?""A more diplomatic response might be, ""can you tell me what you think about my approach is unworkable or at least suboptimal?""  I think your question about a possible missing constraint/requirement was a good one.  Actually, I think after asking that question and getting no reasonable responses, my original combative response seems a bit more appropriate... A more diplomatic response might be, ""can you tell me what you think about my approach is unworkable or at least suboptimal?""  I think your question about a possible missing constraint/requirement was a good one.  Actually, I think after asking that question and getting no reasonable responses, my original combative response seems a bit more appropriate... 
reply

 - Any job ad for a FOO Dev, where FOO is a language. They're hiring code monkeys.- A panel of interviewers suggests the company doesn't know how to interview.- ""Gotcha"" trivia questions.- Giving me a take-home assignment that takes much longer than their estimated time to complete . . . then asking me how long it took.- Telling me what IDE to use (even if it's one I would prefer).- Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - A panel of interviewers suggests the company doesn't know how to interview.- ""Gotcha"" trivia questions.- Giving me a take-home assignment that takes much longer than their estimated time to complete . . . then asking me how long it took.- Telling me what IDE to use (even if it's one I would prefer).- Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - ""Gotcha"" trivia questions.- Giving me a take-home assignment that takes much longer than their estimated time to complete . . . then asking me how long it took.- Telling me what IDE to use (even if it's one I would prefer).- Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Giving me a take-home assignment that takes much longer than their estimated time to complete . . . then asking me how long it took.- Telling me what IDE to use (even if it's one I would prefer).- Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Telling me what IDE to use (even if it's one I would prefer).- Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Interviewer is another dev and is unwilling to tell me what they wish were different.- Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Whiteboard coding where interviewer says nothing. Maybe they stare at me. Maybe they do work. Either way . . . no.- Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Any question where the goal is guessing ""the correct way to answer.""- Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Hiring managers who clearly want to hand off responsibilities instead of just delegate. Seems more common in small startups.- Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. - Interviewers are late to call or join the video conference. Especially if they're at least 5 minutes late. 
reply

 
reply

 
reply

 - Have you ever had to work on the weekend or well beyond 5pm outside of your own personal interest/initiative?- Are we required to be on-callIf there's any hint of ""nah, we don't really write tests because we just need to ship stuff, y'know"" - Are we required to be on-callIf there's any hint of ""nah, we don't really write tests because we just need to ship stuff, y'know"" If there's any hint of ""nah, we don't really write tests because we just need to ship stuff, y'know"" 
reply

 I realize that probably doesn't describe a lot of people in which case it's probably the right job for them. 
reply

"
42,tobwen,Ask HN: How to make `screen` behave like a native shell?,https://news.ycombinator.com/item?id=40604404,"I've been using `GNU screen` as my primary terminal multiplexer for about 15 years. It allows me to run different sessions in the background and resume them. Although I'm aware of other tools like `tmux`, my muscle memory has kept me loyal to `screen`.One thi…",2024-06-07T01:25:30Z,"One thing that always frustrates me is that a screen environment doesn't feel like a normal shell session. For example, when I log in via SSH into Bash, I can scroll back almost infinitely, all shortcuts (like CTRL + arrow keys) are available, and there are no visual or audible bells.Does anyone know a way to configure `screen` or `tmux` to behave exactly like a native shell session? Or is there another alternative that I'm not aware of? Does anyone know a way to configure `screen` or `tmux` to behave exactly like a native shell session? Or is there another alternative that I'm not aware of? 
reply

 This brings all the niceties of an iTerm shell session, but still allow you to detach from tmux and reattach at a later point whilst still using the native iTerm features. Almost indefinite scrollback, as you mentioned. Also good terminal search facilities, and features to filter text in the session to display only lines that contain a keyword. Instant Replay lets you drag a slider and replay old TUI output that may have been erased from the screen [2]. And the configurable hotkeys are useful for pane splitting, which I find to be more convenient than the leader-plus-command of tmux. I find the toolbelt window useful, and sometimes define snippets of long cumbersome commands where it isn't possible or maybe appropriate to define aliases on a remote host. For local tmux sessions, I like some of the features of the iTerm shell extensions, like jumping back to the points of previous commands entered, which helps navigate through large amounts of console output. Or the directory name picker based on frecency, which is useful for adding directory names when composing long commands or to jump to a directory when using Zsh (which lets you omit the 'cd' command).[1] https://github.com/tmux/tmux/wiki/Control-Mode[2] https://iterm2.com/features.html [1] https://github.com/tmux/tmux/wiki/Control-Mode[2] https://iterm2.com/features.html [2] https://iterm2.com/features.html 
reply

 How to make 'screen' behave.Forget about the computer's underlying constructions.programming languages are symbol based time waste.In order to do something with programming, you need to know underlying api which talks to hardware resource. There are three hardware resource. display, space, time. Its monitor, cpu, and storage. but lets stick to fundamentals.When trying to build using programming language brain effort gets consumed for obselete APIs. Reducing the underlying system, it boils down to display, space, time.Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? Forget about the computer's underlying constructions.programming languages are symbol based time waste.In order to do something with programming, you need to know underlying api which talks to hardware resource. There are three hardware resource. display, space, time. Its monitor, cpu, and storage. but lets stick to fundamentals.When trying to build using programming language brain effort gets consumed for obselete APIs. Reducing the underlying system, it boils down to display, space, time.Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? programming languages are symbol based time waste.In order to do something with programming, you need to know underlying api which talks to hardware resource. There are three hardware resource. display, space, time. Its monitor, cpu, and storage. but lets stick to fundamentals.When trying to build using programming language brain effort gets consumed for obselete APIs. Reducing the underlying system, it boils down to display, space, time.Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? In order to do something with programming, you need to know underlying api which talks to hardware resource. There are three hardware resource. display, space, time. Its monitor, cpu, and storage. but lets stick to fundamentals.When trying to build using programming language brain effort gets consumed for obselete APIs. Reducing the underlying system, it boils down to display, space, time.Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? When trying to build using programming language brain effort gets consumed for obselete APIs. Reducing the underlying system, it boils down to display, space, time.Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? Display is the fixed size in hardware, so scratch it.Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? Whats left? space and time. Keep a dot on space, move your position forward. What happens? the point of dot is backward. When it comes to time, there are two point of observation. One within the space and another focusing on space.Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? Everypoint can be a point of reference to another point.A point has a reference point, what if the reference point of the moving point also moves? A point has a reference point, what if the reference point of the moving point also moves? 
reply

 You can also disable bell: see https://stackoverflow.com/questions/23813869/how-do-i-comple... 
reply

 
reply

 
reply

"
43,Hammerhead12321,Ask HN: What skillsets/stacks will keep me employable over the next 5-10 years?,https://news.ycombinator.com/item?id=40682173,"I’ve noticed that my particular “niche” within software development has, especially over the past two years, become extremely saturated. At the same time, the actual market need for this niche seems to be slowly decreasing.I’m a senior dev and can still get g…",2024-06-14T16:22:14Z,"I’m a senior dev and can still get gigs, but nowhere nearly as easily as I could 5 years ago, despite having 5 more years of experience.I’m wondering if there are a few particular tech stacks/technologies that would be worth focusing on and becoming an expert in to stay employable over the next 5-10 years.Yes, I know it’s good to be a generalist, and I am, but employers seem to prefer to hire “experts” in particular domains.Specific answers would be appreciated. “Focus on AI” and the like aren’t particularly helpful, though of course I appreciate the input! I’m wondering if there are a few particular tech stacks/technologies that would be worth focusing on and becoming an expert in to stay employable over the next 5-10 years.Yes, I know it’s good to be a generalist, and I am, but employers seem to prefer to hire “experts” in particular domains.Specific answers would be appreciated. “Focus on AI” and the like aren’t particularly helpful, though of course I appreciate the input! Yes, I know it’s good to be a generalist, and I am, but employers seem to prefer to hire “experts” in particular domains.Specific answers would be appreciated. “Focus on AI” and the like aren’t particularly helpful, though of course I appreciate the input! Specific answers would be appreciated. “Focus on AI” and the like aren’t particularly helpful, though of course I appreciate the input! - Find a domain or two you have an interest (better yet, a passion) in, that isn't IT, and pair your IT skills to it. My day job is (more generally) emergency management, so I pair my geospatial analysis and programming skills to solve problems within the emergency management domain.I don't think AI will completely take over, simply because of [1], though it will somewhat remove or reduce the need for 'generalists', where much of the workload is handled by AI, at the prompting of a software developer or engineer, much like how many farm hands were replaced by farming machines when they became a thing. That said, I think we're still half a century off AI truly replacing most software developers.Humans will still be required to 'know what 'good' looks like' and ensure that whatever slop AI spits out actually fixes the problem. This is where domain-specific knowledge is incredibly valuable. See how you can apply your skills to make your interest or passion field better, using AI to your advantage, by exploiting your technical skills with domain-specific knowledge.Most people think of firefighters as just that - putting out fires. That's only partly true though. We use a shiny, and fast, red toolbox on wheels to solve the problems of others, whether that be (actual) firefighting, rescue, first aid, replacing smoke alarm batteries, engaging with the community, even fixing things. Firefighters now days are closer to problem-solvers than they are firefighters. We just happen to respond to emergency calls too.Be the problem solver in your domain. AI, in my opinion, won't be able to truly problem solve, or think outside the box, for many decades to come.[1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... I don't think AI will completely take over, simply because of [1], though it will somewhat remove or reduce the need for 'generalists', where much of the workload is handled by AI, at the prompting of a software developer or engineer, much like how many farm hands were replaced by farming machines when they became a thing. That said, I think we're still half a century off AI truly replacing most software developers.Humans will still be required to 'know what 'good' looks like' and ensure that whatever slop AI spits out actually fixes the problem. This is where domain-specific knowledge is incredibly valuable. See how you can apply your skills to make your interest or passion field better, using AI to your advantage, by exploiting your technical skills with domain-specific knowledge.Most people think of firefighters as just that - putting out fires. That's only partly true though. We use a shiny, and fast, red toolbox on wheels to solve the problems of others, whether that be (actual) firefighting, rescue, first aid, replacing smoke alarm batteries, engaging with the community, even fixing things. Firefighters now days are closer to problem-solvers than they are firefighters. We just happen to respond to emergency calls too.Be the problem solver in your domain. AI, in my opinion, won't be able to truly problem solve, or think outside the box, for many decades to come.[1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... Humans will still be required to 'know what 'good' looks like' and ensure that whatever slop AI spits out actually fixes the problem. This is where domain-specific knowledge is incredibly valuable. See how you can apply your skills to make your interest or passion field better, using AI to your advantage, by exploiting your technical skills with domain-specific knowledge.Most people think of firefighters as just that - putting out fires. That's only partly true though. We use a shiny, and fast, red toolbox on wheels to solve the problems of others, whether that be (actual) firefighting, rescue, first aid, replacing smoke alarm batteries, engaging with the community, even fixing things. Firefighters now days are closer to problem-solvers than they are firefighters. We just happen to respond to emergency calls too.Be the problem solver in your domain. AI, in my opinion, won't be able to truly problem solve, or think outside the box, for many decades to come.[1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... Most people think of firefighters as just that - putting out fires. That's only partly true though. We use a shiny, and fast, red toolbox on wheels to solve the problems of others, whether that be (actual) firefighting, rescue, first aid, replacing smoke alarm batteries, engaging with the community, even fixing things. Firefighters now days are closer to problem-solvers than they are firefighters. We just happen to respond to emergency calls too.Be the problem solver in your domain. AI, in my opinion, won't be able to truly problem solve, or think outside the box, for many decades to come.[1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... Be the problem solver in your domain. AI, in my opinion, won't be able to truly problem solve, or think outside the box, for many decades to come.[1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... [1] https://www.commitstrip.com/en/2016/08/25/a-very-comprehensi... 
reply

 I often joke that if a UFO landed in the middle of I-40 outside of Raleigh, the first agency dispatched would be the Fire Department. We're[1] sort of the fallback ""do it all"" agency that goes to the crazy shit nobody else knows how to handle.Grass fire? Send the fire department. Car crashed into a building? Send the fire department? Person locked in the police station / courthouse after hours? Send the fire department (taken from an actual incident I overheard last night while monitoring Fire/EMS dispatch in my area). Cow trapped in a ravine? Send the fire department. Apartment flooding? Send the fire department. Mysterious smell in the area? Send the fire department. UFOs? Send the fire department. And so on and on and on...""All hazards"" really is the name of the game these days.[1]: I say ""we"" out of habit, even though I'm not on an active roster anywhere at the moment. I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day. Grass fire? Send the fire department. Car crashed into a building? Send the fire department? Person locked in the police station / courthouse after hours? Send the fire department (taken from an actual incident I overheard last night while monitoring Fire/EMS dispatch in my area). Cow trapped in a ravine? Send the fire department. Apartment flooding? Send the fire department. Mysterious smell in the area? Send the fire department. UFOs? Send the fire department. And so on and on and on...""All hazards"" really is the name of the game these days.[1]: I say ""we"" out of habit, even though I'm not on an active roster anywhere at the moment. I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day. ""All hazards"" really is the name of the game these days.[1]: I say ""we"" out of habit, even though I'm not on an active roster anywhere at the moment. I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day. [1]: I say ""we"" out of habit, even though I'm not on an active roster anywhere at the moment. I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day. 
reply

 Absolutely! One of the more recent calls I attended was a 'residential [smoke] alarm sounding', with no further details. Call turned out to be a woman desperate to turn off the water to the house, after a hot water pipe had burst in the kitchen with no other way to turn it off. Not sure how dispatch got 'smoke alarm' from 'hot water pipe', though panicked people tend to do and say bizarre things under obtuse acute stress.Some digging (the mains tap was burried under a decade's worth of pine needles) and one multi-tool later, we had the water turned off.> I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day.The 'job' is very much Hotel California.Whilst I'm 'career' in my day job (which only turns operational in an incident management sense during the 'on' season), I still regularly volunteer with my local brigade when I can, which isn't much these days unfortunately. We've always said family and work come first, though even an hour or two here and there definitely help, even if its only with odd jobs around the station. It also helps keep one's skills sharp, as monotonous as maintaining BA sets can be, it helps keep the muscle memory exercised. Some digging (the mains tap was burried under a decade's worth of pine needles) and one multi-tool later, we had the water turned off.> I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day.The 'job' is very much Hotel California.Whilst I'm 'career' in my day job (which only turns operational in an incident management sense during the 'on' season), I still regularly volunteer with my local brigade when I can, which isn't much these days unfortunately. We've always said family and work come first, though even an hour or two here and there definitely help, even if its only with odd jobs around the station. It also helps keep one's skills sharp, as monotonous as maintaining BA sets can be, it helps keep the muscle memory exercised. > I mostly gave up firefighting due to the demands of my day job, but I still consider myself a firefighter at heart and may well join up with a volunteer department again some day.The 'job' is very much Hotel California.Whilst I'm 'career' in my day job (which only turns operational in an incident management sense during the 'on' season), I still regularly volunteer with my local brigade when I can, which isn't much these days unfortunately. We've always said family and work come first, though even an hour or two here and there definitely help, even if its only with odd jobs around the station. It also helps keep one's skills sharp, as monotonous as maintaining BA sets can be, it helps keep the muscle memory exercised. The 'job' is very much Hotel California.Whilst I'm 'career' in my day job (which only turns operational in an incident management sense during the 'on' season), I still regularly volunteer with my local brigade when I can, which isn't much these days unfortunately. We've always said family and work come first, though even an hour or two here and there definitely help, even if its only with odd jobs around the station. It also helps keep one's skills sharp, as monotonous as maintaining BA sets can be, it helps keep the muscle memory exercised. Whilst I'm 'career' in my day job (which only turns operational in an incident management sense during the 'on' season), I still regularly volunteer with my local brigade when I can, which isn't much these days unfortunately. We've always said family and work come first, though even an hour or two here and there definitely help, even if its only with odd jobs around the station. It also helps keep one's skills sharp, as monotonous as maintaining BA sets can be, it helps keep the muscle memory exercised. 
reply

 
reply

 If you can, and you're willing and able, consider volunteering for your local volunteer department if there's one near by.You don't need to be the fittest or the strongest (though some fitness is essential), it's much more important these days for a fire service be reflective of the community it serves[1] (NSFW minor adult themes, headphones recommended).That means more women firefighters, firefighters of colour, short firefighters, tall firefighters, tiny firefighters, stocky firefighters, LGBTQ+ firefighters, religious firefighters, English-second-language firefighters, even techy firefighters, help reflect the community in which they serve.(And I include our paramedic/EMT brothers and sisters in the word 'firefighter' here, who are just as vital as us).All of those skills and life experiences are valuable in the fire service today.[1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... You don't need to be the fittest or the strongest (though some fitness is essential), it's much more important these days for a fire service be reflective of the community it serves[1] (NSFW minor adult themes, headphones recommended).That means more women firefighters, firefighters of colour, short firefighters, tall firefighters, tiny firefighters, stocky firefighters, LGBTQ+ firefighters, religious firefighters, English-second-language firefighters, even techy firefighters, help reflect the community in which they serve.(And I include our paramedic/EMT brothers and sisters in the word 'firefighter' here, who are just as vital as us).All of those skills and life experiences are valuable in the fire service today.[1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... That means more women firefighters, firefighters of colour, short firefighters, tall firefighters, tiny firefighters, stocky firefighters, LGBTQ+ firefighters, religious firefighters, English-second-language firefighters, even techy firefighters, help reflect the community in which they serve.(And I include our paramedic/EMT brothers and sisters in the word 'firefighter' here, who are just as vital as us).All of those skills and life experiences are valuable in the fire service today.[1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... (And I include our paramedic/EMT brothers and sisters in the word 'firefighter' here, who are just as vital as us).All of those skills and life experiences are valuable in the fire service today.[1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... All of those skills and life experiences are valuable in the fire service today.[1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... [1] https://www.ted.com/talks/bronnie_mackintosh_how_diversity_i... 
reply

     https://sfdlive.com/ 
reply

 
reply

 If you rely on employers for your livelihood you are buying a lottery ticket where the payout is smaller and less frequent. If you are a ""follower"" you have no choice. But if you can think your way out of a paper bag use that skill and start doing it.Companies are in no-risk mode to a very large extent. They are very safety oriented. Perhaps Dinosaur Mode is the correct term.  They hire followers, they are run by followers. So start finding obvious stupidities and fix them. We are so used to doing things the normal way that we no longer even pay attention to what we are doing.I'm not saying quit your day job (if you have one) I am saying start a side gig. Start your side gig. 
And a hint if you need one - There are two very very big things missing from the internet. One is trust. The other is the ability for common people to form communities. Not follow people, but collectively think and work together. Read all the comment about why we don't and can't have these. Then go the other direction. :-)So specific advice. Focus on you ability to be effective at accomplishing things. Any technology that lets you build your side gig. And if you can't find the technology to do that, then maybe that is your side gig. Companies are in no-risk mode to a very large extent. They are very safety oriented. Perhaps Dinosaur Mode is the correct term.  They hire followers, they are run by followers. So start finding obvious stupidities and fix them. We are so used to doing things the normal way that we no longer even pay attention to what we are doing.I'm not saying quit your day job (if you have one) I am saying start a side gig. Start your side gig. 
And a hint if you need one - There are two very very big things missing from the internet. One is trust. The other is the ability for common people to form communities. Not follow people, but collectively think and work together. Read all the comment about why we don't and can't have these. Then go the other direction. :-)So specific advice. Focus on you ability to be effective at accomplishing things. Any technology that lets you build your side gig. And if you can't find the technology to do that, then maybe that is your side gig. I'm not saying quit your day job (if you have one) I am saying start a side gig. Start your side gig. 
And a hint if you need one - There are two very very big things missing from the internet. One is trust. The other is the ability for common people to form communities. Not follow people, but collectively think and work together. Read all the comment about why we don't and can't have these. Then go the other direction. :-)So specific advice. Focus on you ability to be effective at accomplishing things. Any technology that lets you build your side gig. And if you can't find the technology to do that, then maybe that is your side gig. So specific advice. Focus on you ability to be effective at accomplishing things. Any technology that lets you build your side gig. And if you can't find the technology to do that, then maybe that is your side gig. 
reply

 https://github.com/JonLatane/jonlinePersonal/Demo server (links to/includes data from the other two servers automatically): https://jonline.ioServers for Durham, NC and Raleigh, NC (link to each other only): https://bullcity.social and https://oakcity.socialBut um… how make money with it? I’m paying $60/mo for these 3 servers (and can bring it down to $40), and really stuck on how to monetize and get people using it. Personal/Demo server (links to/includes data from the other two servers automatically): https://jonline.ioServers for Durham, NC and Raleigh, NC (link to each other only): https://bullcity.social and https://oakcity.socialBut um… how make money with it? I’m paying $60/mo for these 3 servers (and can bring it down to $40), and really stuck on how to monetize and get people using it. Servers for Durham, NC and Raleigh, NC (link to each other only): https://bullcity.social and https://oakcity.socialBut um… how make money with it? I’m paying $60/mo for these 3 servers (and can bring it down to $40), and really stuck on how to monetize and get people using it. But um… how make money with it? I’m paying $60/mo for these 3 servers (and can bring it down to $40), and really stuck on how to monetize and get people using it. 
reply

 I feel excluded. :-( 
reply

 It’s really because (1) it costs $14/mo to add an instance currently (though my aforementioned cost saving measure can bring it down to $1/mo), and (2) I’m not sure whether to register https://tarheel.social, https://chapelboro.social, or what really. Each has specific connotations and it’s a bit weird with a college town (while Raleigh and Durham are more diverse cities).If you’d be interested in partnering and standing an instance up, it’s AGPLed for exactly this reason :-) Feel free to DM me on Insta (@jons_difficult_truths), contact me via my GitHub above, or just reply here with your preferred medium if you’d be interested in talking about it over coffee/drinks! If you’d be interested in partnering and standing an instance up, it’s AGPLed for exactly this reason :-) Feel free to DM me on Insta (@jons_difficult_truths), contact me via my GitHub above, or just reply here with your preferred medium if you’d be interested in talking about it over coffee/drinks! 
reply

 
reply

 What's the failure rate of startups - 90%? This is less risky than a slightly crowded job market where there's still millions of jobs? 
reply

 
reply

 My advice is work for a big company and put in your 40 and no more if possible. Ride that to retirement.Or grind your ass off for a decade with minimal returns and possible ruin. Or grind your ass off for a decade with minimal returns and possible ruin. 
reply

 Yes, those are the ONLY two possible outcomes.Fallacy of the Excluded Middle much? Fallacy of the Excluded Middle much? 
reply

 Anyway. My current contracts are set to end dec 2024, so to start warming up I had a talk with a recruiter just yesterday, and basically asked the same as you “what is in high demand currently? Are there some specific skills that everybody is asking for?”She said:- Always a need for architects, esp with integrations focus. Public sector clients ask for TOGAF sigh- Data infrastructure people is apparently in high demand. Not my thing so didn’t probe further into that- Infosec and cybersec, clients take all they can find. For infosec she mentioned ISO27001 and NIS2 is highly requested. For cybersec “practical experience” was primarily requested, but I know the respected certs like OSCP sells.I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ She said:- Always a need for architects, esp with integrations focus. Public sector clients ask for TOGAF sigh- Data infrastructure people is apparently in high demand. Not my thing so didn’t probe further into that- Infosec and cybersec, clients take all they can find. For infosec she mentioned ISO27001 and NIS2 is highly requested. For cybersec “practical experience” was primarily requested, but I know the respected certs like OSCP sells.I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ - Always a need for architects, esp with integrations focus. Public sector clients ask for TOGAF sigh- Data infrastructure people is apparently in high demand. Not my thing so didn’t probe further into that- Infosec and cybersec, clients take all they can find. For infosec she mentioned ISO27001 and NIS2 is highly requested. For cybersec “practical experience” was primarily requested, but I know the respected certs like OSCP sells.I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ - Data infrastructure people is apparently in high demand. Not my thing so didn’t probe further into that- Infosec and cybersec, clients take all they can find. For infosec she mentioned ISO27001 and NIS2 is highly requested. For cybersec “practical experience” was primarily requested, but I know the respected certs like OSCP sells.I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ - Infosec and cybersec, clients take all they can find. For infosec she mentioned ISO27001 and NIS2 is highly requested. For cybersec “practical experience” was primarily requested, but I know the respected certs like OSCP sells.I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ I’m in EU which is probably some of the reason for the demand for *sec people atm. Infosec due to new regulations like NIS2 etc, and cybersec due to Ukraine war and elevated threat level from Russia (but also generally elevated activity).What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ What she said fits pretty well into what I hear from other contacts as well. She also confirmed what you are saying that many clients are reluctant to hire at the moment, and when they do it’s specialists not generalists.So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ So for 5-10 years I’d say architecture (more to the technical side, not the EA side). And security. I don’t think security is going away any time soon. Edit: to be more specific on security - it’s a very big field and my understanding is that most subfields are in high demand and will continue to be. This site [1] has a very good overview and shows what’s in the different subfields. Too much to write about here but it should enable you to find more specifics.Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ Where are you based just out of curiosity?[1] https://pauljerimy.com/security-certification-roadmap/ [1] https://pauljerimy.com/security-certification-roadmap/ 
reply

 Also, this gets asked all the time, so be sure to use HN search.https://hn.algolia.com/?dateRange=pastYear&page=0&prefix=tru... https://hn.algolia.com/?dateRange=pastYear&page=0&prefix=tru... 
reply

 
reply

   > such as rolling an orange on a keyboard in a cubicle

What's the reference here? 
reply

 Is it glamorous? Does it pay top dollar? No and no, but it is a very secure income.I'm not suggesting you start doing COBOL. Think more along the line of Java, which has an enormous installed base and nobody wants to have anything to do with it if they can help it. That's an opportunity for you to step in.Same thing for Perl, there's a lot of existing code that needs maintenance. I'm sure you can think of a few other languages and technologies that fit this category.Best of luck! I'm not suggesting you start doing COBOL. Think more along the line of Java, which has an enormous installed base and nobody wants to have anything to do with it if they can help it. That's an opportunity for you to step in.Same thing for Perl, there's a lot of existing code that needs maintenance. I'm sure you can think of a few other languages and technologies that fit this category.Best of luck! Same thing for Perl, there's a lot of existing code that needs maintenance. I'm sure you can think of a few other languages and technologies that fit this category.Best of luck! Best of luck! 
reply

 The Western world should have no shortage of Java experts for the foreseeable future. 
reply

 
reply

 
reply

 
reply

 
reply

 I think with generative AI things will continue to move in this direction. Hands on code time will continue to shrink, time talking to people will continue to increase.Personally I love to code, I love quiet time, I love getting into a flow. I'm 30 years into my career and I learned to program 10 years before that. I absolutely remember when things were very different than they are now, and I'm sure there are some places where they're still different. But I think the direction is clear, technical skills are constantly giving way to soft skills. Personally I love to code, I love quiet time, I love getting into a flow. I'm 30 years into my career and I learned to program 10 years before that. I absolutely remember when things were very different than they are now, and I'm sure there are some places where they're still different. But I think the direction is clear, technical skills are constantly giving way to soft skills. 
reply

 Also call me cynical but this probably means more meetings, many of which can turn out to be a big waste of time for the individual. 
reply

 
reply

 I'd guess that the bulk of software jobs going forwards are going to be of this nature, including ""full-stack"" type jobs where an employer wants someone with a current skill set who can rapidly assemble a solution out of various off-the-shelf technologies, with AL/ML increasingly part of the mix. This is also what employers want to see on resumes - an emphasis on having delivered useful solutions rather than just a laundry list of tech skills.If you're a gig worker rather than looking for full-time jobs, then that may change things a bit - more towards the hired gun coming in with a specialized skill to do a specific job as opposed to an employee with a full stack of skills of general relevance to the type of work a given team is doing.5-10 years is a relatively long time. I'm not sure how long any specific recommendations of what's in hot demand right now will last, but being able to automate things using off-the-shelf & fine-tuned LLMs/AI is presumably going to be an area that will continue to grow in demand over that time frame. If you're a gig worker rather than looking for full-time jobs, then that may change things a bit - more towards the hired gun coming in with a specialized skill to do a specific job as opposed to an employee with a full stack of skills of general relevance to the type of work a given team is doing.5-10 years is a relatively long time. I'm not sure how long any specific recommendations of what's in hot demand right now will last, but being able to automate things using off-the-shelf & fine-tuned LLMs/AI is presumably going to be an area that will continue to grow in demand over that time frame. 5-10 years is a relatively long time. I'm not sure how long any specific recommendations of what's in hot demand right now will last, but being able to automate things using off-the-shelf & fine-tuned LLMs/AI is presumably going to be an area that will continue to grow in demand over that time frame. 
reply

 DBA has been reinvented as DBRE. It’s essentially still the same job, except you also have to know how to wrestle YAML, HA/DR, and create meaningful SLIs / SLOs. But if you like getting your hands dirty with the internals of DBs, hoo boy are there jobs. My last interview run, I had a 50% callback rate (n=10), plus some extras where the recruiter hit me up on LinkedIn.The job can and should entail Linux ops knowledge, so if you aren’t great at that, learn it to a great detail. Somewhat obscure things like filesystem and kernel tuning are helpful.I say can and should because yes, if all you deal with are managed DBs, you can pretend Linux doesn’t exist – but it does, and it’s enormously helpful to have a good handle on concepts like IOPS (including how latency affects it, and how ops requests can be batched by the kernel [and EBS FWIW], etc.). The job can and should entail Linux ops knowledge, so if you aren’t great at that, learn it to a great detail. Somewhat obscure things like filesystem and kernel tuning are helpful.I say can and should because yes, if all you deal with are managed DBs, you can pretend Linux doesn’t exist – but it does, and it’s enormously helpful to have a good handle on concepts like IOPS (including how latency affects it, and how ops requests can be batched by the kernel [and EBS FWIW], etc.). I say can and should because yes, if all you deal with are managed DBs, you can pretend Linux doesn’t exist – but it does, and it’s enormously helpful to have a good handle on concepts like IOPS (including how latency affects it, and how ops requests can be batched by the kernel [and EBS FWIW], etc.). 
reply

 
reply

 My pet theory for the explosion of jobs in this space is that during ZIRP, tons of companies underwent huge growth (generally without a DB team, as you said), and managed by just upsizing instance classes. Eventually, you can’t solve your problem by throwing money at a vendor. 
reply

 Meet people in your org and others and make friends, develop some soft skills. I think these things really are career differentiator.Idk I think just get passionate about things, learn about them, and be curious. Maybe you’ll find something you can specialize in, maybe you’ll find a unique constellation of skills and interests. Do some side projects here and there, it’s a way to take charge of your own skill development… yeah it’s sad that work can’t always provide this; but that’s how it goes…Oh and to your best ability don’t let what everyone else is saying get you down, there is a lot of cynicism going around here , people are feeling pain… don’t let that pain become yours. Idk I think just get passionate about things, learn about them, and be curious. Maybe you’ll find something you can specialize in, maybe you’ll find a unique constellation of skills and interests. Do some side projects here and there, it’s a way to take charge of your own skill development… yeah it’s sad that work can’t always provide this; but that’s how it goes…Oh and to your best ability don’t let what everyone else is saying get you down, there is a lot of cynicism going around here , people are feeling pain… don’t let that pain become yours. Oh and to your best ability don’t let what everyone else is saying get you down, there is a lot of cynicism going around here , people are feeling pain… don’t let that pain become yours. 
reply

 - Communication and being able to work across teams. Communicating well and effectively while keeping your audience in mind is a superpower
- Build your networkSpecific- Security is huge and will continue to grow Specific- Security is huge and will continue to grow - Security is huge and will continue to grow 
reply

 I think its a precarious time to be in tech. Generally in the labor market, you want to become as much of a specialist as humanly possible. But inevitably, most software jobs will be outsourced or replaced by AI over time.I think the ideal is to be a specialist in some intersection of technology that requires human oversight.Like front-end engineer with experience with FDA regulated x,y,z. UI/UX engineer for automotive interfaces.If you want to jump on the next ""AI"" wave, I personally would love to jump onto robotics, but there are way more qualified folks in that domain :) I think the ideal is to be a specialist in some intersection of technology that requires human oversight.Like front-end engineer with experience with FDA regulated x,y,z. UI/UX engineer for automotive interfaces.If you want to jump on the next ""AI"" wave, I personally would love to jump onto robotics, but there are way more qualified folks in that domain :) Like front-end engineer with experience with FDA regulated x,y,z. UI/UX engineer for automotive interfaces.If you want to jump on the next ""AI"" wave, I personally would love to jump onto robotics, but there are way more qualified folks in that domain :) If you want to jump on the next ""AI"" wave, I personally would love to jump onto robotics, but there are way more qualified folks in that domain :) 
reply

 If you just want a technology for which there will be a job for the next 5-10 years, you can pick literally anything out of a hat.  e.g. COBOL still has plenty of jobs, and 10 years from now, there will still be COBOL jobs.Do you want a job in a particular area?  Do you want a particular type of employment arrangement?  Do you want a large number of options?  What salary range are you aiming for?  What are your professional strengths?  If you want a good job, you need to find something that matches your inherent desires and strengths... because if you don't, you'll be competing against people who are better match for the role than you are. Do you want a job in a particular area?  Do you want a particular type of employment arrangement?  Do you want a large number of options?  What salary range are you aiming for?  What are your professional strengths?  If you want a good job, you need to find something that matches your inherent desires and strengths... because if you don't, you'll be competing against people who are better match for the role than you are. 
reply

 Who says so? Being a generalist is the worst thing to do. The world is full generalist software engineers who are ready to take your job. Being a framework monkey doesn't work either in the long term; it is so exhausting.Being just a software engineer is not sufficient. I think without having a unique specialty, which is hard to replace, you would be just another cog in the machine.Understanding a domain (finance, healthcare, embedded devices, etc.) in addition to being a developer is one way to make yourself indispensable, which is something a lot of developers lack.The same thing happened to ""data scientists"", but faster. Throwing a data scientist to a big data problem without them knowing nothing about the field resulted in bunch of stupid ""solutions"". The focus on AI is an outcome of that, because very few people actually understand their domain, so we throw AI to everything in the hope that something will work. This might work for employment opportunities in the short term until something shinier comes along. Being just a software engineer is not sufficient. I think without having a unique specialty, which is hard to replace, you would be just another cog in the machine.Understanding a domain (finance, healthcare, embedded devices, etc.) in addition to being a developer is one way to make yourself indispensable, which is something a lot of developers lack.The same thing happened to ""data scientists"", but faster. Throwing a data scientist to a big data problem without them knowing nothing about the field resulted in bunch of stupid ""solutions"". The focus on AI is an outcome of that, because very few people actually understand their domain, so we throw AI to everything in the hope that something will work. This might work for employment opportunities in the short term until something shinier comes along. Understanding a domain (finance, healthcare, embedded devices, etc.) in addition to being a developer is one way to make yourself indispensable, which is something a lot of developers lack.The same thing happened to ""data scientists"", but faster. Throwing a data scientist to a big data problem without them knowing nothing about the field resulted in bunch of stupid ""solutions"". The focus on AI is an outcome of that, because very few people actually understand their domain, so we throw AI to everything in the hope that something will work. This might work for employment opportunities in the short term until something shinier comes along. The same thing happened to ""data scientists"", but faster. Throwing a data scientist to a big data problem without them knowing nothing about the field resulted in bunch of stupid ""solutions"". The focus on AI is an outcome of that, because very few people actually understand their domain, so we throw AI to everything in the hope that something will work. This might work for employment opportunities in the short term until something shinier comes along. 
reply

 Perhaps you're asking ""where will the low hanging fruit be in 5 years time""? I think that's always difficult to answer because software tech can go from obscurity to ubiquity and back again in a short cycle. I think it is roughly like picking winners on the stock market. 
reply

 
reply

 but until then: full stack ML for business intelligence. 
reply

 Balance your budget, have a healthy safety net of savings, investments, develop good spending habits, no high interest debt, live frugally, etc.Nothing is certain, you might find yourself out of work at anytime for an unknown period of time. It's hard to anticipate the market, but you can always re-skill to adapt to the changing market. That's easier to do if you have a stable and secure financial foundation. Nothing is certain, you might find yourself out of work at anytime for an unknown period of time. It's hard to anticipate the market, but you can always re-skill to adapt to the changing market. That's easier to do if you have a stable and secure financial foundation. 
reply

 I don't think generalist is good from an employability standpoint. I've heard that I might get a PIP and there's really no options for me to move into. If I do get PIP'd then I'm thinking I'll try to find something like garbage collection to move into. 
reply

 Being a specialist is best for maximizing salary and job security on a job. 
reply

 
reply

 In the US, generalists are still high in demand. You might end up writing Wordpress plugins or some other unsexy tech, but there's work available for a decent salary.Or if you are in the US and you're thinking about tech purely in terms of startup/vc/faaang terms, then you're more right, but wrt tech more broadly that's just not the case. Or if you are in the US and you're thinking about tech purely in terms of startup/vc/faaang terms, then you're more right, but wrt tech more broadly that's just not the case. 
reply

 
reply

 
reply

 
reply

 If you are a good C, python, or JavaScript[1] developer you will have work for the rest of time.[1]: it is hazardously easy to end up as a framework programmer in JavaScript.  If you are working in JavaScript I would strongly encourage you to learn one of the other two if you want to stay relevant for more than a few years. [1]: it is hazardously easy to end up as a framework programmer in JavaScript.  If you are working in JavaScript I would strongly encourage you to learn one of the other two if you want to stay relevant for more than a few years. 
reply

 languages are an implementation detail. What's really important is critical thinking, problem solving, and knowing how computers work. 
reply

 Who needs to grind LeetCode or understand algorithms when you have 100k followers? Companies will throw money at you just to look cool by association.Of course, this strategy may only work until the VC funding runs out and they realize you can't actually code your way out of a paper bag... But hey, by then you'll have cashed out and moved on to your next ""passion project""! Of course, this strategy may only work until the VC funding runs out and they realize you can't actually code your way out of a paper bag... But hey, by then you'll have cashed out and moved on to your next ""passion project""! 
reply

 A good manager is worth a lot to a company. It's a subtle art, and one that doesn't really scale all that well. But it's a very valuable one.General people skills and emotion management are also very valuable and not easy to deal with. General people skills and emotion management are also very valuable and not easy to deal with. 
reply

 
reply

 
reply

 
reply

 Every single hacker is a creative problem solver.OP: I don't know what specific skillset/stack will pay $$$ in 10 years.But it wouldn't hurt to be good at:1) Gluing together admin dashboards / SaaS2) Getting very good sales/marketing3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. OP: I don't know what specific skillset/stack will pay $$$ in 10 years.But it wouldn't hurt to be good at:1) Gluing together admin dashboards / SaaS2) Getting very good sales/marketing3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. But it wouldn't hurt to be good at:1) Gluing together admin dashboards / SaaS2) Getting very good sales/marketing3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. 1) Gluing together admin dashboards / SaaS2) Getting very good sales/marketing3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. 2) Getting very good sales/marketing3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. 3) developing an audience4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. 4) UX- the kind where customers don't take one look and run awayIf you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. If you can do all those things, then whatever stack people are using at the time, or whatever entrepreneurs are selling at the time, you'll have the skills to add value and make money. 
reply

 
reply

 
reply

 If I was still in my 30s or younger I'd probably look into becoming an electrician or a plumber - the pay is good, lots of demand as older generation is retiring now, and it's going to be difficult to automate those jobs at least for the next ~20 years especially for older construction where things are often not very standard. That would get you into your late 50s at least. 
reply

 
reply

 
reply

 
reply

 (This is a joke) 
reply

 Adding my own anecdote as an employer, I mainly hire engineers based on their demonstrated ability to efficiently identify practical solutions to problems, and to self manage the translation of those solutions into maintainable, production systems (tldr, ship shit that works and that others can work on with you, all in a reasonable timeframe)That being said, I can tell you it is extremely hard to find an experienced cryptographer, and I expect that need to grow over the next several years (though it’s very niche and your options will certainly be limited, if lucrative) That being said, I can tell you it is extremely hard to find an experienced cryptographer, and I expect that need to grow over the next several years (though it’s very niche and your options will certainly be limited, if lucrative) 
reply

 
reply

 
reply

 Look at the changes that happened in the past and ask yourself:* which people have been successful regardless of changes that happened?I think almost independently of whatever you do in life, if you are absolutely best at what you do, you are probably going to be fine. Even if what you do is house cleaning, if you are best at houscleaning you are going to be fine. There is always going to be a millionaire or a billionaire who will prefer to have a human sweep the floor rather than a roomba. Or maybe a lab will prefer to have humans to do the work just to not invite potentially dangerous electronics on the site.There is always demand for top level talent in any area. There will always be demand for human reporters, human drivers, human writers, human programmers, human graphics designers, human managers, regardless of the changes that will happen.But it is possible that the demand will only be for top of the top of the top of people in each those areas and 99.9% or even more will be replaced and automated.Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. * which people have been successful regardless of changes that happened?I think almost independently of whatever you do in life, if you are absolutely best at what you do, you are probably going to be fine. Even if what you do is house cleaning, if you are best at houscleaning you are going to be fine. There is always going to be a millionaire or a billionaire who will prefer to have a human sweep the floor rather than a roomba. Or maybe a lab will prefer to have humans to do the work just to not invite potentially dangerous electronics on the site.There is always demand for top level talent in any area. There will always be demand for human reporters, human drivers, human writers, human programmers, human graphics designers, human managers, regardless of the changes that will happen.But it is possible that the demand will only be for top of the top of the top of people in each those areas and 99.9% or even more will be replaced and automated.Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. I think almost independently of whatever you do in life, if you are absolutely best at what you do, you are probably going to be fine. Even if what you do is house cleaning, if you are best at houscleaning you are going to be fine. There is always going to be a millionaire or a billionaire who will prefer to have a human sweep the floor rather than a roomba. Or maybe a lab will prefer to have humans to do the work just to not invite potentially dangerous electronics on the site.There is always demand for top level talent in any area. There will always be demand for human reporters, human drivers, human writers, human programmers, human graphics designers, human managers, regardless of the changes that will happen.But it is possible that the demand will only be for top of the top of the top of people in each those areas and 99.9% or even more will be replaced and automated.Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. There is always demand for top level talent in any area. There will always be demand for human reporters, human drivers, human writers, human programmers, human graphics designers, human managers, regardless of the changes that will happen.But it is possible that the demand will only be for top of the top of the top of people in each those areas and 99.9% or even more will be replaced and automated.Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. But it is possible that the demand will only be for top of the top of the top of people in each those areas and 99.9% or even more will be replaced and automated.Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. Another thing that can help is rare specialisation that is not worth automating.One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. One of the easier ways to find those rare specialisation is at a cross of two largely orthogonal areas of study. I like to think a lot of useful things happen through people who connect different, sometimes distant areas of knowledge / ability.Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. Another thing that helps people survive change is being a free agent. Don't be an employee -- be an enterpreneur with a mindset to learn and ability to pivot on a moment to moment basis. Learn a lot about life and universe, economics, trends, etc. Learn basis of how enterpreneurship works, how to find new areas that can provide value to people.---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. ---So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. So if you are a developer, you have some choices:* become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. * become best damn developer while you still can. Spend considerable time honestly learning your craft. Just completing projects is no longer enough to be safe, but outstanding developers who can complete projects will always be needed.* learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. * learn deeply something else that can be connected with development. I know finances and it seems there will always be a need for people who know well development as well as finances.* you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. * you could learn management/leadership skills. The trouble is, there is plenty of technical managers/leaders, just becoming one will not guarantee job safety. You will have to work hard to keep being strong technically while you are also trying to become very competent manager/leader.* build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. * build on your development skills to become an enterpreneur. This is probably the hardest / riskiest path.Other choices? Please, let me know... I am myself interested in this whole topic. Other choices? Please, let me know... I am myself interested in this whole topic. 
reply

 TL;DRA. nobody knowsB. nobody cares(i.e. about what current new shiny thing is, only about your actual _engineering_ skill which is not easily broken down to a list of specific topics to learn per se) A. nobody knowsB. nobody cares(i.e. about what current new shiny thing is, only about your actual _engineering_ skill which is not easily broken down to a list of specific topics to learn per se) B. nobody cares(i.e. about what current new shiny thing is, only about your actual _engineering_ skill which is not easily broken down to a list of specific topics to learn per se) (i.e. about what current new shiny thing is, only about your actual _engineering_ skill which is not easily broken down to a list of specific topics to learn per se) 
reply

 
reply

 There's always a kernel of truth to things -- if you are counting on some bare minimum tech skill like knowing enough HTML to make a small biz web site, or coding carefully specified mocks into JavaScript, you're going to be vulnerable to these kinds of disruptions. But real software engineering is a lot more than that -- you need to be the bridge between people and problems and the technology that can solve them. When AI can do that on its own, we'll be out of a job but so will everyone else. 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

"
44,susam,"Ask HN: Do You Have a Copy of IBM ""Logo: Programming with Turtle Graphics""?",https://news.ycombinator.com/item?id=40691792,"Hello HN! First a quick background of what I am trying to search.In 1983, Logo Computer Systems, Inc. (LCSI) published two popular versions of Logo. One was meant to be run on Atari systems and the other was meant to be run on IBM PCs.The manuals and document…",2024-06-15T18:44:37Z,"In 1983, Logo Computer Systems, Inc. (LCSI) published two popular versions of Logo.  One was meant to be run on Atari systems and the other was meant to be run on IBM PCs.The manuals and documentation for the Atari LCSI Logo are very well archived on the world wide web.  The two I am particularly interested in are here:A) Atari Logo Reference Manual: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Reference%20Manual.pdfB) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introduction%20To%20Programing%20Through%20Turtle%20Graphics%20%281-sided%29.pdfOn page 3 of the first document (9th page in the PDF), there is a reference to the second document:> First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? The manuals and documentation for the Atari LCSI Logo are very well archived on the world wide web.  The two I am particularly interested in are here:A) Atari Logo Reference Manual: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Reference%20Manual.pdfB) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introduction%20To%20Programing%20Through%20Turtle%20Graphics%20%281-sided%29.pdfOn page 3 of the first document (9th page in the PDF), there is a reference to the second document:> First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? A) Atari Logo Reference Manual: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Reference%20Manual.pdfB) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introduction%20To%20Programing%20Through%20Turtle%20Graphics%20%281-sided%29.pdfOn page 3 of the first document (9th page in the PDF), there is a reference to the second document:> First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? B) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introduction%20To%20Programing%20Through%20Turtle%20Graphics%20%281-sided%29.pdfOn page 3 of the first document (9th page in the PDF), there is a reference to the second document:> First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? On page 3 of the first document (9th page in the PDF), there is a reference to the second document:> First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? > First time Logo users should start with the companion manual Introduction to Programming Through Turtle Graphics.However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? However, sadly, the manuals for IBM LCSI Logo does not seem to be easily available.  I found the following:C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual.pdfIt too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? It too has a reference to an introductory documentation:> The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? > The purpose of the IBM Personal Computer Logo Reference is to give you a thorough understanding of the many features of Logo by expanding the information contained in Logo: Programming with Turtle Graphics, which comes with IBM Personal Computer Logo.However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? However, I have not been able to find a copy of this document anywhere.  Do you know any place I can get hold of a copy of the document titled ""Logo: Programming with Turtle Graphics"" that is meant to be used with IBM/LCSI PC Logo? The Library of Congress does not appear to have a copy in the main catalog, but that does not eliminate them having a copy in the technical reports department, though finding it through the technical reports department will be impossible without report numbers or other identifying information.If you are looking to buy a copy, you may be in luck.  A search for the title in AbeBooks [2] pulls up one seller (Sleepy Hollow Books, Huntington, VT, U.S.A.) for 33 USD plus shipping.  It is impossible to tell if this is a copy of the IBM or Atari edition, though.  You may want to contact the seller, which is possible on AbeBooks.Good luck with your search![1] https://search.worldcat.org/title/10330138[2] https://www.abebooks.com/ If you are looking to buy a copy, you may be in luck.  A search for the title in AbeBooks [2] pulls up one seller (Sleepy Hollow Books, Huntington, VT, U.S.A.) for 33 USD plus shipping.  It is impossible to tell if this is a copy of the IBM or Atari edition, though.  You may want to contact the seller, which is possible on AbeBooks.Good luck with your search![1] https://search.worldcat.org/title/10330138[2] https://www.abebooks.com/ Good luck with your search![1] https://search.worldcat.org/title/10330138[2] https://www.abebooks.com/ [1] https://search.worldcat.org/title/10330138[2] https://www.abebooks.com/ [2] https://www.abebooks.com/ 
reply

 A) Atari Logo Reference Manual: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Refere...B) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introd...C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual... B) Atari Logo Introduction to Programming Through Turtle Graphics: https://atariwiki.org/wiki/attach/Logo/Atari%20LOGO%20Introd...C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual... C) IBM Personal Computer Logo Reference: https://archive.org/download/ibm_logo_manual/ibm_logo_manual... 
reply

 D) IBM Logo Programming With Turtle Graphics: https://archive.org/download/logo-programming-with-turtle-gr...See https://news.ycombinator.com/item?id=40694386 for details.Also, see https://news.ycombinator.com/item?id=40699153 for a discussion on this newly archived document. See https://news.ycombinator.com/item?id=40694386 for details.Also, see https://news.ycombinator.com/item?id=40699153 for a discussion on this newly archived document. Also, see https://news.ycombinator.com/item?id=40699153 for a discussion on this newly archived document. 
reply

 
reply

 
reply

 ---By the way, I took a quick look at all the scanned pages and I noticed a couple of duplicate pages.* Page 3-18 is followed by pages 4-11 to 4-14 which are followed by 4-1 to 4-14.  Therefore pages 4-11 to 4-14 are present twice.* Page 8-8 is followed by pages 9-3 to 9-4 which are followed by pages 9-1 to 9-10.  Therefore pages 9-3 to 9-4 are present twice.I just wanted to bring this to your attention.  This is no problem though since no page is missing.  I was able to remove the duplicate pages using this Ghostscript command:  gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! By the way, I took a quick look at all the scanned pages and I noticed a couple of duplicate pages.* Page 3-18 is followed by pages 4-11 to 4-14 which are followed by 4-1 to 4-14.  Therefore pages 4-11 to 4-14 are present twice.* Page 8-8 is followed by pages 9-3 to 9-4 which are followed by pages 9-1 to 9-10.  Therefore pages 9-3 to 9-4 are present twice.I just wanted to bring this to your attention.  This is no problem though since no page is missing.  I was able to remove the duplicate pages using this Ghostscript command:  gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! * Page 3-18 is followed by pages 4-11 to 4-14 which are followed by 4-1 to 4-14.  Therefore pages 4-11 to 4-14 are present twice.* Page 8-8 is followed by pages 9-3 to 9-4 which are followed by pages 9-1 to 9-10.  Therefore pages 9-3 to 9-4 are present twice.I just wanted to bring this to your attention.  This is no problem though since no page is missing.  I was able to remove the duplicate pages using this Ghostscript command:  gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! * Page 8-8 is followed by pages 9-3 to 9-4 which are followed by pages 9-1 to 9-10.  Therefore pages 9-3 to 9-4 are present twice.I just wanted to bring this to your attention.  This is no problem though since no page is missing.  I was able to remove the duplicate pages using this Ghostscript command:  gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! I just wanted to bring this to your attention.  This is no problem though since no page is missing.  I was able to remove the duplicate pages using this Ghostscript command:  gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you!   gs -dSAFER -dBATCH -dNOPAUSE -sDEVICE=pdfwrite -sOUTPUTFILE=out.pdf -dFirstPage=1 -dLastPage=68 in.pdf -dFirstPage=73 -dLastPage=120 in.pdf -dFirstPage=123 -dLastPage=246 in.pdf

This removed the 6 duplicate pages thereby reducing the number of pages from 246 to 240.  The size of the PDF reduced too from 93615247 bytes to 92671554 bytes.I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! I really appreciate your effort in scanning the manual!  Your help with my question has been fantastic!  Thank you! 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 
reply

 If you are looking for a book a little less hardcore than the previous recommendation, check out Visual Modeling With Logo: A Structured Approach to Seeing by James Clayson. 
reply

 
reply

 thank you for the atari documents! i'm pleased to see many of the advanced concepts from microworlds (most notably multiple turtles, but also shapes were so much fun!) already there in this early version.lcsi's current implementation is a free, web version at https://lynxcoding.club/ lcsi's current implementation is a free, web version at https://lynxcoding.club/ 
reply

 
reply

"
45,wastib,"Show HN: AutoBalter, automated load-testing and fuzzing with just an API spec",https://news.ycombinator.com/item?id=40646793,"Hi everyone!I'm excited to announce the Beta launch of AutoBalter, which is an automated load-testing, fuzzing and integration testing solution. Taking an OpenAPI specification, AutoBalter will simulate requests to measure performance information and display …",2024-06-11T14:47:16Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40646793
46,loboda_ro,Show HN: Call John Cena and Guy Raz AI Clones,https://news.ycombinator.com/item?id=40692867,"Backstory:I moved to another country and found it difficult to stay in touch with my best friend due to the significant time difference. Both of us were busy with work and higher education, making it nearly impossible to match our schedules. Missing my friend…",2024-06-15T21:31:56Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40692867
47,eltonlin,Show HN: I built a calendar designed for tiny habits,https://news.ycombinator.com/item?id=40606269,"Hi! I'm launching https://intentions.life, a calendar designed for small habits.I used Google Calendar for 6 years, but found it hard to put small habits there, because everything takes up at least 15 minutes worth of space. It was one of the reasons my healt…",2024-06-07T07:46:48Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40606269
48,wastib,"Show HN: AutoBalter, automated load-testing and fuzzing with just an API spec",https://news.ycombinator.com/item?id=40657734,"Hi everyone!I'm excited to announce the Beta launch of AutoBalter, which is an automated load-testing, fuzzing and integration testing solution. Taking an OpenAPI specification, AutoBalter will simulate requests to measure performance information and display …",2024-06-12T13:10:55Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40657734
49,Sergei_Baranov,Show HN: Grably's accessing private data to fuel AI growth,https://news.ycombinator.com/item?id=40650786,"Did you know only 4% of the data is publicly available for the whole LLM market and other AI products?Grably's here to help AI companies instantly access accurate, diverse, unique and specific datasets sourced from individuals who turned their galleries and p…",2024-06-11T19:58:42Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40650786
50,chadsix,Show HN: Using the djb2 hash to map IP addresses to readable words for the lulz,https://news.ycombinator.com/item?id=40628767,"Hi HN,This is more or less a fun experiment that I thought was worth sharing.Using Daniel J. Bernstein's [1] djb2 hash that he made when he was only 20 years old in 1991, we map names to hashes and provide reverse mappings using an english word list from dwyl…",2024-06-10T00:23:28Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40628767
51,iamflimflam1,Show HN: ESP32S3 ZXSpectrum,https://news.ycombinator.com/item?id=40679184,I've been playing around with ESP32 MCUs and displays for a while and finally got around to getting a ZX Spectrum emulator working. I then saw that you can now do full color silk screen printing on PCBs and got the thinking - the ESP32 has capacitive touch ca…,2024-06-14T09:40:26Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40679184
52,loboda_ro,Show HN: Try Our New AI Conversation App,https://news.ycombinator.com/item?id=40610535,"Hi HN,We're developing an app that enables users to create AI versions of real people and interact with them seamlessly. Currently, we have an AI version of Andrew Tate available for testing, with more functionality and additional personalities coming soon.We…",2024-06-07T16:58:46Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40610535
53,archgee_app,Show HN: I built job search platform for Architects,https://news.ycombinator.com/item?id=40619589,"Hi HN,I started my solopreneur journey this year and I’d like to share something I’ve been working on: ArchGee - a job search platform for architects, interior designers, urban planners, and other professionals in the architecture field. Coming from an IT bac…",2024-06-08T19:10:50Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40619589
54,pboutros,Show HN: Compass Pro: AI trained on expert interviews,https://news.ycombinator.com/item?id=40662114,"Hey HN! Philippe, Tyler, and Viet here. We're the cofounders of GetWhys, and we built Compass (https://www.getwhys.io/compass).Our customers (incl. Docker, DocuSign, Typeform...) use Compass to answer difficult questions about B2B software. Things like:- ""How…",2024-06-12T19:39:16Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40662114
55,johnwheeler,Show HN: Building a Small SaaS in Public,https://news.ycombinator.com/item?id=40659508,"I've been recording my working sessions while I build a small startup in public by myself.I basically spend chunks of 45 minutes working in various tools like Figma, ChatGPT, Adobe CC, and PyCharm, then I speed them up 1000%-2000% and do a voiceover and just …",2024-06-12T15:52:37Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40659508
56,patrikbraborec,Show HN: Raven – automatically organize your book notes,https://news.ycombinator.com/item?id=40679197,Hi HN! We are Tiago and Patrik. We're building an application to improve the process of taking notes and personal knowledge management. We met through the YC Co-Founder matching platform and we had a common interest of being heavy book readers. We also suffer…,2024-06-14T09:43:15Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40679197
57,osinttechs,Show HN: Domain Public Data Collection Service Got Updated,https://news.ycombinator.com/item?id=40683389,"Hello everyone! Some days ago I've published a post here about DPULSE which is domain OSINT tool. Аor those who haven't seen it I'll give Github link (https://github.com/OSINT-TECHNOLOGIES/dpulse). In general, this tool allows you to gather a lot of open-sour…",2024-06-14T18:19:05Z,Error: 403 Client Error: Forbidden for url: https://news.ycombinator.com/item?id=40683389
